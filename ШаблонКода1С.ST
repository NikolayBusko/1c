{1,
{8,
{"Мои варианты шаблонов",1,0,"",""},
{0,
{"- Для тестов -",0,0,"Тест","СоотвПеречисления = Новый Соответствие;
ОбъектПеречисления = Перечисления.<? ""Имя перечисления"">;
Для Сч = 0 По ОбъектПеречисления.Количество() - 1 Цикл
	ЗначПеречисл = Метаданные.Перечисления.<? ""Имя перечисления"">.ЗначенияПеречисления[Сч];
	СоотвПеречисления.Вставить(ЗначениеПеречисления.Синоним, ЗначПеречисл);
КонецЦикла;	
"}
},
{6,
{"Директивы / Аннотации",1,0,"",""},
{0,
{"Выбор директивы",0,0,"&","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"&НаКлиенте",0,0,"&[НаКлиенте]","&НаКлиенте"}
},
{0,
{"&НаСервере",0,0,"&[НаСервере]","&НаСервере"}
},
{0,
{"&НаСервереБезКонтекста",0,0,"&[НаСервереБезКонтекста]","&НаСервереБезКонтекста"}
},
{0,
{"&НаКлиентеНаСервереБезКонтекста",0,0,"&[НаКлиентеНаСервереБезКонтекста]","&НаКлиентеНаСервереБезКонтекста"}
},
{0,
{"Аннотации расширения (Перед, После, Вместо, ИзменениеИКонтроль)",0,0,"&","&< """", ВыборВарианта, ""Перед"",""Перед"", ""После"",""После"", ""Вместо"",""Вместо"", ""ИзменениеИКонтроль"",""ИзменениеИКонтроль"">"}
}
},
{4,
{"Оформление кода",1,0,"",""},
{3,
{"Оформление кода редактора",1,0,"",""},
{0,
{"Начало комментария",0,0,"//[+]","// +++{ <?"""", ДатаВремя, ""ДЛФ=D""> :: БНВ - <? ""Примечание"">"}
},
{0,
{"Закрытие комметария",0,0,"//[-]","// }--- БНВ"}
},
{0,
{"Отчерк ",0,0,"//[*]","<?>//======================================================================================================================"}
}
},
{6,
{"Структура модулей",1,0,"",""},
{0,
{"Определение области",0,0,"#[Область]","#Область <? ""Имя области (без пробелов)"">
	
#КонецОбласти"}
},
{0,
{"Оформление общего модуля",0,0,"#[ОбластьОбщийМодуль]","////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти"}
},
{0,
{"Оформление модуля объекта",0,0,"#[ОбластьМодульОбъекта]","
////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиПроведения

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти


"}
},
{0,
{"Оформление модуля формы",0,0,"#[ОбластьМодульФормы]","////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////


#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти"}
},
{0,
{"Оформление модуля бизнес-процесса",0,0,"#[ОбластьМодульБизнесПроцесса]","
////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийКартыМаршрута

#КонецОбласти

#Область ОбработчикиСобытийМодуля

#КонецОбласти

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Оформление  модуля менеджера",0,0,"#[ОбластьМодульМенеджера]","////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли
"}
}
},
{4,
{"Управление компиляцией",1,0,"",""},
{0,
{"#Если (Выбор предпроцессора)",0,0,"#[Если]","#Если <?""Выберите инструкцию препроцессора"", ВыборВарианта, ""Сервер"", ""Сервер"", ""Клиент"", ""Клиент"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент"", ""ВнешнееСоединение"", ""ВнешнееСоединение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение""> Тогда
	<?>
#КонецЕсли"}
},
{0,
{"#Если (Сервер)",0,0,"#[Если]","#Если Сервер Тогда
	<?>
#КонецЕсли"}
},
{0,
{"#Если (Клиент)",0,0,"#[Если]","#Если Клиент Тогда
	<?>
#КонецЕсли"}
},
{3,
{"ОшибкиВызоваМодулей",1,0,"",""},
{0,
{"МодульОбъекта (Обрамление ошибок вызова)",0,0,"#[МодульОбъекта]","// Методическая информация: https://its.1c.ru/db/v8std/content/680/hdoc
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
  // Необходимый вызов общего модуля
#КонецЕсли"}
},
{0,
{"МодульСеанса (Обрамление ошибок вызова)",0,0,"#[МодульСеанса]","// Методическая информация: https://its.1c.ru/db/v8std/content/680/hdoc
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
  // Необходимый вызов общего модуля
#КонецЕсли"}
},
{0,
{"МодульКлиента (Обрамление ошибок вызова)",0,0,"#[МодульКлиента]","// Методическая информация: https://its.1c.ru/db/v8std/content/680/hdoc
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
  // Необходимый вызов общего модуля
#КонецЕсли"}
}
}
},
{2,
{"Не использовать (но если очень хочется, то не стоит)",1,0,"",""},
{0,
{"Безусловный переход",0,0,"~","~<? ""Имя метки (без пробелов)"">"}
},
{0,
{"Перейти на метку",0,0,"Перейти","Перейти ~<? ""Имя метки"">"}
}
}
},
{15,
{"Коллекции значений",1,0,"",""},
{9,
{"Даты",1,0,"",""},
{0,
{"Дата (Текущая дата)",0,0,"Дата[ТекДата]","ТекущаяДата()"}
},
{0,
{"Дата (Текущая дата сеанса)",0,0,"Дата[ТекДата]","ТекущаяДатаСеанса()"}
},
{0,
{"Дата (Начало дня)",0,0,"Дата[НачДня]","НачалоДня(<?>)"}
},
{0,
{"Дата (Конец дня)",0,0,"Дата[КонДня]","КонецДня(<?>)"}
},
{0,
{"Дата (Начало месяца)",0,0,"Дата[НачМес]","НачалоМесяца(<?>)"}
},
{0,
{"Дата (Конец месяца)",0,0,"Дата[КонМес]","КонецМесяца(<?>)"}
},
{0,
{"Дата (Пустая дата)",0,0,"Дата[ПустаяДата]","'00010101000000'"}
},
{0,
{"Добавить месяц",0,0,"Дата[ДобавитьМесяц]","ДобавитьМесяц(<?>,)"}
},
{0,
{"Момент времени",0,0,"Мом[ентВремени]","МоментВремени()"}
}
},
{1,
{"Дерево значений",1,0,"",""},
{0,
{"ДеревоЗначений",0,0,"Дерево[Значений]","ДеревоЗначений = Новый ДеревоЗначений;"}
}
},
{3,
{"Константы",1,0,"",""},
{0,
{"Получить/установить константу",0,0,"Конст[анты]","Константы.<?"""", Константа>.<?""Выбор метода"", ВыборВарианта, ""Получить"", ""Получить"", ""Установить"", ""Установить"">()"}
},
{0,
{"Установить",0,0,"Конст[антыУстановить]","Константы.<?"""", Константа>.Установить(<?>);"}
},
{0,
{"Получить",0,0,"Конст[антыПолучить]","Константы.<?"""", Константа>.Получить()"}
}
},
{3,
{"Массив",1,0,"",""},
{0,
{"Массив (новый)",0,0,"Массив","Массив = Новый Массив();"}
},
{0,
{"Массив (определенной длинны)",0,0,"Массив","Массив = Новый Массив(<? ""Укажите длинну"">);"}
},
{0,
{"Массив в список значений",0,0,"Массив[ВСписокЗначений]","МассивВСписокЗначений = Новый СписокЗначений;
МассивВСписокЗначений.ЗагрузитьЗначения(<? ""Имя массива"">);"}
}
},
{5,
{"Перечисления",1,0,"",""},
{0,
{"Перечисления",0,0,"Переч[исления]","Перечисления.<? """", ЗначениеПеречисления>"}
},
{0,
{"Предопределенное значение",0,0,"Пред[определенноеЗначение]","ПредопределенноеЗначение(""Перечисление.<? """", ЗначениеПеречисления>."")"}
},
{0,
{"Перечисления (БСП)",0,0,"Переч[исления]","ОбщегоНазначения.ПредопределенныйЭлемент(""Перечисление.<? """", ЗначениеПеречисления>"")"}
},
{0,
{"Получить имя значения перечисления",0,0,"Переч[ислениеИмя]","ЗначениеПеречисления = Перечисления.<? """", ЗначениеПеречисления>;
ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;"}
},
{0,
{"Перечисление в Структуру",0,0,"Переч[ислениеВСтруктуру]","СоотвПеречисления = Новый Соответствие;
ОбъектПеречисления = Перечисления.<? ""Имя перечисления"">;
Для Сч = 0 По ОбъектПеречисления.Количество() - 1 Цикл
	ЗначПеречисл = Метаданные.Перечисления.<? ""Имя перечисления"">.ЗначенияПеречисления[Сч];
	СоотвПеречисления.Вставить(ЗначениеПеречисления.Синоним, ЗначПеречисл);
КонецЦикла;	
"}
}
},
{1,
{"Соответствие",1,0,"",""},
{0,
{"Новый Соответствие",0,0,"Соотв[етствие]","Соответствие = Новый Соответствие;"}
}
},
{2,
{"Список значений",1,0,"",""},
{0,
{"Новый СписокЗначений",0,0,"Список[Значений]","СписокЗначений = Новый СписокЗначений;"}
},
{0,
{"Удаление элементов списка",0,0,"Список[Значений]","// Обход списка с конца, так как при удалении элементы сдвигаются к началу
КоличествоСтрок = <? ""ИмяСписка"">.Количество();
Для Сч = 1 По КоличествоСтрок  Цикл
	ТекСтрока = <? ""ИмяСписка"">[КоличествоСтрок - Сч];
	// Условие удаления
	<? ""ИмяСписка"">.Удалить(ТекСтрока);
КонецЦикла;
"}
}
},
{6,
{"Строки",1,0,"",""},
{0,
{"Строка в число",0,0,"Строка[ВЧисло]","// функция преобразует строку в число, примеры:
// 315 руб. = 315
// 1 007,30 м2 (квадратный метр) = 1007,3
// -12.5% = -12,5
// ,05 = 0,05
// пустая строка или пробелы = 0
Функция СтрокаВЧисло(Знач СтрокаЧисло) Экспорт
	
	Результат = """";
	Для Индекс = 1 По СтрДлина(СтрокаЧисло) Цикл
		Символ = Сред(СтрокаЧисло, Индекс, 1);
		КодСимвола = КодСимвола(Символ);
		Если ((КодСимвола >= 48 И КодСимвола <= 57) Или (Символ = ""-"" И Индекс = 1) Или (Символ = "","") Или (Символ = ""."") Или (Символ = "" "") Или (КодСимвола = 160)) Тогда
			Если КодСимвола <> 32 И КодСимвола <> 160 Тогда
				Результат = Результат + Символ;
			КонецЕсли; 
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Результат);
	
	Возврат Результат;
	
КонецФункции"}
},
{0,
{"Проверка строки RegExp (через ФабрикаXDTO)",0,0,"Строка[RegExp]","//Итак, самое простое, что нужно, чтобы освоить шаблоны проверки:
//	. - любой символ
//	+ - один или более раз, пример "".+"" - один или более любой символ.
//	* - ноль или более раз, пример "".*"" - любое количество любых символов (даже ни одного).
//	[n-m] - символ от m до n, пример: ""[0-9]+"" - одна или более цифр(а).
//	\d - цифра, пример \d+ - одна или более цифр(а).
//	\D - не цифра.
//	\s - пробельный символ - ТАБ, пробел, перенос строки, возврат каретки и т.п.
//	\S - непробельный символ.
//	\w - буква, цифра, подчеркивание.
//	\W - не буква, не цифра и не подчеркивание соответственно.
//	^ - начало текста, например ""^\d+"" - строка начинается с цифры.
//	$ - конец текста, например ""\D+$"" - строка заканчивается НЕ цифрой.
//	{m,n} - шаблон для от m до n символов, например ""\d{2,4}"" - от двух до четырех цифр. Можно указать одну и всего цифру для строгого соответвия.
//	\ - экранирует спецсимволы. Например, ""\."" - символ точки.
// Пример: Сообщить(ПроверитьСтрокуRegExp(""01.01.2012"",""\d{2}\.\d{2}\.\d{4}""));
Функция ПроверитьСтрокуRegExp(Строка, Фасет) Экспорт 
	
    Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                ""<Model xmlns=""""http://v8.1c.ru/8.1/xdto"""" xmlns:xs=""""http://www.w3.org/2001/XMLSchema"""" xmlns:xsi=""""http://www.w3.org/2001/XMLSchema-instance"""" xsi:type=""""Model"""">
                |<package targetNamespace=""""sample-my-package"""">
                |<valueType name=""""testtypes"""" base=""""xs:string"""">
                |<pattern>"" + Фасет + ""</pattern>
                |</valueType>
                |<objectType name=""""TestObj"""">
                |<property xmlns:d4p1=""""sample-my-package"""" name=""""TestItem"""" type=""""d4p1:testtypes""""/>
                |</objectType>
                |</package>
                |</Model>"");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить(""sample-my-package"");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить(""TestObj""));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
    
КонецФункции"}
},
{0,
{"Раскодировать строку (c1251 -> oem866)",0,0,"Строка[Кодировака_w1251_to_oem866]","&НаСервере
Функция КодировкаW1251вOEM866(Знач Строка)

	СтрокаURL = КодироватьСтроку(Строка, СпособКодированияСтроки.URLВКодировкеURL, ""cp1251"");
	Строка = РаскодироватьСтроку(СтрокаURL, СпособКодированияСтроки.URLВКодировкеURL, ""cp866"");
	
	Возврат Строка;

КонецФункции // КодировкаW1251вOEM866()
"}
},
{0,
{"Раскодировать строку (oem866 -> c1251)",0,0,"Строка[Кодировака_oem866_to_w1251]","&НаСервере
Функция КодировкаOEM866вW1251(Знач Строка)

	СтрокаURL = КодироватьСтроку(Строка, СпособКодированияСтроки.URLВКодировкеURL, ""cp866"");
	Строка = РаскодироватьСтроку(СтрокаURL, СпособКодированияСтроки.URLВКодировкеURL, ""cp1251"");
	
	Возврат Строка;

КонецФункции // КодировкаW1251вOEM866()
"}
},
{0,
{"Строка в массив (СтрРазделить)",0,0,"Стр[Разделить]","СтрРазделить(<? ""Строка"">, ""<? ""Разделитель"">"")"}
},
{0,
{"Строка в массив (СтроковыеФункцииКлиентСервер)",0,0,"Строка[ВМассив]","СтрокаВМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(<? ""Строка"">, ""<? ""Разделитель"">"")"}
}
},
{2,
{"Структура",1,0,"",""},
{0,
{"Структура новая",0,0,"Струк[тура]","<? ""Имя структуры""> = Новый Структура;"}
},
{0,
{"Ключ структуры существет",0,0,"Струк[тураКлючСуществует]","<? ""Имя структуры"">.Свойство(""<? ""Имя ключа"">"")"}
}
},
{1,
{"Таблица значений",1,0,"",""},
{0,
{"ТаблицаЗначений (Новая)",0,0,"Таб[лицаЗначений]","ТаблицаЗначений = Новый ТаблицаЗначений;"}
}
},
{2,
{"Типы",1,0,"",""},
{0,
{"ОписанияТипов",0,0,"Опис[аниеТипов]","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
},
{0,
{"Условие проверки ТипЗнч и Тип",0,0,"ТипЗнч[=Тип]","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

КонецЕсли;"}
}
},
{2,
{"Функциональные опции",1,0,"",""},
{0,
{"Получить функциональную опцию",0,0,"Функ[циональная опция]","ПолучитьФункциональнуюОпцию(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
},
{0,
{"Получить функциональную опцию интерфейса",0,0,"Функ[циональная опция]","ПолучитьФункциональнуюОпциюИнтерфейса(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
}
},
{3,
{"Цвет",1,0,"",""},
{0,
{"WebЦвета",0,0,"Web[Цвета]","WebЦвета<?>"}
},
{0,
{"Новый Цвет",0,0,"Цвет","Цвет = Новый Цвет(0, 0, 0);"}
},
{0,
{"Цвет стиля",0,0,"Цвет","ЦветСтиля = ЦветаСтиля."}
}
},
{2,
{"Число",1,0,"",""},
{0,
{"Модуль числа",0,0,"Число[Модуль]","ЧислоМодуль = Макс(Число, -Число);"}
},
{0,
{"Число прописью",0,0,"Число[Прописью]","ЧислоПрописью(<?>,,""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"")"}
}
},
{2,
{"Шрифты",1,0,"",""},
{0,
{"Шрифт (Новый)",0,0,"Шрифт","Шрифт = Новый Шрифт();"}
},
{0,
{"Шрифт (Настройка)",0,0,"Шрифт","Шрифт = Новый Шрифт( , , , , , ); // Имя шрифта, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый"}
}
}
},
{5,
{"Объекты конфигурации",1,0,"",""},
{1,
{"Справочники",1,0,"",""},
{0,
{"Удалить все элементы справочника",0,0,"Справоч[никУдалитьВсеЭлементы]","Выборка = Справочники.<?"""", Справочник>.ВыбратьИерархически();
Пока Выборка.Следующий() Цикл
   Выборка.Удалить();
КонецЦикла;"}
}
},
{4,
{"Регистры",1,0,"",""},
{3,
{"РегистрСведений",1,0,"",""},
{0,
{"Добавить запись в регистр сведений",0,0,"Запись","Запись = РегистрыСведений.<? ""Регистр сведений"", РегистрСведений>.СоздатьМенеджерЗаписи();
Запись.Период = ТекущаяДата();
//
Запись.Записать();"}
},
{0,
{"Набор записей (РегистрСведений)",0,0,"НаборЗаписей","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборЗаписей();
"}
},
{0,
{"РегистрСведений",0,0,"Рег[истрСведений]","РегистрСведений.<?"""", ОбъектМетаданных, ""РегистрСведений""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""СрезПервых"", "".СрезПервых(<?>)"", ""СрезПоследних"", "".СрезПоследних(<?>)"">"}
}
},
{4,
{"РегистрНакопления",1,0,"",""},
{0,
{"РегистрНакопления",0,0,"Рег[истрНакопления]","РегистрНакопления.<?"""", ОбъектМетаданных, ""РегистрНакопления""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"">"}
},
{0,
{"Набор записей (РегистрНакопления)",0,0,"НаборЗаписей","НаборЗаписей = РегистрыНакопления.<?"""", РегистрНакопления>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Отключение перерасчета по РегиструНакопления",0,0,"Регистр[НакопленияОтклРасчета]","// Отключение перерасчета по РегиструНакопления
<?""Выберите регистр накопления"", РегистрНакопления>.УстановитьИспользованиеИтогов(Ложь);
// ...
<?""Выберите регистр накопления"", РегистрНакопления>.УстановитьИспользованиеИтогов(Истина);"}
},
{0,
{"Вид движения (РегистрыНакопления)",0,0,"ВидД[вижения]","ВидДвижения = <? """", ВыборВарианта, ""Приход"",""ВидДвиженияНакопления.Приход"", ""Расход"",""ВидДвиженияНакопления.Расход"">;"}
}
},
{3,
{"РегистрБухгалтерии",1,0,"",""},
{0,
{"РегистрБухгалтерии",0,0,"Рег[истрБухгалтерии]","РегистрБухгалтерии.<?"""", ОбъектМетаданных, ""РегистрБухгалтерии""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Субконто"", "".Субконто"", ""ДвиженияССубконто"", "".ДвиженияССубконто(<?>)"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"", ""ОборотыДтКт"", "".ОборотыДтКт(<?>)"">"}
},
{0,
{"Набор записей (РегистрБухгалтерии)",0,0,"НаборЗаписей","НаборЗаписей = РегистрыБухгалтерии.<?"""", РегистрБухгалтерии>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Вид движения (РегистрыБухгалтерии)",0,0,"ВидД[вижения]","ВидДвижения = <? """", ВыборВарианта, ""Дебет"",""ВидДвиженияБухгалтерии.Дебет"", ""Кредит"",""ВидДвиженияБухгалтерии.Кредит"">;
"}
}
},
{3,
{"РегистрРасчета",1,0,"",""},
{0,
{"РегистрРасчета",0,0,"Рег[истрРасчета]","РегистрРасчета.<?"""", ОбъектМетаданных, ""РегистрРасчета"", ""РегистрРасчета.Перерасчет"">"}
},
{0,
{"Набор записей (РегистрРасчета)",0,0,"НаборЗаписей","НаборЗаписей = РегистрыРасчета.<?"""", РегистрРасчета>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Запись РегистраРасчетов",0,0,"Запись","Запись = Движения.<?"""", РегистрРасчета>.Добавить();
Запись.ПериодРегистрации = Дата;
Запись.ПериодДействияНачало = ;
Запись.ПериодДействияКонец = ;
Запись.Сторно = Ложь;
Запись.Сотрудник = ;
Запись.Подразделение = ;
Запись.График = ;
Запись.Параметр = ;
Запись.БазовыйПериодНачало = ;
Запись.БазовыйПериодКонец = ;"}
}
}
},
{4,
{"Блокировки регистров",1,0,"",""},
{0,
{"Блокировка РегистрНакопления",0,0,"Блокировка","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.<?"""", РегистрНакопления>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрБухгалтерии",0,0,"Блокировка","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрБухгалтерии.<?"""", РегистрБухгалтерии>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.УстановитьЗначение(""Период"", Новый Диапазон( , ));
//ЭлементБлокировки.УстановитьЗначение(""Счет"", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрСведений",0,0,"Блокировка","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрСведений.<?"""", РегистрСведений>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрРасчета",0,0,"Блокировка","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрРасчета.<?"""", РегистрРасчета>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
}
},
{2,
{"Документы",1,0,"",""},
{0,
{"Документ объект",0,0,"Документ","Документ.<? """", ОбъектМетаданных, ""Документ"", ""Документ.ТабличнаяЧасть"">"}
},
{0,
{"Ввод на основании программно",0,0,"Документ[ВводНаОсновании]","НовыйДокумент = Документы.<? ""Выберите документ"", Документ>.СоздатьДокумент();
НовыйДокумент.Заполнить(<? ""Имя переменной параметров заполнения"">);
ФормаДок = НовыйДокумент.ПолучитьФорму();
ФормаДок.ПараметрОснование = <? ""Имя переменной параметров заполнения"">;
ФормаДок.Открыть();"}
}
},
{6,
{"Счета",1,0,"",""},
{0,
{"Выбор счета Дт",0,0,"Счет[Дт]","СчетДт = <? """", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"Выбор счета Кт",0,0,"Счет[Кт]","СчетКт = <? """", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"Движение",0,0,"Движение","Движение = Движения<?>
Движение.Период = Дата;"}
},
{0,
{"Субконто[Дт]",0,0,"СубконтоДт","СубконтоДт[<? """", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
},
{0,
{"Субконто[Кт]",0,0,"СубконтоКт","СубконтоКт[<? """", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
},
{0,
{"Граница",0,0,"Граница","Граница = Новый Граница(<?>, <? """", ВыборВарианта, ""ВидГраницы.Включая"",""ВидГраницы.Включая"", ""ВидГраницы.Исключая"",""ВидГраницы.Исключая"">);"}
}
}
},
{2,
{"Клиент",1,0,"",""},
{6,
{"Форма",1,0,"",""},
{4,
{"ТабличнаяЧасть",1,0,"",""},
{0,
{"Текушая cтрока",0,0,"Тек[ущаяСтрока]","ТекущаяСтрока = Элементы.<?>.ТекущаяСтрока;"}
},
{0,
{"Текущие данные",0,0,"Тек[ущиеДанные]","ТекущиеДанные = Элементы.<?>.ТекущиеДанные;"}
},
{0,
{"Выделенные строки (в массив)",0,0,"Выд[еленныеСтроки]","ВыделенныеСтроки = Элементы.<?>.ВыделенныеСтроки;
Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
	//ТекСтрока. = ;
КонецЦикла;"}
},
{0,
{"Выледенные строки (Построитель)",0,0,"Выд[еленныеСтроки]","Построитель = Новый ПостроительОтчета;
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ДокументСписок);
Выборка = Построитель.Результат.Выбрать();
Пока Выборка.Следующий() Цикл
	
КонецЦикла;
"}
}
},
{8,
{"Создание элементов формы (программно)",1,0,"",""},
{0,
{"Создание ПоляФормы",0,0,"Поле[ФормыНовое]","ПолеФормыНовое = ЭтаФорма.Элементы.Добавить(""<? ""Имя ПолеФормы"">"", Тип(""ПолеФормы""), ЭтаФорма);
ПолеФормыНовое.Вид = ВидПоляФормы.ПолеВвода;
ПолеФормыНовое.ПутьКДанным = ""<? ""Путь к данным"">"";"}
},
{0,
{"Создание ГруппаФормы",0,0,"Группа[Формы]","<? ""Имя группы""> = Элементы.Добавить(""<? ""Имя группы"">"", Тип(""ГруппаФормы""), ЭтаФорма);
<? ""Имя группы"">.Вид = ВидГруппыФормы.ОбычнаяГруппа;
<? ""Имя группы"">.Отображение = ОтображениеОбычнойГруппы.<? ""Отображение группы"", ВыборВарианта, ""Нет"",""Нет"", ""ОбычноеВыделение"",""ОбычноеВыделение"", ""СильноеВыделение"",""СильноеВыделение"", ""СлабоеВыделение"",""СлабоеВыделение"">;
<? ""Имя группы"">.ОтображатьЗаголовок = <? ""Отображать заголовок"", ВыборВарианта, ""Да"",""Истина"", ""Нет"",""Ложь"">; 
<? ""Имя группы"">.Группировка = ГруппировкаПодчиненныхЭлементовФормы.<? ""Тип группировки"", ВыборВарианта, ""Вертикальная"",""Вертикальная"", ""ГоризонтальнаяВсегда"",""ГоризонтальнаяВсегда"", ""ГоризонтальнаяЕслиВозможно"",""ГоризонтальнаяЕслиВозможно"">;
<? ""Имя группы"">.РастягиватьПоГоризонтали = <? ""Растягивать по горизонтали"", ВыборВарианта, ""Да"",""Истина"", ""Нет"",""Ложь"">"}
},
{0,
{"Создание ГруппаСтраницы",0,0,"Группа[Формы]","<? ""Имя группы страниц""> = Элементы.Добавить(""<? ""Имя группы страниц"">"", Тип(""ГруппаФормы""), ЭтаФорма);
<? ""Имя группы страниц"">.Вид = ВидГруппыФормы.Страницы;
<? ""Имя группы страниц"">.ОтображениеСтраниц = ОтображениеСтраницФормы.<? ""Расположение закладок"", ""Авто"",""Авто"", ""ЗакладкиСверху"",""ЗакладкиСверху"", ""ЗакладкиСлеваГоризонтально"",""ЗакладкиСлеваГоризонтально"", ""ЗакладкиСнизу"",""ЗакладкиСнизу"", ""ЗакладкиСправаГоризонтально"",""ЗакладкиСправаГоризонтально"", ""Нет"",""Нет"", ""Пролистывание"",""Пролистывание"">;
<? ""Имя группы страниц"">.РастягиватьПоГоризонтали = <? ""Растягивать по горизонтали"", ВыборВарианта, ""Да"",""Истина"", ""Нет"",""Ложь"">"}
},
{0,
{"Создание ГруппаСтраницы - Страница",0,0,"Группа[Формы]","<? ""Имя страницы""> = Элементы.Добавить(<? ""Имя страницы"">, Тип(""ГруппаФормы""), ГруппаСтраниц);
<? ""Имя страницы"">.Вид = ВидГруппыФормы.Страница;
<? ""Имя страницы"">.Заголовок = ""<? ""Наименование страницы"">"";"}
},
{0,
{"Создание ДекорацияНадпись",0,0,"Декор[ация]","<? ""Имя декорации""> = ЭтаФорма.Элементы.Добавить(""<? ""Имя декорации"">"", Тип(""ДекорацияФормы""),СтраницаТовары);
<? ""Имя декорации"">.Вид = ВидДекорацииФормы.Надпись;
<? ""Имя декорации"">.Заголовок = ""<? ""Текст надписи"">"";"}
},
{0,
{"Создание ДекорацияКартинка",0,0,"Декор[ация]","<? ""Имя элемента""> = ЭтаФорма.Элементы.Добавить(""<? ""Имя элемента"">"", Тип(""ДекорацияФормы""), ЭтаФорма);
<? ""Имя элемента"">.Вид = ВидДекорацииФормы.Картинка;
<? ""Имя элемента"">.Картинка = БиблиотекаКартинок.<? БиблиотекаКартинок>;
<? ""Имя элемента"">.РазмерКартинки = РазмерКартинки.<? ""Размер картинки"", ВыборВарианта, ""АвтоРазмер"",""АвтоРазмер"", ""АвтоРазмерБезУчетаМасштаба"",""АвтоРазмерБезУчетаМасштаба"", ""ПоРазмеруШрифта"",""ПоРазмеруШрифта"", ""Пропорционально"",""Пропорционально"", ""Растянуть"",""Растянуть"", ""РеальныйРазмер"",""РеальныйРазмер"", ""РеальныйРазмерБезУчетаМасштаба"",""РеальныйРазмерБезУчетаМасштаба"", ""РеальныйРазмерБезУчетаМасштаба"",""РеальныйРазмерБезУчетаМасштаба"", ""Черепица"",""Черепица"">;
//<? ""Имя элемента"">.Ширина = 20;
//<? ""Имя элемента"">.Высота = 8;"}
},
{0,
{"Создание РеквизитаФормы",0,0,"Реквизит[Формы]","<? ""Имя реквизита""> = Новый РеквизитФормы(<? ""Имя реквизита"">, <?""Конструктор описания типов"", КонструкторОписанияТипов>); 
ДобавляемыеРеквизиты.Добавить(<? ""Имя реквизита"">);	
ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);"}
},
{0,
{"Создание КомандыФормы",0,0,"Команда[Формы]","КомандаФормы = ЭтаФорма.Команды.Добавить(""<? ""Имя команды"">"");
КомандаФормы.Заголовок = ""<? ""Имя команды"">"";
КомандаФормы.Действие = ""<? ""Имя команды"">""; //указываем только имя процедуры"}
}
},
{0,
{"Обновить произвольную форму",0,0,"Опов[еститьОбИзменении]","ОповеститьОбИзменении(Тип(""<?""Выберите тип"", ВыборТипа>""));"}
},
{0,
{"Открыть форму (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"", ПараметрыФормы);"}
},
{0,
{"Получить форму (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");
"}
},
{0,
{"Обработка оповещения",0,0,"Обработка[Оповещения]","&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = ""<? ""Имя события"">"" Тогда
		// действие
	КонецЕсли;
	
КонецПроцедуры"}
}
},
{1,
{"ФормаВыбора",1,0,"",""},
{0,
{"ФормаВыбора с отбором",0,0,"Открыть[ФормуВыбора]","СтандартнаяОбработка = Ложь;
МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(<Значение>);
Отбор = Новый Структура;
Отбор.Вставить(""Отбор"", Новый Структура(""<Имя реквизита>"", МассивОтбора));
Отбор.Вставить(""МножественныйВыбор"", Ложь);
ЗакрытиеВыбора = Новый ОписаниеОповещения(""ПриЗакрытииФормыВыбора"", ЭтотОбъект, ""Подбор"");
ОткрытьФорму(""<ОбъектКонфигурации>.ФормаВыбора"", Отбор, ЭтаФорма, , , , ЗакрытиеВыбора);

//// Добавить ОписаниеОповещения в код
//&НаКлиенте
//Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт 
//	
//	Если Значение = Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	Объект.<Реквизит> = Значение;
//	
//КонецПроцедуры
"}
}
}
},
{10,
{"Код для разработки",1,0,"",""},
{6,
{"Базы данных SQL",1,0,"",""},
{0,
{"Подключение к SQL-серверу",0,0,"SQL","//Инициализация переменных
ИмяСервераSQL = ""WIN2012\TEST_SQL"";
ПользовательSQL = ""UserDB"";
ПарольSQL = ""Pass123456"";
БазаДанныхSQL = ""TestDB"";
ТаблицаSQL = ""Table_1"";
/////////////////////////////////////////
//Подключение к SQL-серверу
Попытка
Соединение  = Новый COMОбъект(""ADODB.Connection"");
	Команда     = Новый COMОбъект(""ADODB.Command"");
	Выборка     = Новый COMОбъект(""ADODB.RecordSet"");
	Соединение.ConnectionString =
		""driver={SQL Server};"" +
		""server=""+ИмяСервераSQL+"";""+
		""uid=""+ПользовательSQL+"";""+
		""pwd=""+ПарольSQL+"";""+
		""database=""+БазаДанныхSQL+"";"";
	Соединение.ConnectionTimeout = 30;
	Соединение.CommandTimeout = 600;
	//Открытие соединение
	Соединение.Open();
	Команда.ActiveConnection   = Соединение;
	Сообщить(""Успешное подключение!"");
Исключение
	Сообщить(ОписаниеОшибки());
	Возврат;
КонецПопытки;"}
},
{0,
{"Закрытие соединения",0,0,"SQL","//Закрытия соединения
Попытка
	Соединение.Close();
	Сообщить(""Соединение закрыто!"");
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
},
{0,
{"Добавление записей в таблицу",0,0,"SQL","//Добавляем запись в таблицу
ТекДата = ТекущаяДата();
ТекСтрока = ""Запись строки"";
ТекЧисло = 123456;

//Приобразуем данные
Если НЕ ЗначениеЗаполнено(ТекДата) Тогда
	ТекДата = Дата(1753,1,1); //Для пустой даты необходимо отправлять 01.01.1753
КонецЕсли;
ТекЧисло = Формат(ТекЧисло,""ЧГ=""); //Удаляем пробелы

ТекстТекущейИнструкции =
	""INSERT INTO ""+ТаблицаSQL+""
	|([C_DateTime], [C_Char], [C_Numeric])
	|VALUES ('""+ТекДата+""', N'""+ТекСтрока+""', '""+ТекЧисло+""')"";
Попытка
	Соединение.Execute(ТекстТекущейИнструкции,,128);
	Сообщить(""Запись добавлена!"");
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
},
{0,
{"Обновление записей в таблице",0,0,"SQL","//Обновляем записи в таблице с C_Numeric = 123456
ТекЧисло = 123456;
ТекДатаНовая = Дата(1,1,1);
ТекСтрокаНовая = ""Обновленная запись строки"";

//Приобразуем данные
Если НЕ ЗначениеЗаполнено(ТекДатаНовая) Тогда
	ТекДатаНовая = Дата(1753,1,1); //Для пустой даты необходимо отправлять 01.01.1753
КонецЕсли;
ТекЧисло = Формат(ТекЧисло,""ЧГ=""); //Удаляем пробелы

ТекстТекущейИнструкции =
	""UPDATE ""+ТаблицаSQL+""
	|SET
	|   [C_Char] = N'""+ТекСтрокаНовая+""',
	|   [C_DateTime] = '""+ТекДатаНовая+""'
	|WHERE [C_Numeric]='""+ТекЧисло+""'"";
Попытка
	Соединение.Execute(ТекстТекущейИнструкции,,128);
	Сообщить(""Запись обновлена!"");
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
},
{0,
{"Просмотр выборки из таблицы",0,0,"SQL","//Читаем записи
ТекстИнструкции =
	""SELECT
	|   [C_DateTime], [C_Char], [C_Numeric]
	|FROM ""+ТаблицаSQL;
Попытка
	Команда.CommandText = ТекстИнструкции;
	Выборка = Команда.Execute();
	Если Выборка.BOF = Ложь Тогда
		Выборка.MoveFirst();
		Пока Выборка.EOF = Ложь Цикл
			Сообщить(""[C_DateTime]=""+Дата(Выборка.Fields(""C_DateTime"").Value)
			+"", [C_Char]=""+СокрЛП(Выборка.Fields(""C_Char"").Value)
			+"", [C_Numeric]=""+Число(Выборка.Fields(""C_Numeric"").Value));
			Выборка.MoveNext();
		КонецЦикла;
	КонецЕсли;
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
},
{0,
{"Удаление записей из таблицы",0,0,"SQL","//Удаляем записи в таблице с C_Numeric = 123456
ТекЧисло = 123456;
ТекЧисло = Формат(ТекЧисло,""ЧГ=""); //Удаляем пробелы

ТекстТекущейИнструкции =
	""DELETE FROM ""+ТаблицаSQL+""
	|WHERE [C_Numeric]='""+ТекЧисло+""'"";
Попытка
	Соединение.Execute(ТекстТекущейИнструкции,,128);
	Сообщить(""Запись удалена!"");
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
}
},
{8,
{"Диалоги",1,0,"",""},
{0,
{"Диалог выбор файла (Обычный)",0,0,"Диалог[ВыбораФайла]","Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
Диалог.Заголовок = ""Выберите файл"";
Диалог.ПолноеИмяФайла = """"; 
Фильтр = ""Все файлы (*.*)|*.*""; 
Диалог.Фильтр = Фильтр; 
Диалог.МножественныйВыбор = Ложь;
Диалог.Каталог = """";
Если Диалог.Выбрать() Тогда
	// Элемент.значение = Диалог.ПолноеИмяФайла;
КонецЕсли;"}
},
{0,
{"Диалог выбор файла (ОписаниеОповещения)",0,0,"Диалог[ВыбораФайла]","Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
Диалог.Заголовок = ""Выберите файл"";
Диалог.ПолноеИмяФайла = """"; 
Фильтр = ""Все файлы (*.*)|*.*""; 
Диалог.Фильтр = Фильтр; 
Диалог.МножественныйВыбор = Ложь;
Диалог.Каталог = """";
Структура = Новый Структура(""Диалог"", Диалог);
ОписаниеОповещения = Новый ОписаниеОповещения(""ВыборФайлаОповещение"", ЭтотОбъект, Структура);
Диалог.Показать(ОписаниеОповещения); 

// Добавить процедуру
//&НаКлиенте
//Процедура ВыборФайлаОповещение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
//	Если ВыбранныеФайлы = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	Диалог = ДополнительныеПараметры.Диалог;
//КонецПроцедуры
"}
},
{0,
{"Диалог выбора цвета",0,0,"Диалог[ВыбораЦвета]","ДиалогВыбораЦвета = Новый ДиалогВыбораЦвета;
ОписаниеОповещения = Новый ОписаниеОповещения(""ВыборЦветаОповещение"", ЭтотОбъект);
ДиалогВыбораЦвета.Показать(ОписаниеОповещения);

//&НаКлиенте
//Процедура ВыборЦветаОповещение(Цвет, ДополнительныеПараметры) Экспорт 
//	Если Цвет = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	// Цвет
//КонецПроцедуры"}
},
{0,
{"Диалог выбора шрифта",0,0,"Диалог[ВыбораШрифта]","ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
ОписаниеОповещения = Новый ОписаниеОповещения(""ВыборШрифтаОповещение"", ЭтотОбъект);
ДиалогВыбораШрифта.Показать(ОписаниеОповещения);

//&НаКлиенте
//Процедура ВыборШрифтаОповещение(Шрифт, ДополнительныеПараметры) Экспорт 
//	Если Шрифт = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	// Шрифт
//КонецПроцедуры"}
},
{0,
{"Диалог выбора периода",0,0,"Диалог[ВыбораПериода]","ДиалогВыбораПериода = Новый ДиалогРедактированияСтандартногоПериода;
ДиалогВыбораПериода.Период = ПеременнаяТипаСтандартныйПериод;
ОписаниеОповещения = Новый ОписаниеОповещения(""ВыборПериодаОповещение"", ЭтотОбъект);
ДиалогВыбораПериода.Показать(ОписаниеОповещения);

//&НаКлиенте
//Процедура ВыборПериодаОповещение(Период, ДополнительныеПараметры) Экспорт 
//	Если Период = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	// Период
//КонецПроцедуры	
"}
},
{0,
{"Ввод числа (Обычный)",0,0,"Ввод[Числа]","ВведенноеЧисло = 0;
РезультатВвода = ВвестиЧисло(ВведенноеЧисло, ""<? ""Текст запроса числа"">"");
Если РезультатВвода Тогда
	// ВведенноеЧисло
КонецЕсли;"}
},
{0,
{"Ввод числа (ОписаниеОповещения)",0,0,"Ввод[Числа]","ВведенноеЧисло = 0;
СтруктураЧисла = Новый Структура(""ВведенноеЧисло"", ВведенноеЧисло);
ОписаниеОповещения = Новый ОписаниеОповещения(""ВводЧислаОповещение"", ЭтотОбъект, СтруктураЧисла);
ПоказатьВводЧисла(ОписаниеОповещения, ВведенноеЧисло, ""<? ""Текст запроса числа"">"");

//Процедура ВводЧислаОповещение(Число, ДополнительныеПараметры) Экспорт
//	
//	ВведенноеЧисло = ?(Число = Неопределено, ДополнительныеПараметры.ВведенноеЧисло, Число);
//	
//КонецПроцедуры
"}
},
{0,
{"Ввод строки (Обычный)",0,0,"Ввод[Строки]","ВведеннаяСтрока = """";
РезультатВвода = ВвестиСтроку(ВведеннаяСтрока, ""<? ""Текст запроса строки"">"");
Если РезультатВвода Тогда
	// ВведеннаяСтрока
КонецЕсли;
"}
}
},
{5,
{"Работа с файлами",1,0,"",""},
{0,
{"Сведения о файле",0,0,"Файл","ПолноеИмяФайла = ""<? ""Полное имя файла"">"";
Файл = Новый Файл(ПолноеИмяФайла);
//Файл.ПолноеИмя
//Файл.Имя
//Файл.ИмяБезРасширения
//Файл.Расширение
//Файл.Путь
//Файл.Размер()
//Файл.ЭтоФайл()
//Файл.ПолучитьВремяИзменения()
//Файл.ПолучитьТолькоЧтение()
//Файл.ПолучитьНевидимость()"}
},
{0,
{"Каталог формата (Путь\Год\Месяц\День\)",0,0,"Каталог[ТекущаяДата]","КаталогТекущаяДата = СтрШаблон(""%1\%2\"", ""C:\Temp"", Формат(ТекущаяДата(), ""ДФ=yyyy\MMMM\dd""));"}
},
{5,
{"Чтение / запись",1,0,"",""},
{3,
{"Excel",1,0,"",""},
{0,
{"Чтение ФайлExcel (Построитель)",0,0,"Файл[EXCEL]","ФайлEXCEL = """";
ТабДокEXCEL = Новый ТабличныйДокумент;
ТабДокEXCEL.Прочитать(ФайлEXCEL);
ОбластиEXCEL = ТабДокEXCEL.Область(1, 1, ТабДокEXCEL.ВысотаТаблицы, ТабДокEXCEL.ШиринаТаблицы);
Построитель = Новый ПостроительЗапроса;
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластиEXCEL);  
Построитель.Выполнить();
	
ТабДанные = Построитель.Результат.Выгрузить();	
//Для Каждого Стр Из ТабДанные Цикл 
	//	Сообщить(стр); // Обрабатываем	
//КонецЦикла;	
"}
},
{0,
{"Чтение ФайлExcel (COM-Соединение)",0,0,"Файл[EXCEL]","ФайлEXCEL = ""<? ""Полное имя файла"">"";
Попытка
	Эксель = Новый COMОбъект(""Excel.Application"");
	Эксель.DisplayAlerts = 0;
	Эксель.Visible = 0;
Исключение
   	Сообщить(ОписаниеОшибки()); 
   	Возврат;
КонецПопытки;
			
ЭксельКнига = Эксель.Workbooks.Open(ФайлEXCEL);	
КоличествоСтраниц = ЭксельКнига.Sheets.Count;

// Перебираем все листы
Для НомерЛиста = 1 По КоличествоСтраниц Цикл 
	Лист = ЭксельКнига.Sheets(НомерЛиста);
	КоличествоСтрок = Лист.Cells(1, 1).SpecialCells(11).Row;
	КоличествоКолонок = Лист.Cells(1, 1).SpecialCells(11).Column;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл 
		//Для НомерКолонки = 1 По КоличествоКолонок Цикл
		//	ЗначениеВЯчейке = Лист.Cells(НомерСтроки, НомерКолонки).Value;
		//КонецЦикла;
	КонецЦикла;	
КонецЦикла;
	
Эксель.Workbooks.Close();
Эксель.Application.Quit();"}
},
{0,
{"Чтение ФайлExcel (Асинх)",0,0,"Файл[EXCEL]","&НаКлиенте
АСИНХ Процедура ПоместитьФайлКоманда(Команда)
    ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
    ПараметрыДиалога.Заголовок = ""НачатьПомещениеФайлаНаСервер"";
    ПараметрыДиалога.МножественныйВыбор = Истина;
    ПараметрыДиалога.Фильтр = НСтр(""en = 'Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'; ru = 'Файл таблицы Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'"");
	ПрогрессОбратныйВызов = Новый ОписаниеОповещения(""ПрогрессОбратныйВызов"", ЭтотОбъект);
    ПередНачалоОбратныйВызов = Новый ОписаниеОповещения(""ПередНачалоОбратныйВызов"", ЭтотОбъект);
	ОписаниеПомещенногоФайла = ЖДАТЬ ПоместитьФайлНаСерверАсинх(ПрогрессОбратныйВызов, ПередНачалоОбратныйВызов, , ПараметрыДиалога);
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Сообщить(""Помещение файла "" + ?(ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено, ""отменено"", ""выполнено успешно""));
    Сообщить(""Адрес во временном хранилище: "" + ОписаниеПомещенногоФайла.Адрес);
    Сообщить(""Имя файла: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
    Сообщить(""Размер файла, байт: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Размер());

	ОбработатьЗагруженныйФайл(ОписаниеПомещенногоФайла.Адрес);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьЗагруженныйФайл(Адрес)
	
	ФайлНаДиске = ПолучитьИмяВременногоФайла(""xlsx""); 
	ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес); 
    ДанныеФайла.Записать(ФайлНаДиске) ; 
		
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ФайлНаДиске, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных (ТабДок.Область(""Лист1"")); //Здесть Лист1 - название листа экселя.
	ПостроительЗапроса.Выполнить();
	//В файле первой строчкой должны идти названия колонок. Если этого не будет, то построитель не вернет ТЗ, т.к. не будут заданы имена колонок.
	//Также нужно смотреть на типы ячеек файла. Типизация нормально отрабатывает, если заданы соответствующие типы. Иначе ""10.08.2017"" в экселе - это строка, а не дата.
	СтрокиТЗ = ПостроительЗапроса.Результат.Выгрузить(); //Выполняем запрос к источнику данных, автоматически выбирая все поля и получаем таблицу значений

	Для каждого СтрокаТЗ Из СтрокиТЗ Цикл
		//Полученные данные
	КонецЦикла; 
КонецПроцедуры 

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    Состояние(""Файл "" + ПомещаемыйФайл.Имя, Помещено, ""Файл имеет размер "" + ПомещаемыйФайл.Размер() + "" байт"", БиблиотекаКартинок.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачалоОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    Сообщить(""Помещаемый файл - "" + ПомещаемыйФайл.Имя + "", размер = "" + ПомещаемыйФайл.Размер());
КонецПроцедуры"}
}
},
{1,
{"JSON",1,0,"",""},
{0,
{"Чтение ФайлJSON",0,0,"Файл[JSON]","Чтение = Новый ЧтениеJSON;
Чтение.ОткрытьФайл(ИмяФайла);

Запись = Новый ЗаписьJSON;
Запись.УстановитьСтроку();
Запись.ЗаписатьНачалоОбъекта();

Пока Чтение.Прочитать() Цикл
	Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
		Если Чтение.ТекущееЗначение = ""Поставщик"" Тогда
			Чтение.Прочитать();
			Запись.ЗаписатьИмяСвойства(""Поставщик"");
			Запись.ЗаписатьЗначение(Строка(Чтение.ТекущееЗначение));
		Иначе
			Запись.ЗаписатьИмяСвойства(Чтение.ТекущееЗначение);
		КонецЕсли;
	КонецЕсли;
	Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Число Или
		Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
		Запись.ЗаписатьЗначение(Чтение.ТекущееЗначение);
	КонецЕсли;
КонецЦикла"}
}
},
{3,
{"TXT",1,0,"",""},
{0,
{"Чтение ФайлTXT - построчно",0,0,"Файл[TXT]","ПутьКФайлу = ""<? ""Полный путь к файлу"">"";
ФайлТекст = Новый ЧтениеТекста(ПутьКФайлу);
СтрокаФайла = ФайлТекст.ПрочитатьСтроку();
Пока СтрокаФайла <> Неопределено Цикл
	// Обработка строки
	СтрокаФайла = ФайлТекст.ПрочитатьСтроку();
КонецЦикла;

ФайлТекст.Закрыть();"}
},
{0,
{"Чтение ФайлTXT - целиком",0,0,"Файл[TXT]","Файл = Новый ЧтениеТекста(<? ""Полный путь к файлу"">);
ВесьФайлОднойСтрокой = Файл.Прочитать();
Файл.Закрыть();
"}
},
{0,
{"Запись ФайлTXT",0,0,"Файл[TXT]","ПутьКФайлу = ""<? ""Полный путь к файлу"">"";

Строка = """";
ФайлТекст = Новый ТекстовыйДокумент;
ФайлТекст.ДобавитьСтроку(Строка);
ФайлТекст.Записать(ПутьКФайлу, КодировкаТекста.UTF8);"}
}
},
{3,
{"HTML",1,0,"",""},
{0,
{"Чтение ФайлHTML (текстом)",0,0,"Файл[HTML]","ФайлHTML = Новый ЧтениеТекста(<? ""Полный путь к файлу"">);
ВесьФайлОднойСтрокой = ФайлHTML.Прочитать();
ФайлHTML.Закрыть();
ФорматированныйДокумент = Новый ФорматированныйДокумент;
ФорматированныйДокумент.УстановитьHTML(ВесьФайлОднойСтрокой, Новый Структура);
ОбычныйТекст = ФорматированныйДокумент.ПолучитьТекст()"}
},
{0,
{"[Функция] - Получить текст из HTML-строки (убирает теги)",0,0,"Текст[HTML]","ТекстHTML = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(<? ""Переменная"">)"}
},
{0,
{"<table> в ТаблицуЗначений",0,0,"Файл[HTML]","Функция ПолучитьТаблицыЗначенийИзHTML(рИсходныйДокумент)
    
    мТаблицИтого = Новый Массив;
    рКодировка = ""UTF-8"";
    чтен = Новый ЧтениеHTML;
    Если ТипЗнч(рИсходныйДокумент)=Тип(""Строка"") Тогда
        // считаем, что передали строку HTML-кода (фрагмент)
        чтен.УстановитьСтроку(рИсходныйДокумент,рКодировка);
    ИначеЕсли ТипЗнч(рИсходныйДокумент)=Тип(""Файл"") Тогда
        // считаем, что передали файл, проверенно существующий и читающийся оттуда, где он есть
        чтен.ОткрытьФайл(рИсходныйДокумент.ПолноеИмя,рКодировка);
    Иначе
        Сообщить(""Передан неверный аргумент: ""+СокрЛП(рИсходныйДокумент)+"", недопустимый тип!"",СтатусСообщения.Важное);
        Возврат мТаблицИтого;
    КонецЕсли;
    
    пострДОМ=Новый ПостроительDOM;
    гдок=пострДОМ.Прочитать(чтен);
    ТаблицыДокумента = гдок.ПолучитьЭлементыПоИмени(""table"");
    Для каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
        ВремТаблица = Новый ТаблицаЗначений;
        ПерваяСтрока         = ТаблицаДокумента.ПервыйДочерний;
        КолонкиПервойСтроки = ПерваяСтрока.ПолучитьЭлементыПоИмени(""td"");
        КоличествоКолонок = КолонкиПервойСтроки.Количество();
        Для НомКолонки = 1 по КоличествоКолонок Цикл
            ИмяКолонки = СтрШаблон(""К%1"",Формат(НомКолонки,""ЧГ=0""));
            ВремТаблица.Колонки.Добавить(ИмяКолонки);
        КонецЦикла;
        
        СтрокиТаблицы = ТаблицаДокумента.ПолучитьЭлементыПоИмени(""tr"");
        Для каждого СтрокаТаблицы из СтрокиТаблицы Цикл                  
            НоваяСтрока = ВремТаблица.добавить();
            КолонкиСтроки = СтрокаТаблицы.ПолучитьЭлементыПоИмени(""td"");
            КоличествоКолонокВСтроке =     КолонкиСтроки.Количество(); 
            
            МинимальноеКоличествоКолонокВСтроке = Мин(КоличествоКолонокВСтроке,КоличествоКолонок);
            Для НомКолонки = 0 по  МинимальноеКоличествоКолонокВСтроке - 1 Цикл
                ИмяКолонки = СтрШаблон(""К%1"",Формат(НомКолонки+1,""ЧГ=0""));
                
                Ячейка = КолонкиСтроки[НомКолонки];
                ТекстЯчейки = Ячейка.ТекстовоеСодержимое;
                НоваяСтрока[ИмяКолонки] = ТекстЯчейки;
            КонецЦикла;  
        КонецЦикла;
        мТаблицИтого.добавить(ВремТаблица);            
    КонецЦикла;
    
    Возврат мТаблицИтого;
    
КонецФункции"}
}
},
{2,
{"XML",1,0,"",""},
{0,
{"Чтение ФайлXML",0,0,"Файл[XML]","ФайлXML = Новый ЧтениеXML;
ФайлXML.ОткрытьФайл(""c:\temp\document.xml"");

// Прочитать фрагменты элемента.
Пока ФайлXML.Прочитать() Цикл
	Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		// ФайлXML.Имя;
		Пока ФайлXML.ПрочитатьАтрибут() Цикл
			// атрибут - ФайлXML.Имя 
			// значение - ФайлXML.Значение;
		КонецЦикла;   
	КонецЕсли;    
	Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
		// ФайлXML.Значение;
	КонецЕсли;    
	Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		//
	КонецЕсли;    
КонецЦикла;   
ФайлXML.Закрыть();"}
},
{0,
{"Запись ФайлXML",0,0,"Файл[XML]","ФайлXML = Новый ЗаписьXML;
ФайлXML.ОткрытьФайл(""c:\temp\document.xml"");

ФайлXML.ЗаписатьОбъявлениеXML(); // Записать директиву.
ФайлXML.ЗаписатьНачалоЭлемента(""Корневой""); // Записать начало корневого элемента.
ФайлXML.ЗаписатьАтрибут(""ИмяСправочника"", ""Сотрудники""); // Записать атрибут корневого элемента.
ФайлXML.ЗаписатьКомментарий(""Выгрузка элементов справочника"");

// Получить данные сотрудников в виде одной большой строки.
СтрокаРазделителя = ""*"";
СтрокаСотрудников = ПолучитьСтрокиСотрудников(СтрокаРазделителя);
// Получить массив строк дла каждого сотрудника.
СтрокиСотрудников = СтрРазделить(СтрокаСотрудников, Символы.ПС);
Для ТекущаяСтрока = 0 По СтрокиСотрудников.Количество() - 1 Цикл
	// Получить данные каждого сотрудника.
	Данные = СтрРазделить(СтрокиСотрудников[ТекущаяСтрока], СтрокаРазделителя);
	ФайлXML.ЗаписатьНачалоЭлемента(""ЭлементСправочника"");
	ФайлXML.ЗаписатьНачалоЭлемента(""Код"");
	ФайлXML.ЗаписатьТекст(Данные[0]);
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.ЗаписатьНачалоЭлемента(""Наименование"");
	ФайлXML.ЗаписатьТекст(Данные[1]);
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.ЗаписатьНачалоЭлемента(""ДатаРождения"");
	ФайлXML.ЗаписатьТекст(Данные[2]);
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.ЗаписатьНачалоЭлемента(""КоличествоДетей"");
	ФайлXML.ЗаписатьТекст(Данные[3]);
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.ЗаписатьКонецЭлемента();
КонецЦикла;   
ФайлXML.ЗаписатьКонецЭлемента();
ФайлXML.Закрыть();    

// Результат
//<?xml version=""1.0"" encoding=""UTF-8""?>
//<Корневой ИмяСправочника=""Сотрудники"">
//	<!--Выгрузка элементов справочника-->
//	<ЭлементСправочника>
//		<Код>000000001</Код>
//		<Наименование>Алексеев Сергей Иванович</Наименование>
//		<ДатаРождения>10.12.1980</ДатаРождения>
//		<КоличествоДетей>1</КоличествоДетей>
//	</ЭлементСправочника>
//	<ЭлементСправочника>
//		<Код>REST-0003</Код>
//		<Наименование>Артемов Игорь Владимирович</Наименование>
//		<ДатаРождения>17.05.2019</ДатаРождения>
//		<КоличествоДетей>2</КоличествоДетей>
//	</ЭлементСправочника>
//	<ЭлементСправочника>
//		<Код>000000002</Код>
//		<Наименование>Смирнова Светлана Ивановна</Наименование>
//		<ДатаРождения>22.02.1990</ДатаРождения>
//		<КоличествоДетей>0</КоличествоДетей>
//	</ЭлементСправочника>
//</Корневой>"}
}
}
},
{6,
{"Копирование / перемещение / удаление / поиск",1,0,"",""},
{0,
{"Копирование файла (Обычное)",0,0,"Файл","ФайлИсточник = """";
ФайлПриемник = """";
КопироватьФайл(ФайлИсточник, ФайлПриемник);"}
},
{0,
{"Копирование файла (ОписаниеОповещения)",0,0,"Файл","ФайлИсточник = """";
ФайлПриемник = """";
ОписаниеОповещения = Новый ОписаниеОповещения(""КопированиеФайлаОповещение"", ЭтотОбъект);
НачатьКопированиеФайла(ОписаниеОповещения, ФайлИсточник, ФайлПриемник);

//Процедура КопированиеФайлаОповещение(СкопированныйФайл, ДополнительныеПараметры) Экспорт
//	// обработка
//КонецПроцедуры"}
},
{0,
{"Копирование файла (Асинхронно)",0,0,"Файл","&НаКлиенте
Асинх Процедура СкопироватьФайл(Команда)
    ФайлИсточник = """";
	ФайлПриемник = """";
    Попытка
        Результат = Ждать КопироватьФайлАсинх(ФайлИсточник, ФайлПриемник);
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры"}
},
{0,
{"Перемещение файла (Обычное)",0,0,"Файл","ФайлИсточник = """";
ФайлПриемник = """";
ПереместитьФайл(ФайлИсточник, ФайлПриемник);"}
},
{0,
{"Поиск фалов (ОписаниеОповещения)",0,0,"Файл","МаскаФайлов = ""*.*""; 
ИскатьВПодкаталогах = Истина; 
ДополнительныеПараметры = Новый Структура();
ОписаниеОповещения = Новый ОписаниеОповещения(""СписокНайденныхФайловОповещение"", ЭтотОбъект, ДополнительныеПараметры);
НачатьПоискФайлов(ОписаниеОповещения, КаталогРасположенияЛогФайлов, МаскаФайлов, ИскатьВПодкаталогах);
	
//&НаКлиенте 
//Процедура СписокНайденныхФайловОповещение(НайденныеФайлы, ДополнительныеПараметры) Экспорт 
//	
//	Для Каждого ЭлементФайл Из НайденныеФайлы Цикл
//		// обработка
//	КонецЦикла;
//	
//КонецПроцедуры"}
},
{0,
{"Удаление файла (Обычное)",0,0,"Файл","ФайлИсточник = """";
УдалитьФайлы(ФайлИсточник);"}
}
},
{3,
{"Архивы",1,0,"",""},
{0,
{"Чтение zip-архива",0,0,"Архив","Архив = Новый ЧтениеZipФайла();
Архив.Открыть(""c:\архив.zip"", ""Пароль"");"}
},
{0,
{"Запись zip-архива",0,0,"Архив","АрхивРезультат = ""e:\test\архив.zip"";
Архив = Новый ЗаписьZIPФайла(АрхивРезультат
							, """" // пароль
							, """" // Комментарий
							, МетодСжатияZIP.<? ""Метод сжатия"", ВыборВарианта, ""BZIP2"",""BZIP2"", ""Копирование"",""Копирование"", ""Сжатие"",""Сжатие"">
							, УровеньСжатияZIP.<? ""Уровень сжатия"", ВыборВарианта, ""Оптимальный"",""Оптимальный"", ""Минимальный"",""Минимальный"", ""Максимальный"",""Максимальный"">
							, МетодШифрованияZIP.<? ""Шифрование"", ВыборВарианта, ""Zip20"",""Zip20"", ""AES128"",""AES128"", ""AES192"",""AES192"", ""AES256"",""AES256"">
							, КодировкаИменФайловВZipФайле.<? """", ВыборВарианта, ""Авто"",""Авто"", ""UTF8"",""UTF8"", ""КодировкаОСДополнительноUTF8"",""КодировкаОСДополнительноUTF8"">);
АрхивируемыйФайл = ""c:\temp\document.xml""; // по маске = ""c:\temp\*.xml""
Архив.Добавить(АрхивируемыйФайл, РежимСохраненияПутейZIP.<? ""Сохранение пути"", ВыборВарианта, ""СохранятьОтносительныеПути"",""СохранятьОтносительныеПути"", ""НеСохранятьПути"",""НеСохранятьПути"", ""СохранятьПолныеПути"",""СохранятьПолныеПути"">);
// Архив.Добавить ... 
Архив.Записать();	
"}
},
{0,
{"Извлечь zip-архив (все)",0,0,"Архив","Архив = Новый ЧтениеZipФайла(""c:\архив.zip"", ""Пароль"");
Архив.ИзвлечьВсе(""c:\Temp"", РежимВосстановленияПутейФайловZIP.<?""Востановление путей"", ВыборВарианта, ""Восстанавливать"",""Восстанавливать"", ""НеВосстанавливать"",""НеВосстанавливать"">);
"}
}
}
},
{9,
{"Сообщение / Вопрос / Предупреждение",1,0,"",""},
{0,
{"Сообщение (СообщениеПользователю)",0,0,"Сооб[щение]","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<? ""Текст сообщения"">"";
Сообщение.Поле = """";
//Сообщение.КлючДанных = Объект.Ссылка
Сообщение.УстановитьДанные();
Сообщение.Сообщить();"}
},
{0,
{"Сообщение (ОбщегоНазначенияКлиентСервер)",0,0,"Сооб[щение]","ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""<? ""Текст сообщения"">"");"}
},
{0,
{"Вопрос (ОписаниеОповещения)",0,0,"Вопрос","ДополнительныеПараметры = Новый Структура();
ОписаниеОповещения = Новый ОписаниеОповещения(""ПоказатьВопросОповещение"", ЭтотОбъект, ДополнительныеПараметры);
ПоказатьВопрос(ОписаниеОповещения, ""<? ""Вопрос"">"", РежимДиалогаВопрос.<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""ДаНет"", ""ДаНетОтмена"", ""ДаНетОтмена"", ""ОК"", ""ОК"", ""ОКОтмена"", ""ОКОтмена"", ""ПовторитьОтмена"", ""ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""ПрерватьПовторитьПропустить"">);
	
//&НаКлиенте
//Процедура ПоказатьВопросОповещение(РезультатВопроса, ДополнительныеПараметры) Экспорт
//	Ответ = РезультатВопроса;
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		//Логика загрузки
//	КонецЕсли;
//КонецПроцедуры"}
},
{0,
{"Вопрос (Асинх)",0,0,"Вопрос","Ответ = Ждать ВопросАсинх(""<? ""Текст вопроса"">"", <? ""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"",""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"",""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"",""РежимДиалогаВопрос.ОК"", ""ОКОтмена"",""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"",""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"",""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
Если Ответ <? """", ВыборВарианта, ""Равен"",""="", ""Не равен"",""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"",""КодВозвратаДиалога.Да"", ""Нет"",""КодВозвратаДиалога.Нет"", ""ОК"",""КодВозвратаДиалога.ОК"", ""Отмена"",""КодВозвратаДиалога.Отмена"", ""Повторить"",""КодВозвратаДиалога.Повторить"", ""Прервать"",""КодВозвратаДиалога.Прервать"", ""Пропустить"",""КодВозвратаДиалога.Пропустить"", ""Тайаут"",""КодВозвратаДиалога.Таймаут""> Тогда
	// ...	
КонецЕсли; 
"}
},
{0,
{"Показать оповещение пользователя (простое)",0,0,"Показать[ОповещениеПользователя]","ПоказатьОповещениеПользователя(""<?""Текст оповещения"">"");"}
},
{0,
{"Показать оповещение пользователя (пояснения параметров)",0,0,"Показать[ОповещениеПользователя]","ПоказатьОповещениеПользователя(<?""Текст оповещения"">, ,<?""Пояснение"">, ); //Текст, Навиг.ссылка, Пояснение, Картинка"}
},
{0,
{"Показать оповещение пользователя (НавигационнаяСсылка)",0,0,"Показать[ОповещениеПользователя]","НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект.Ссыылка);
ПоказатьОповещениеПользователя(""<?""Текст оповещения"">"", НавигационнаяСсылка);"}
},
{0,
{"Предупреждение (Обычное)",0,0,"Показать[Предупреждение]","ПоказатьПредупреждение( ,<?>, 60);"}
},
{0,
{"Предупреждение (ОписаниеОповещения)",0,0,"Показать[Предупреждение]","ОписаниеОповещения = Новый ОписаниеОповещения(""<? ""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьПредупреждение(ОписаниеОповещения, <?>, 60);

////Вынести в отдельную процедуру
//&НаКлиенте
//Процедура <?""Имя процедуры обработчика"">(ДополнительныеПараметры) Экспорт
//	
//КонецПроцедуры
"}
}
},
{7,
{"ТаблицаЗначений",1,0,"",""},
{0,
{"ТаблицаЗначений - Проверка наличия колонки",0,0,"ТЗ","Функция ЕстьЛиКолонкаВСтрокеТЗ(ИмяКолонки, СтрокаТаблицыЗначений)

	УИД = Новый УникальныйИдентификатор(); 
	ВременнаяСтруктура = Новый Структура(ИмяКолонки, УИД); 
	ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, СтрокаТаблицыЗначений); 
	
	Возврат ВременнаяСтруктура[ИмяКолонки] <> УИД;
	
КонецФункции

"}
},
{0,
{"ТаблицаЗначений - Транспонировать",0,0,"ТЗ","Функция ТранспонироватьТЗ(ТЗ) Экспорт
   
	ТЗ2 = Новый ТаблицаЗначений;
	Массив = ТЗ.ВыгрузитьКолонку(ТЗ.Колонки[0]); // первая колонка содержит названия новых колонок
	ТЗ2.Колонки.Добавить(ТЗ.Колонки[0].Имя); // старые названия колонок сохраним в первой колонке
	
	Для Каждого Значения из Массив Цикл
		ТЗ2.Колонки.Добавить(СокрЛП(Значения));
	КонецЦикла;
	
	Для Сч = 1 По ТЗ.Колонки.Количество() - 1 Цикл
		ТЗ2.Добавить();
		ТЗ2[Сч - 1][ТЗ.Колонки[0].Имя] = ТЗ.Колонки[Сч].Имя;
	КонецЦикла;
	
	СчетчикСтрок = -1;
	Для каждого стр из Тз Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		Мас = Новый Массив;
		Для Сч = 1 По ТЗ.Колонки.Количество() - 1 Цикл
			Мас.Вставить(Сч - 1, стр[Сч]);
		КонецЦикла;
		ТЗ2.ЗагрузитьКолонку(Мас, ТЗ2.Колонки[СчетчикСтрок + 1]);
	КонецЦикла;
	
	Возврат ТЗ2;
   
КонецФункции
"}
},
{0,
{"ТаблицаЗначений - Отбор (Построитель)",0,0,"ТЗ"," //Получение данных из ТабзицыЗначений через ПостроительЗапроса (отбор)
 //Параметры:
 // ТаблицаЗначений - ТаблицаЗначений - Произвольная таблица для отбора.
 // ИмяКолонки - Строка - Наименование колонки.
 // Значение - ЛюбоеЗначение - Значение отбора.
 // ЗначениеТипаСревнения - ВидСравнения - Значение вида сравления (Пример: ВидСравнения.Равно).
 //Возвращаемое значение:
 //	РезультатФункции - ТаблицаЗначений - Содержит строки переданной ТаблицыЗначений удовлетворяющих
									//заданному в параметрах отбору	
&НаСервере
Функция ОтборЧерезПостроитель(Знач ТаблицаЗначений, Знач ИмяКолонки, Знач Значение
							, Знач ЗначениеТипаСревнения = Неопределено) Экспорт
							
	РезультатФункции = Неопределено;
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Построитель = Новый ПостроительЗапроса;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
		ОтборНастр = Построитель.Отбор.Добавить(ИмяКолонки);
		ОтборНастр.ВидСравнения = ?(ЗначениеТипаСревнения = Неопределено
												, ВидСравнения.Равно
												, ЗначениеТипаСревнения);
		ОтборНастр.Значение = Значение;
		ОтборНастр.Использование = Истина;
		Построитель.Выполнить();
		РезультатФункции = Построитель.Результат.Выгрузить();
	#КонецЕсли
	Возврат РезультатФункции;
 
КонецФункции // -- ОтборЧерезПостроитель "}
},
{0,
{"ТаблицаЗначений - Отфильтровать (Построитель)",0,0,"ТЗ","// ТаблицаОтборов - Таблица значений с колонками
// ИмяОтбора - Строка
// ВидСравнения - ВидСравнения
// Значение - Any
// Возвращает отфильтрованную таблицу значений
Функция ОтфильтроватьТаблицуЗначений(ТаблицаЗначенийДляФильтрации, ТаблицаОтборов)

	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначенийДляФильтрации);

	Для Каждого СтрокаКоллекции Из ТаблицаОтборов Цикл
		Отбор = Построитель.Отбор.Добавить(СтрокаКоллекции.ИмяОтбора);
		Отбор.ВидСравнения = СтрокаКоллекции.ВидСравнения;
		Отбор.Использование = Истина;
		Отбор.Значение = СтрокаКоллекции.Значение;
	КонецЦикла;

	Возврат Построитель.Результат.Выгрузить();

КонецФункции
"}
},
{0,
{"ТаблицаЗначений в МассивСтруктур",0,0,"ТЗ","// Преобразует таблицу значений в массив структур.
// Может использоваться для передачи на клиент данных в том случае, если таблица
// значений содержит только такие значения, которые могут
// быть переданы с сервера на клиент.
//
// Полученный массив содержит структуры, каждая из которых повторяет
// структуру колонок таблицы значений.
//
// Не рекомендуется использовать для преобразования таблиц значений
// с большим количеством строк.
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - исходная таблица значений.
//
// Возвращаемое значение:
//  Массив - коллекция строк таблицы в виде структур.
//
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = """";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + "","";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции"}
},
{0,
{"МассивСтруктур в ТаблицуЗначений",0,0,"Массив","

&НаСервереБезКонтекста
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) 
    
    тзДанные = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из мсДанные Цикл
		Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции

"}
},
{0,
{"ДеревоЗначений в ТаблицуЗначений",0,0,"ДЗ","&НаСервере
Функция ДеревоЗначенийВТаблицуЗначений(Знач ДеревоЗначений)
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	Для каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ТаблицаТоваров.Колонки.Добавить(Колонка.Имя); // заполнение колонок
	КонецЦикла;
	
	Для каждого Строка Из ДеревоЗначений.Строки Цикл
		РекурсивноеЗаполнениеТаблицыЗначений(ТаблицаТоваров, Строка);
	КонецЦикла;   
		
	Возврат ТаблицаТоваров;
	
КонецФункции // -- ДеревоЗначенийВТаблицуЗначений()

&НаСервере
Процедура РекурсивноеЗаполнениеТаблицыЗначений(ТаблицаЗначений, СтрокаДерева)
	
	//условие выхода из рекурсии;
	Если СтрокаДерева.Строки.Количество () = 0 Тогда
		Возврат;
	КонецЕсли;  
	
	Для каждого Строка Из СтрокаДерева.Строки Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			НоваяСтрока[Колонка.Имя] = Строка[Колонка.Имя];
		КонецЦикла;
		РекурсивноеЗаполнениеТаблицыЗначений(ТаблицаЗначений, Строка);
	КонецЦикла;
	
КонецПроцедуры // -- РекурсивноеЗаполнениеТаблицыЗначений()

"}
}
},
{2,
{"ДинамическийСписок",1,0,"",""},
{0,
{"Отбор в динамическом списке",0,0,"Отбор","ОтборХарактеристик = ЭтаФорма.<ДинамическийСписокФормы>.Отбор.Элементы;
ОтборХарактеристик.Очистить(); // предварительно убираем все отборы
Отбор = ОтборХарактеристик.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.<? ""Вариант сравнения: "", ВыборВарианта, ""Равно"",""Равно"", ""Больше"",""Больше"", ""БольшеИлиРавно"",""БольшеИлиРавно"", ""ВИерархии"",""ВИерархии"", ""ВСписке"",""ВСписке"", ""ВСпискеПоИерархии"",""ВСпискеПоИерархии"", ""Заполнено"",""Заполнено"", ""Меньше"",""Меньше"", ""МеньшеИлиРавно"",""МеньшеИлиРавно"", ""НачинаетсяС"",""НачинаетсяС"", ""НеВИерархии"",""НеВИерархии"", ""НеВСпискеПоИерархии"",""НеВСпискеПоИерархии"", ""НеЗаполнено"",""НеЗаполнено"", ""НеНачинаетсяС"",""НеНачинаетсяС"", ""НеПодобно"",""НеПодобно"", ""НеРавно"",""НеРавно"", ""НеСодержит"",""НеСодержит"", ""Подобно"",""Подобно"", ""Содержит"",""Содержит"">;
Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""<Имя реквизита элемента>"");
Отбор.ПравоеЗначение = <Значение> // Значение с чем сравниваем;
Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.<? ""Режим отображения: "", ВыборВарианта, ""Недоступный"",""Недоступный"", ""Авто"",""Авто"", ""БыстрыйДоступ"",""БыстрыйДоступ"", ""Обычный"",""Обычный"">;
Отбор.Использование = Истина;"}
},
{0,
{"Задать параметр динамического списка",0,0,"ДС","<? ""Имя динамического списка: "">.Параметры.УстановитьЗначениеПараметра(<? ""Имя параметра: "">, <? ""Значение: "">)"}
}
},
{4,
{"Организация / Контрагенты",1,0,"",""},
{0,
{"Текущая организация",0,0,"Тек[ущаяОрганизация]","ТекущаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();"}
},
{0,
{"Текущий пользователь (Клиент)",0,0,"Тек[ущийПользовательКлиент]","ТекущийПользователь = ПользователиКлиент.ТекущийПользователь();"}
},
{0,
{"Текущий пользователь (Сервер)",0,0,"Тек[ущийПользовательСервер]","ТекущийПользователь = Пользователи.ТекущийПользователь();"}
},
{0,
{"Контрагенты - Основной договор [Функция]",0,0,"Код[ОсновнойДоговор]","Функция ПолучитьОсновнойДоговор(Знач Организация, Знач Контрагент, Знач ВидДоговора) Экспорт 
	
	РезультатФункции = ПредопределенноеЗначение(""Справочник.ДоговорыКонтрагентов.ПустаяСсылка"");
	
	ЗапросПолучитьОсновнойДоговор = Новый Запрос;
	ЗапросПолучитьОсновнойДоговор.Текст = 
		""ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = &ВидДоговора"";
	ЗапросПолучитьОсновнойДоговор.УстановитьПараметр(""ВидДоговора"", ВидДоговора);
	ЗапросПолучитьОсновнойДоговор.УстановитьПараметр(""Контрагент"", Контрагент);
	ЗапросПолучитьОсновнойДоговор.УстановитьПараметр(""Организация"", Организация);
	
	РезультатЗапроса = ЗапросПолучитьОсновнойДоговор.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		РезультатФункции = Выборка.Договор;
	КонецЕсли;
	
	//Если основной договор не отмечен, то поищем среди всех договоров 
	//и если по данному виду он один и непомеченный на удаление, то возьмем его
	
	Если РезультатФункции.Пустая() Тогда
		ЗапросКоличественный = Новый Запрос;
		ЗапросКоличественный.Текст = 
			""ВЫБРАТЬ
			|	МАКСИМУМ(ДоговорыКонтрагентов.Ссылка) КАК Договор,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоговорыКонтрагентов.Ссылка) КАК КоличествоДоговоров
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Контрагент
			|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления"";
		ЗапросКоличественный.УстановитьПараметр(""ВидДоговора"", ВидДоговора);
		ЗапросКоличественный.УстановитьПараметр(""Контрагент"", Контрагент);
		ЗапросКоличественный.УстановитьПараметр(""Организация"", Организация);
		
		РезультатЗапроса = ЗапросКоличественный.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.КоличествоДоговоров = 1 Тогда
				РезультатФункции = Выборка.Договор;
			ИначеЕсли Выборка.КоличествоДоговоров = 0 Тогда
				ТекстОшибки = СтрШаблон(""Для контрагента %1 не создан договор 
										| по виду %2 для организации %3""
										, Контрагент, ВидДоговора, Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				// +++ 14.11.2022 :: БНВ - В случае если потребуется создавать договор
				// РезультатФункции = СоздатьОсновнойДоговор(Организация, Контрагент, ВидДоговора);
				// --- БНВ
			ИначеЕсли Выборка.КоличествоДоговоров > 1 Тогда
				РезультатФункции = Выборка.Договор;
				ТекстОшибки = СтрШаблон(""Для контрагента %1 подставлен первый договор 
										| из нескольких по виду %2 для организации %3""
										, Контрагент, ВидДоговора, Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;

КонецФункции // -- ПолучитьОсновнойДоговор()"}
}
},
{4,
{"Печатные формы",1,0,"",""},
{0,
{"Внешняя печатная форма",0,0,"ВПФ","Функция СведенияОВнешнейОбработке()

	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;    
	МассивНазначений.Добавить(""Документ.<?""Выберите документ"", Документ>"");
	
	ПараметрыРегистрации.Вставить(""Вид"", ""ПечатнаяФорма"");
	ПараметрыРегистрации.Вставить(""Назначение"", МассивНазначений);
	ПараметрыРегистрации.Вставить(""Наименование"", ""<? ""Имя регистрации"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Ложь);
	ПараметрыРегистрации.Вставить(""Версия"", ""1.0.0.1""); 
	ПараметрыРегистрации.Вставить(""Информация"", ""<? ""Информация о внешней печатной форме"">""); 
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, ""<? ""Заголовок печатной формы""> (ВПФ)""
									, ""<? ""Имя регистрации"">""
									, ""ВызовСерверногоМетода""
									, Истина
									, ""ПечатьMXL"");
	ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;	

КонецФункции // -- СведенияОВнешнейОбработке()

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""ПоказыватьОповещение"", Новый ОписаниеТипов(""Булево""));
	Команды.Колонки.Добавить(""Модификатор"", Новый ОписаниеТипов(""Строка""));
	
	Возврат Команды;
	
КонецФункции // -- ПолучитьТаблицуКоманд()

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор
							, Использование, ПоказыватьОповещение = Ложь, Модификатор = """")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление; 
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм
						, ОбъектыПечати, ПараметрыВывода) Экспорт
						
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм
										, ""<? ""Имя регистрации"">""
										, ""<? ""Заголовок печатной формы""> (ВПФ)""
										, СформироватьПечатнуюФорму(ЭлементМассива
																	, ОбъектыПечати));
	КонецЦикла;
	
КонецПроцедуры // -- Печать()"}
},
{0,
{"Печатная форма",0,0,"ПФ","ТабДок = Новый ТабличныйДокумент;
Макет = <Путь до макета>.ПолучитьМакет(""<НаименованиеМакета>"");
Область = Макет.ПолучитьОбласть(""<НаименованиеОбласти>"");
ТабДок.Вывести(Область);

ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
ТабДок.АвтоМасштаб = Истина;
ТабДок.Показать();"}
},
{0,
{"Проверка существания области в макете",0,0,"Область[Существует]","ОбластьСуществует = ЗначениеЗаполнено(Макет.Области.Найти(""<? ""Имя области"">""))"}
},
{1,
{"Оформление печатной формы",1,0,"",""},
{0,
{"Линия",0,0,"Линия","Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);"}
}
}
},
{8,
{"Прочее",1,0,"",""},
{0,
{"Значения реквизитов объекта",0,0,"Значения[реквизитовОбъекта]","<? ""Имя переменной""> = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(<? ""Ссылка на объект"">, ""ИмяРеквизита1, ИмяРеквизита2 и т.д."")"}
},
{0,
{"Объекты - Изменение отображения представления объекта [Процедура]",0,0,"Код[ПредставлениеНаименованияВСписке]","
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(""Этот объект № %1 от %2""
								, Формат(Данные.Ссылка.Номер, ""ЧГ="")
								, Формат(Данные.Ссылка.Дата, ""ДФ=dd.MM.yyyy""));
	
КонецПроцедуры // -- ОбработкаПолученияПредставления()
"}
},
{0,
{"Описание оповещения (с описанием обработчика)",0,0,"Опис[аниеОповещения]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры"">"", ЭтотОбъект);

//==========Вынести в отдельную процедуру========
//
//Список аргументов зависит от контекста вызова!
//&НаКлиенте
//Процедура <?""Имя процедуры"">(ДополнительныеПараметры) Экспорт
//	
//КонецПроцедуры
 "}
},
{0,
{"Программная установка безопасного режима",0,0,"Устан[овитьБезопасныйРежим]","УстановитьБезопасныйРежим(<? ""Включить/Выключить"", ВыборВарианта, ""Включить"",""Истина"", ""Выключить"",""Ложь"">)"}
},
{0,
{"Табличный документ в таблицу значений",0,0,"","Построитель = Новый ПостроительОтчета;
Построитель.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
Построитель.ЗаполнитьНастройки();
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(<ТабДок.Область()>);
Построитель.Выполнить();
ТЗ = Построитель.Результат.Выгрузить();"}
},
{1,
{"Пароли",1,0,"",""},
{0,
{"Сгенерировать пароль",0,0,"Пароль[Сгенерировать]","ПарольДлинна = 8;
Пароль = Пользователи.СоздатьПароль(ПарольДлинна, <? ""Сложность пароля"", ВыборВарианта, ""Сложно"",""Истина"", ""Легко"",""Ложь"">, ""ДляПользователей"");"}
}
},
{2,
{"ЭтоНовый",1,0,"",""},
{0,
{"Проверка ЭтоНовый (Объект.Ссылка)",0,0,"ЭтоНовый","ЭтоНовый = ?(ЗначениеЗаполнено(Объект.Ссылка), Истина, Ложь);"}
},
{0,
{"Проверка ЭтоНовый (Параметры)",0,0,"ЭтоНовый","ЭтоНовый = ?(Параметры.Ключ.Пустая(), Ложь, Истина);"}
}
},
{2,
{"Редкий случай",1,0,"",""},
{0,
{"Получить web-cсылку на объект метаданных",0,0,"","Функция ПолучитьWebСсылкуНаОбъект(Объект) Экспорт

	НавСсылка = ПолучитьНавигационнуюСсылку(Объект);
	ДлинаСтроки = СтрДлина(НавСсылка);
	ПозицияРеф 	= СтрНайти(НавСсылка, ""?ref"");
	НавСсылка 	= Прав(НавСсылка, ДлинаСтроки - ПозицияРеф + 1) + ""#"" + Лев(НавСсылка, ПозицияРеф - 1);
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	srv = НСтр(СтрокаСоединения, ""Srvr"");
	ref = НСтр(СтрокаСоединения, ""Ref"");
	НавСсылка 	= ""e1c://server/""+ srv + ""/"" + ref + НавСсылка;		
	Возврат НавСсылка;
	
КонецФункции"}
},
{0,
{"Проверка узла через ping (COMОбъект)",0,0,"Код[Ping]","// Проверка доступности переданного узла с помощью команды ping
//
// Параметры:
//  АдресURL - пингуемый адрес
//
// Возвращаемое значение: 
//  Булево
//
Функция Пинг(АдресURL = """")
    
    Если ПустаяСтрока(АдресURL) Тогда
        АдресURL = ""www.ya.ru"";            
    КонецЕсли; 
    
    objShell = Новый COMОбъект(""WScript.Shell"") ;
    objScriptExec = objShell.Exec(""ping.exe -n 1 "" + АдресURL);
    strPingResults = НРег(objScriptExec.StdOut.ReadAll());
    ЕстьСоединение = Найти(strPingResults, ""ttl="") > 0;    
    
    Возврат ЕстьСоединение;
    
КонецФункции"}
}
}
},
{3,
{"Еще не обработано",1,0,"",""},
{0,
{"Создание построителя запроса по табличному полю",0,0,"","Функция ПолучитьПостроительЗапросаСпискаТабличногоПоля(пТабличноеПоле) 

    МетаданныеЗначения = ЛксПолучитьМетаданные(пТабличноеПоле.Значение);
    ПостроительЗапроса = Новый ПостроительЗапроса;
    ПостроительЗапроса.Текст = ""ВЫБРАТЬ * ИЗ "" + МетаданныеЗначения.ПолноеИмя() + "" КАК Таблица"";
    ПостроительЗапроса.ЗаполнитьНастройки();
    ЛксСкопироватьПорядок(ПостроительЗапроса.Порядок, пТабличноеПоле.Значение.Порядок);
    ЛксСкопироватьОтборДинамическогоСписка(ПостроительЗапроса.Отбор, пТабличноеПоле.Значение.Отбор);
    Если Истина
        И ЛксЛиМетаданныеИерархическогоОбъекта(МетаданныеЗначения)
        И пТабличноеПоле.ИерархическийПросмотр
    Тогда
        ПостроительЗапроса.Отбор.Добавить(""Родитель"");
        Если пТабличноеПоле.ТекущийРодитель <> Неопределено Тогда 
            ПостроительЗапроса.Отбор.Родитель.Установить(пТабличноеПоле.ТекущийРодитель);
        КонецЕсли;
    КонецЕсли;
    Возврат ПостроительЗапроса;

КонецФункции"}
},
{0,
{"Транзакция с просмотром результатов и возможностью отката изменений",0,0,"","ВТРанзакции = Истина;
Если ВТранзакции Тогда	
	НачатьТранзакцию(); 
КонецЕсли;

Если ВТранзакции Тогда
	ФормаСписка = <?""Тип объекта?"", ВыборТипа>.ПолучитьФормуСписка();
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.Закрыть();
	КонецЕсли;
	ФормаСписка.ОткрытьМодально();
	Если Вопрос(""Принять изменения?"", РежимДиалогаВопрос.ДаНет, <?""Таймаут вопроса в секундах"">, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
КонецЕсли;"}
},
{0,
{"CSV в массив из структур",0,0,"","Функция ПреобразоватьCSVвМассив(CSV)
	
	Разделитель        = Символы.Таб;
	ЗаголовкиCSV       = СокрЛП(СтрПолучитьСтроку(CSV, 1));
	
	DATA = Новый Массив;
	Для НомерСтроки=2 По СтрЧислоСтрок(CSV) Цикл  
		Строка         = СтрПолучитьСтроку(CSV, НомерСтроки);
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель, Ложь, );
		Структура      = Новый Структура(СтрЗаменить(ЗаголовкиCSV,  Разделитель, "",""));
		Инд            = 0;
		Для Каждого КлючЗначение Из Структура Цикл
			Структура[КлючЗначение.Ключ] = МассивПодстрок[Инд];
			Инд = Инд+1;
		КонецЦикла;
		DATA.Добавить(Структура);
	КонецЦикла;
		
	Возврат DATA;
		
КонецФункции

"}
}
}
},
{2,
{"СКД",1,0,"",""},
{0,
{"Добавить текст в сформированный СКД-отчет",0,0,"Код[СКД_ПриКомпановкеРезультата]","Перем _СтандартнаяОбработка;

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если НЕ _СтандартнаяОбработка = Истина Тогда 
		СтандартнаяОбработка = Ложь;
		_СтандартнаяОбработка = Истина;

		Область = Новый Структура;
			Область.Вставить(""Высота"", ДокументРезультат.ВысотаТаблицы);
			Область.Вставить(""Ширина"", ДокументРезультат.ШиринаТаблицы);
			Область.Вставить(""RC_Начало"", СтрШаблон(""R%1C1"", ПерваяСтрока));
			Область.Вставить(""RC_Конец"", СтрШаблон(""R%1C%2"", Область.Высота, Область.Ширина));

		//ДокументРезультат.ВставитьОбласть(
		//			ДокументРезультат.Область(Область.Высота + 1, 1),
		//			ДокументРезультат.Область(Область.Высота + 1, 1, Область.Высота + 1, Область.Ширина), 
		//			ТипСмещенияТабличногоДокумента.БезСмещения)			
		//ОбластьДляЗаписи = ""R1C1:R1C1"";
		//ДокументРезультат.Область(ОбластьДляЗаписи).Текст = """"
	КонецЕсли;

КонецПроцедуры // -- ПриКомпоновкеРезультата()"}
},
{0,
{"СкопироватьСхемуКомпоновкиДанных",0,0,"Код[СКД_СкопироватьСхемуКомпоновкиДанных]","Функция СкопироватьСхемуКомпоновкиДанных(ИсходнаяСхема) Экспорт
	
	Если ТипЗнч(ИсходнаяСхема) = Тип(""СхемаКомпоновкиДанных"") Тогда
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXDTO(СериализаторXDTO.ЗаписатьXDTO(ИсходнаяСхема));
	Иначе
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции // -- СкопироватьСхемуКомпоновкиДанных()"}
}
}
}
}