{1,
{11,
{"Мои варианты шаблонов",1,0,"",""},
{0,
{"- Для тестов -",0,0,"Тест","/////////////"}
},
{0,
{"- Подсказка создания шаблонов -",0,0,"","<? ""Текст"", БизнесПроцесс> - выбор бизнес-процесса

<? ""Текст"", ВыборВарианта, ""ИмяСпискаВыбора1"",""Значение2"", ""ИмяСпискаВыбора2"",""Значение2"">

<? ""Выбор документа"", Документ> - выбор вида документа

<? ""Текст"", Выбор типа> - выбор типа

<? ""Текст"", ЖурналДокументов> - выбор вида журнала документов

<? ""Текст"", ЗначениеПеречисления> - выбор значения перечисления

<? ""Текст"", ИмяПользователя> - выбор имени пользователя

<? ""Текст"", ПолноеИмяПользователя> - выбор полного имени пользователя

<? ""Текст"", ИмяПользователяХранилищаКонфигурации> - выбор имени пользователя хранилища конфигурации

<? ""Текст"", Константа> - выбор константы

<? ""Текст"", КонструкторОписанияТипов> - конструктор описания типов

<? ""Текст"", КритерийОтбора> - выбор критерия отбора

<? ""Текст"", Обработка> - выбор обработки

<? ""Текст"", Отчет> - выбор отчета

<? ""Текст"", Перерасчет> - выбор перерасчета

<? ""Текст"", Перечисление> - выбор перечисления

<? ""Текст"", ПланВидовРасчета> - выбор плана видов расчета

<? ""Текст"", ПланВидовХарактеристик> - выбор плана видов характеристик

<? ""Текст"", ПланОбмена> - выбор плана обмена

<? ""Текст"", ПланСчетов> - выбор плана счетов

<? ""Текст"", ПланВидовРасчетаПредопределенныеДанные> - выбор предопределенных данных плана видов расчета. Сначала выбирается план видов расчета, а затем значение предопределенных данных

<? ""Текст"", ПланВидовХарактеристикПредопределенныеДанные> - выбор предопределенных данных плана видов характеристик. Сначала выбирается план видов характеристик, а затем значение предопределенных данных

<? ""Текст"", ПланСчетовПредопределенныеДанные> - выбор предопределенных данных плана счетов. Сначала выбирается план счетов, а затем значение предопределенный счет

<? ""Текст"", ОбъектМетаданных, """"<Наименование объекта метаданных 1>"""", """"<Наименование объекта метаданных 2>"""", ..., """"<Наименование объекта метаданных N>""""> - подмножество объектов конфигурации

<? ""Текст"", Последовательность> - выбор последовательность

<? ""Текст"", РегистрБухгалтерии> - выбор регистра бухгалтерии

<? ""Текст"", РегистрНакопления> - выбор регистра накопления

<? ""Текст"", РегистрРасчета> - выбор регистра расчета

<? ""Текст"", РегистрСведений> - выбор регистра сведений

<? ""Текст"", Справочник> - выбор справочника

<? ""Текст"", СправочникПредопределенныеДанные> - выбор предопределенных данных справочника. Сначала выбирается справочник, а затем значение предопределенный счет

<? ""Текст"", ТекстЗапроса> - осуществляется формирование текста запроса с использованием конструктора запросов

<? ""Текст"", ДатаВремя, """"<Форматная строка>""""> - ввод текущей даты в формате, указанном в строке <Форматная строка> 

<? ""Текст"", ФорматнаяСтрока> - осуществляется формирование текста форматной строки с использованием конструктора форматной строки. "}
},
{4,
{"Стандартные",1,0,"",""},
{16,
{"Управляющие",1,0,"",""},
{0,
{"Если",0,0,"Если","Если <?""Условие""> Тогда
	<?>
КонецЕсли;"}
},
{0,
{"ЕслиИначе",0,0,"Если","Если <?""Условие""> Тогда
	<?>
Иначе

КонецЕсли;"}
},
{0,
{"Пока",0,0,"Пока","Пока <?""Условие""> Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для","Для <?""Счетчик""> По <?""Ограничение""> Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"Для[ Каждого]","Для Каждого <?""Переменная""> Из <?""Коллекция""> Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Процедура",0,0,"Проц[едура]","Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры // -- <?""Имя процедуры"">()
"}
},
{0,
{"Процедура (с заголовком)",0,0,"Проц[едура]","// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры // -- <?""Имя процедуры"">()
"}
},
{0,
{"Процедура модуля формы",0,0,"Проц[едура]","// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры // -- <?""Имя процедуры"">()
"}
},
{0,
{"Процедура модуля команды",0,0,"Проц[едура]","// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры // -- <?""Имя процедуры"">()
"}
},
{0,
{"Функция",0,0,"Функ[ция]","Функция <?""Имя функции"">()
	
	Возврат <?>;
КонецФункции // -- <?""Имя функции"">()
"}
},
{0,
{"Функция (с заголовком)",0,0,"Функ[ция]","// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция <?""Имя функции"">()

	Возврат <?>;
КонецФункции // -- <?""Имя функции"">()
"}
},
{0,
{"Функция модуля формы",0,0,"Функ[ция]","// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Функция <?""Имя функции"">()

	Возврат <?>;
КонецФункции // -- <?""Имя функции"">()
"}
},
{0,
{"Функция модуля команды",0,0,"Функ[ция]","// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Функция <?""Имя функции"">()

	Возврат <?>;
КонецФункции // -- <?""Имя функции"">()
"}
},
{0,
{"Возврат",0,0,"Возв[рат]","Возврат;<?>"}
},
{0,
{"Директива компиляции",0,0,"Дирек[тива]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"Инструкция препроцессора",0,0,"Инстр[укция]","#Если <?""Выберите инструкцию препроцессора"", ВыборВарианта, ""Сервер"", ""Сервер"", ""Клиент"", ""Клиент"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент"", ""ВнешнееСоединение"", ""ВнешнееСоединение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение""> Тогда
	<?>
#КонецЕсли"}
}
},
{18,
{"Прикладные",1,0,"",""},
{0,
{"Перечисление",0,1,"Переч[исление]","ПредопределенноеЗначение(""Перечисление.<?""Выберите значение перечисления"", ЗначениеПеречисления>"")"}
},
{2,
{"Функциональные опции",1,0,"",""},
{0,
{"Получить функциональную опцию",0,1,"Получить[ФункциональнуюОпцию]","ПолучитьФункциональнуюОпцию(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
},
{0,
{"Получить функциональную опцию интерфейса",0,1,"Получить[ФункциональнуюОпциюИнтерфейса]","ПолучитьФункциональнуюОпциюИнтерфейса(""<?""Выберите функциональную опцию"", ОбъектМетаданных, ""ФункциональнаяОпция"">"")"}
}
},
{4,
{"Общие формы",1,0,"",""},
{0,
{"Открыть общую форму",0,0,"Открыть[Форму]","ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");"}
},
{0,
{"Открыть общую форму (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"", ПараметрыФормы);"}
},
{0,
{"Получить общую форму",0,0,"Получить[Форму]","ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");"}
},
{0,
{"Получить общую форму (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");
"}
}
},
{5,
{"Планы обмена",1,0,"",""},
{0,
{"Открыть форму плана обмена",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"");"}
},
{0,
{"Открыть форму плана обмена (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана обмена",0,0,"Получить[Форму]","ПолучитьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"");"}
},
{0,
{"Получить форму плана обмена (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланОбмена.<?""Выберите план обмена"", ПланОбмена>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"ПланыОбмена - Обход элементов",0,0,"ПланыОбмена","Выборка = ПланыОбмена.<?"""", Справочник>.Выбрать();

Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
}
},
{3,
{"Константы",1,0,"",""},
{0,
{"Получить/установить",0,0,"Конст[анты]","Константы.<?"""", Константа>.<?""Выбор метода"", ВыборВарианта, ""Получить"", ""Получить"", ""Установить"", ""Установить"">()"}
},
{0,
{"Установить",0,0,"Конст[анты]","Константы.<?"""", Константа>.Установить(<?>);"}
},
{0,
{"Получить",0,0,"Конст[анты]","Константы.<?"""", Константа>.Получить()"}
}
},
{6,
{"Справочники",1,0,"",""},
{0,
{"Открыть форму справочника",0,0,"Открыть[Форму]","ОткрытьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму справочника (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму справочника",0,0,"Получить[Форму]","ПолучитьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму справочника (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Справочник.<?""Выберите справочник"", Справочник>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход элементов",0,0,"","Выборка = Справочники.<?"""", Справочник>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Обход элементов иерархически",0,0,"","Выборка = Справочники.<?"""", Справочник>.ВыбратьИерархически();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{6,
{"Документы",1,0,"",""},
{0,
{"Открыть форму документа",0,0,"Открыть[Форму]","ОткрытьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму документа (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму документа",0,0,"Получить[Форму]","ПолучитьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму документа (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Документ.<?""Выберите документ"", Документ>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход документов",0,0,"","Выборка = Документы.<?"""", Документ>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Движения",0,0,"","Движения.<?""Выбор регистра"", ОбъектМетаданных, ""РегистрСведений"", ""РегистрНакопления"", ""РегистрБухгалтерии"", ""РегистрРасчета"">"}
}
},
{4,
{"Отчеты",1,0,"",""},
{0,
{"Открыть форму отчета",0,0,"Открыть[Форму]","ОткрытьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму отчета (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму отчета",0,0,"Получить[Форму]","ПолучитьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму отчета (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Отчет.<?""Выберите отчет"", Отчет>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""ФормаНастроек"", ""ФормаНастроек"", ""ФормаРедактированияВарианта"", ""ФормаРедактированияВарианта"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{4,
{"Обработки",1,0,"",""},
{0,
{"Открыть форму обработка",0,0,"Открыть[Форму]","ОткрытьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму обработка (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму обработка",0,0,"Получить[Форму]","ПолучитьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму обработка (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Обработка.<?""Выберите обработку"", Обработка>.<?""Выберите форму"", ВыборВарианта, ""Форма"", ""Форма"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{5,
{"Планы видов характеристик",1,0,"",""},
{0,
{"Открыть форму плана видов характеристик",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана видов характеристик (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана видов характеристик",0,0,"Получить[Форму]","ПолучитьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана видов характеристик (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланВидовХарактеристик.<?""Выберите ПВХ"", ПланВидовХарактеристик>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Группы"", ""ФормаГруппы"", ""Выбора группы"", ""ФормаВыбораГруппы"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход видов характеристик",0,0,"","Выборка = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{5,
{"Планы счетов",1,0,"",""},
{0,
{"Открыть форму плана счетов",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана счетов (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана счетов",0,0,"Получить[Форму]","ПолучитьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана счетов (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланСчетов.<?""Выберите план счетов"", ПланСчетов>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Найти по коду",0,0,"","ПланыСчетов.<?"""", ПланСчетов>.НайтиПоКоду(<?>)"}
}
},
{5,
{"Планы видов расчета",1,0,"",""},
{0,
{"Открыть форму плана видов расчета",0,0,"Открыть[Форму]","ОткрытьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму плана видов расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму плана видов расчета",0,0,"Получить[Форму]","ПолучитьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму плана видов расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ПланВидовРасчета.<?""Выберите план видов расчета"", ПланВидовРасчета>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход видов расчета",0,0,"","Выборка = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{5,
{"Бизнес-процессы",1,0,"",""},
{0,
{"Открыть форму бизнес-процесса",0,0,"Открыть[Форму]","ОткрытьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму бизнес-процесса (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму бизнес-процесса",0,0,"Получить[Форму]","ПолучитьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму бизнес-процесса (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""БизнесПроцесс.<?""Выберите бизнес-процесс"", БизнесПроцесс>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Обход бизнес-процессов",0,0,"","Выборка = БизнесПроцессы.<?"""", БизнесПроцесс>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{4,
{"Задачи",1,0,"",""},
{0,
{"Открыть форму задачи",0,0,"Открыть[Форму]","ОткрытьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму задачи (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму задачи",0,0,"Получить[Форму]","ПолучитьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму задачи (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""Задача.<?""Выберите задачу"", Задача>.<?""Выберите форму"", ВыборВарианта, ""Объекта"", ""ФормаОбъекта"", ""Списка"", ""ФормаСписка"", ""Выбора"", ""ФормаВыбора"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
}
},
{6,
{"Регистры сведений",1,0,"",""},
{0,
{"Открыть форму регистра сведений",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра сведений (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра сведений",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра сведений (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.<?""Выберите форму"", ВыборВарианта, ""Записи"", ""ФормаЗаписи"", ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра сведений",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра сведений (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр сведений"", РегистрСведений>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры накопления",1,0,"",""},
{0,
{"Открыть форму регистра накопления",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра накопления (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра накопления",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра накопления (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра накопления",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр накопления"", РегистрНакопления>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра накопления (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр накопления"", РегистрНакопления>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры бухгалтерии",1,0,"",""},
{0,
{"Открыть форму регистра бухгалтерии",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра бухгалтерии (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра бухгалтерии",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра бухгалтерии (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрБухгалтерии.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра бухгалтерии",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра бухгалтерии (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр бухгалтерии"", РегистрБухгалтерии>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
},
{6,
{"Регистры расчета",1,0,"",""},
{0,
{"Открыть форму регистра расчета",0,0,"Открыть[Форму]","ОткрытьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Открыть форму регистра расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);"}
},
{0,
{"Получить форму регистра расчета",0,0,"Получить[Форму]","ПолучитьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма.""><?>"");"}
},
{0,
{"Получить форму регистра расчета (с параметрами)",0,0,"","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""РегистрРасчета.<?""Выберите регистр расчета"", РегистрРасчета>.<?""Выберите форму"", ВыборВарианта, ""Списка"", ""ФормаСписка"", ""Произвольная"", ""Форма."">"", ПараметрыФормы);
"}
},
{0,
{"Выборка записей регистра расчета",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр расчета"", РегистрРасчета>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
},
{0,
{"Выборка записей регистра расчета (по регистратору)",0,0,"","Выборка = РегистрСведений.<?""Выберите регистр расчета"", РегистрРасчета>.ВыбратьПоРегистратору(<?>);

Пока Выборка.Следующий() Цикл


КонецЦикла;"}
}
}
},
{9,
{"Прочие",1,0,"",""},
{0,
{"Сообщение",0,1,"Сообщ[ение]","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?>"";
Сообщение.Поле = """";
Сообщение.УстановитьДанные();
Сообщение.Сообщить();"}
},
{0,
{"Предупреждение",0,0,"Предупр[еждение]","Предупреждение(<?>);"}
},
{0,
{"Формат",0,0,"Формат","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Форматная строка",0,1,"","""<?, ФорматнаяСтрока>"""}
},
{0,
{"Создать структуру",0,0,"Струк[тура]","Новый Структура(""<?>"", )"}
},
{0,
{"Вопрос",0,0,"Вопр[ос]","Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">)"}
},
{0,
{"Вопрос с анализом результата",0,0,"Вопр[ос]","Вопрос(""<?""Текст вопроса"">"", <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">) = <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут"">"}
},
{0,
{"Проверка типа",0,0,"","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"КонструкторОписанияТипов",0,0,"","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
}
},
{5,
{"Обработка ошибок",1,0,"",""},
{0,
{"Попытка",0,0,"Попы[тка]","Попытка
	<?>
Исключение

КонецПопытки;"}
},
{0,
{"Попытка (Запись в журнал регистрации)",0,0,"Попы[тка]","Попытка
	//...
Исключение
ЗаписьЖурналаРегистрации(НСтр(""ru = 'Выполнение операции'""),
       УровеньЖурналаРегистрации.Ошибка,,,
       ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
ВызватьИсключение;
КонецПопытки;"}
},
{0,
{"Попытка (&НаКлиенте)",0,0,"Попы[тка]","Попытка
    // ...
Исключение
    ПоказатьПредупреждение(,КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПопытки;"}
},
{0,
{"Вызвать исключение",0,0,"Вызв[атьИсключение]","ВызватьИсключение НСтр(""ru='<?""Текст"">'"");<?>"}
},
{0,
{"Вызвать исключение (Подробное представление)",0,0,"Вызв[атьИсключение]","ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());"}
}
}
},
{6,
{"Оформление кода",1,0,"",""},
{6,
{"Директивы / Аннотации",1,0,"",""},
{0,
{"Выбор директивы",0,0,"&","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"&НаКлиенте",0,0,"&[НаКлиенте]","&НаКлиенте"}
},
{0,
{"&НаСервере",0,0,"&[НаСервере]","&НаСервере"}
},
{0,
{"&НаСервереБезКонтекста",0,0,"&[НаСервереБезКонтекста]","&НаСервереБезКонтекста"}
},
{0,
{"&НаКлиентеНаСервереБезКонтекста",0,0,"&[НаКлиентеНаСервереБезКонтекста]","&НаКлиентеНаСервереБезКонтекста"}
},
{0,
{"Аннотации расширения (Перед, После, Вместо, ИзменениеИКонтроль)",0,0,"&","&< """", ВыборВарианта, ""Перед"",""Перед"", ""После"",""После"", ""Вместо"",""Вместо"", ""ИзменениеИКонтроль"",""ИзменениеИКонтроль"">"}
}
},
{8,
{"Оформление кода редактора",1,0,"",""},
{0,
{"Блок описания",0,0,"//[Описание]","//*****************************************************************************
// <?""Краткое описание""><?>
//*****************************************************************************"}
},
{0,
{"Начало комментария",0,0,"//[+]","// +++{ <?"""", ДатаВремя, ""ДЛФ=D""> :: БНВ - <? ""Примечание""><?>"}
},
{0,
{"Закрытие комметария",0,0,"//[-]","// }--- БНВ<?>"}
},
{0,
{"Отчерк ",0,0,"//[*]","<?>//============================================================================="}
},
{0,
{"Описание Функции",0,0,"//[Функция]","// <?""Описание функции"">
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
"}
},
{0,
{"Описание Процедуры",0,0,"//[Процедура]","// <?""Описание процедуры"">
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
"}
},
{0,
{"Устаревшая конструкция",0,0,"//[Устарело]","// Устарела. Следует использовать новую см. <?""Ссылка на новую Функцию/Процедуру"">"}
},
{0,
{"Удалить замененный код",0,0,"//[!]","// Ремарки можно удалить :: <?"""", ДатаВремя, ""ДЛФ=D""> :: БНВ - Протестировано"}
}
},
{9,
{"Структура модулей",1,0,"",""},
{0,
{"Определение области",0,0,"#[Область]","#Область <? ""Имя области (без пробелов)"">
	
#КонецОбласти"}
},
{0,
{"Модуль формы",0,0,"#[Область]","///////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти"}
},
{0,
{"Модуль объекта",0,0,"#[Область]","///////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
///////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиПроведения

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти


"}
},
{0,
{"Модуль менеджера",0,0,"#[Область]","///////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
///////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли
"}
},
{0,
{"Область переменных",0,0,"#[Область]","#Область ОписаниеПеременных

#КонецОбласти"}
},
{0,
{"Область инициализация",0,0,"#[Область]","#Область Инициализация

#КонецОбласти"}
},
{0,
{"Общий модуль",0,0,"#[Область]","///////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
///////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти"}
},
{0,
{"Модуль команд",0,0,"#[Область]","///////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти"}
},
{0,
{"Модуль бизнес-процесса",0,0,"#[Область]","///////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийКартыМаршрута

#КонецОбласти

#Область ОбработчикиСобытийМодуля

#КонецОбласти

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
}
},
{4,
{"Управление компиляцией",1,0,"",""},
{0,
{"#Если (Выбор предпроцессора)",0,0,"#[Если]","#Если <?""Выберите инструкцию препроцессора"", ВыборВарианта, ""Сервер"",""Сервер"", ""Клиент"",""Клиент"", ""ТонкийКлиент"",""ТонкийКлиент"", ""ВебКлиент"",""ВебКлиент"", ""ВнешнееСоединение"",""ВнешнееСоединение"", ""ТолстыйКлиентУправляемоеПриложение"",""ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентОбычноеПриложение"",""ТолстыйКлиентОбычноеПриложение""> Тогда
	<?>
#КонецЕсли"}
},
{0,
{"#Если (Сервер)",0,0,"#[Если]","#Если Сервер Тогда
	<?>
#КонецЕсли"}
},
{0,
{"#Если (Клиент)",0,0,"#[Если]","#Если Клиент Тогда
	<?>
#КонецЕсли"}
},
{3,
{"ОшибкиВызоваМодулей",1,0,"",""},
{0,
{"МодульОбъекта (Обрамление ошибок вызова)",0,0,"#[МодульОбъекта]","// Методическая информация: https://its.1c.ru/db/v8std/content/680/hdoc
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
  // Необходимый вызов общего модуля
#КонецЕсли"}
},
{0,
{"МодульСеанса (Обрамление ошибок вызова)",0,0,"#[МодульСеанса]","// Методическая информация: https://its.1c.ru/db/v8std/content/680/hdoc
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
  // Необходимый вызов общего модуля
#КонецЕсли"}
},
{0,
{"МодульКлиента (Обрамление ошибок вызова)",0,0,"#[МодульКлиента]","// Методическая информация: https://its.1c.ru/db/v8std/content/680/hdoc
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
  // Необходимый вызов общего модуля
#КонецЕсли"}
}
}
},
{2,
{"Не использовать (но если очень хочется, то не стоит)",1,0,"",""},
{0,
{"Безусловный переход",0,0,"~","~<? ""Имя метки (без пробелов)"">"}
},
{0,
{"Перейти на метку",0,0,"Перейти","Перейти ~<? ""Имя метки"">"}
}
},
{2,
{"ИзменениеИКонтроль",1,0,"",""},
{0,
{"ИзменениеИКонтроль - Удаление кода",0,0,"#[Удаление]","#Удаление

#КонецУдаления "}
},
{0,
{"ИзменениеИКонтроль - Вставка кода",0,0,"#[Вставка]","#Вставка

#КонецВставки"}
}
}
},
{15,
{"Коллекции значений",1,0,"",""},
{32,
{"Даты",1,0,"",""},
{0,
{"Пустая дата",0,0,"Дата","Дата(1, 1, 1)"}
},
{0,
{"Текущая дата",0,0,"Дата","ТекущаяДата()"}
},
{0,
{"Текущая дата сеанса",0,0,"Дата","ТекущаяДатаСеанса()"}
},
{0,
{"Текущая дата в милисекундах",0,0,"Дата","ТекущаяУниверсальнаяДатаВМиллисекундах()<?>"}
},
{0,
{"Граница",0,0,"Дата","ГраницаВремени = Новый Граница(ТекущаяДата(), ВидГраницы.Включая);"}
},
{0,
{"День начало",0,0,"Дата","НачалоДня(<?>)"}
},
{0,
{"День конец",0,0,"Дата","КонецДня(<?>)"}
},
{0,
{"Месяц начало",0,0,"Дата","НачалоМесяца(<?>)"}
},
{0,
{"Месяц конец",0,0,"Дата","КонецМесяца(<?>)"}
},
{0,
{"Добавить месяц",0,0,"Дата","ДобавитьМесяц(<?>,)"}
},
{0,
{"Момент времени",0,0,"Дата","МоментВремени()"}
},
{0,
{"Год",0,0,"Дата","Год(<?""Дата"">)"}
},
{0,
{"Месяц",0,0,"Дата","Месяц(<?""Дата"">)"}
},
{0,
{"День",0,0,"Дата","День(<?""Дата"">)"}
},
{0,
{"Час",0,0,"Дата","Час(<?""Дата"">)"}
},
{0,
{"Минута",0,0,"Дата","Минута(<?""Дата"">)"}
},
{0,
{"Секунда",0,0,"Дата","Секунда(<?""Дата"">)"}
},
{0,
{"ДеньГода",0,0,"Дата","ДеньГода(<?""Дата"">)"}
},
{0,
{"ДеньНедели",0,0,"Дата","ДеньНедели(<?""Дата"">)"}
},
{0,
{"НеделяГода",0,0,"Дата","НеделяГода(<?""Дата"">)"}
},
{0,
{"Начало года",0,0,"Дата","НачалоГода(<?""Дата"">)"}
},
{0,
{"Конец года",0,0,"Дата","КонецГода(<?""Дата"">)"}
},
{0,
{"НачалоКвартала(МояДата)",0,0,"Дата","НачалоКвартала(<?""Дата"">)"}
},
{0,
{"КонецКвартала(МояДата)",0,0,"Дата"," КонецКвартала(<?""Дата"">)"}
},
{0,
{"НачалоНедели(МояДата)",0,0,"Дата","НачалоНедели(<?""Дата"">)"}
},
{0,
{"КонецНедели(МояДата)",0,0,"Дата","КонецНедели(<?""Дата"">)"}
},
{0,
{"НачалоЧаса(МояДата)",0,0,"Дата","НачалоЧаса(<?""Дата"">)"}
},
{0,
{"КонецЧаса(МояДата)",0,0,"Дата","КонецЧаса(<?""Дата"">)"}
},
{0,
{"НачалоМинуты(МояДата)",0,0,"Дата","НачалоМинуты(<?""Дата"">)"}
},
{0,
{"КонецМинуты(МояДата)",0,0,"Дата","КонецМинуты(<?""Дата"">)"}
},
{0,
{"[Функция] - Добавить к дате",0,0,"Дата","Функция ДобавитьКДате(Знач Дата, Знач Количество, Знач Период) Экспорт 
		
	Шаг = Новый Структура(""Год, Квартал, Месяц, Неделя, День, Час, Минута, Секунда""
						, 12, 3, 1, -604800, -86400, -3600, -60, -1);
	Возврат ?(Шаг[Период] > 0, ДобавитьМесяц(Дата, Количество * Шаг[Период])
							, Дата - Количество * Шаг[Период]);
		
КонецФункции // -- ДобавитьКДате()
"}
},
{0,
{"[Функция] - Сумма дат",0,0,"Дата","Функция СуммаДат(Дата1, Дата2)
	Возврат Дата1 + (Дата2 - Дата(1, 1, 1));
КонецФункции // -- СуммаДат()
"}
}
},
{5,
{"Дерево значений",1,0,"",""},
{0,
{"ДеревоЗначений",0,0,"Дерево[Значений]","ДеревоЗначений = Новый ДеревоЗначений;"}
},
{0,
{"[Функция] ДеревоЗначений в ТаблицуЗначений",0,0,"Дерево[Значений]","&НаСервере
Функция ДеревоЗначенийВТаблицуЗначений(Знач ДеревоЗначений)
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	//заполним колонки;
	Для каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ТаблицаТоваров.Колонки.Добавить(Колонка.Имя); 
	КонецЦикла;
	
	//произведем вызов вспомогательной рекурсивной функции;
	Для каждого Строка Из ДеревоЗначений.Строки Цикл
		РекурсивноеЗаполнениеТаблицыЗначений(ТаблицаТоваров, Строка);
	КонецЦикла;   
		
	Возврат ТаблицаТоваров;
	
КонецФункции // ()

&НаСервере
Процедура РекурсивноеЗаполнениеТаблицыЗначений(ТаблицаЗначений, СтрокаДерева)
	
	//условие выхода из рекурсии;
	Если СтрокаДерева.Строки.Количество () = 0 Тогда
		Возврат;
	КонецЕсли;  
	
	Для каждого Строка Из СтрокаДерева.Строки Цикл
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			НоваяСтрока[Колонка.Имя] = Строка[Колонка.Имя];
		КонецЦикла;
		
		РекурсивноеЗаполнениеТаблицыЗначений(ТаблицаЗначений, Строка);   
		
	КонецЦикла;
	
КонецПроцедуры // ()"}
},
{0,
{"[Процедура] - Найти строку дерева (Клиент)",0,0,"Дерево[Значений]","&НаКлиенте
Процедура НайтиСтрокуДерева(КоллекцияЭлементовДерева, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск = Ложь)

    Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
        Если ПрекратитьПоиск Тогда
            Возврат;
        КонецЕсли;

        Если СтрокаДерева = ТекущиеДанные Тогда
            ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
            ПрекратитьПоиск = Истина;
            Возврат;
        КонецЕсли;

        КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();

        Если КоллекцияЭлементов.Количество() > 0 Тогда
            НайтиСтрокуДерева(КоллекцияЭлементов, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск);
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры	
"}
},
{0,
{"[Процедура] - Дерево в таблицу",0,0,"Дерево[Значений]","&НаСервере
Процедура ДеревоВТаблицу(ОсновнойОбъект, ДеревоЗначений, КлючСвязи = 0) 
		
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		НоваяСтрока = ОсновнойОбъект.GB_УполномоченныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока.КлючСвязи = КлючСвязи;
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДеревоВТаблицу(ОсновнойОбъект, СтрокаДерева, НоваяСтрока.НомерСтроки);
		КонецЕсли;
	КонецЦикла;	
			
КонецПроцедуры"}
},
{0,
{"[Процедура] - Таблица значений в Дерево",0,0,"Дерево[Значений]","&НаСервере
Процедура ТаблицаЗначенийВДерево(ДеревоЗначений, КлючСвязи = 0) 
		
	Фильтр = Новый Структура;
	Фильтр.Вставить(""КлючСвязи"", КлючСвязи);
	НайденныеСтроки = Объект.GB_УполномоченныеЛица.НайтиСтроки(Фильтр);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		ЭлементДерева = ДеревоЗначений.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементДерева, СтрокаТаблицы);
		ТаблицаЗначенийВДерево(ЭлементДерева, СтрокаТаблицы.НомерСтроки);
	КонецЦикла;
					
КонецПроцедуры
"}
}
},
{2,
{"ДинамическийСписок",1,0,"",""},
{0,
{"Отбор в динамическом списке",0,0,"Динам[ическийСписокОтбор]","ОтборХарактеристик = ЭтаФорма.<ДинамическийСписокФормы>.Отбор.Элементы;
ОтборХарактеристик.Очистить(); // предварительно убираем все отборы
Отбор = ОтборХарактеристик.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.<? ""Вариант сравнения: "", ВыборВарианта, ""Равно"",""Равно"", ""Больше"",""Больше"", ""БольшеИлиРавно"",""БольшеИлиРавно"", ""ВИерархии"",""ВИерархии"", ""ВСписке"",""ВСписке"", ""ВСпискеПоИерархии"",""ВСпискеПоИерархии"", ""Заполнено"",""Заполнено"", ""Меньше"",""Меньше"", ""МеньшеИлиРавно"",""МеньшеИлиРавно"", ""НачинаетсяС"",""НачинаетсяС"", ""НеВИерархии"",""НеВИерархии"", ""НеВСпискеПоИерархии"",""НеВСпискеПоИерархии"", ""НеЗаполнено"",""НеЗаполнено"", ""НеНачинаетсяС"",""НеНачинаетсяС"", ""НеПодобно"",""НеПодобно"", ""НеРавно"",""НеРавно"", ""НеСодержит"",""НеСодержит"", ""Подобно"",""Подобно"", ""Содержит"",""Содержит"">;
Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""<Имя реквизита элемента>"");
Отбор.ПравоеЗначение = <Значение> // Значение с чем сравниваем;
Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.<? ""Режим отображения: "", ВыборВарианта, ""Недоступный"",""Недоступный"", ""Авто"",""Авто"", ""БыстрыйДоступ"",""БыстрыйДоступ"", ""Обычный"",""Обычный"">;
Отбор.Использование = Истина;"}
},
{0,
{"Задать параметр динамического списка",0,0,"Динам[ическийСписокПараметр]","<? ""Имя динамического списка: "">.Параметры.УстановитьЗначениеПараметра(""<? ""Имя параметра: "">"", <? ""Значение: "">)"}
}
},
{4,
{"Константы",1,0,"",""},
{0,
{"Получить/установить константу",0,0,"Конст[анты]","Константы.<?"""", Константа>.<?""Выбор метода"", ВыборВарианта, ""Получить"", ""Получить"", ""Установить"", ""Установить"">()"}
},
{0,
{"Получить константу",0,0,"Конст[антыПолучить]","Константы.<?"""", Константа>.Получить()"}
},
{0,
{"Установить константу",0,0,"Конст[антыУстановить]","Константы.<?"""", Константа>.Установить(<?>);"}
},
{0,
{"Получить значения всех констант",0,0,"Конст[антыПребрать]","Для Каждого Константа Из Константы Цикл
	Ключ = Константа;
	Значение = Константа.Получить();
КонецЦикла;"}
}
},
{10,
{"Массив",1,0,"",""},
{0,
{"Массив (новый)",0,0,"Массив","Массив = Новый Массив();"}
},
{0,
{"Массив (определенной длинны)",0,0,"Массив","Массив = Новый Массив(<? ""Укажите длинну"">);"}
},
{0,
{"Фиксированный массив",0,0,"Массив[Фиксированный]","Новый ФиксированныйМассив(<?""Имя массива"">)"}
},
{0,
{"Массив в список значений",0,0,"Массив[ВСписокЗначений]","МассивВСписокЗначений = Новый СписокЗначений;
МассивВСписокЗначений.ЗагрузитьЗначения(<? ""Имя массива"">);"}
},
{0,
{"[Функция] - Массив структур в ТаблицуЗначений",0,0,"Массив[СтруктурВТаблицуЗначений]","&НаСервереБезКонтекста
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) 
    
    тзДанные = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из мсДанные Цикл
		
		Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции"}
},
{0,
{"[Функция] - Только уникальные значения массива",0,0,"Массив","Функция УникальныеЗначенияМассива(Знач ОбрабатываемыйМассив)
	
	ЕстьВМассиве = Новый Соответствие;
	ИндексЭлемента = 0;
	КоличествоЭлементов = ОбрабатываемыйМассив.Количество();
	Пока ИндексЭлемента < КоличествоЭлементов Цикл
		ЭлементМассива = ОбрабатываемыйМассив[ИндексЭлемента];
		Если ЭлементМассива = Неопределено Или ЕстьВМассиве[ЭлементМассива] = Истина Тогда      
			ОбрабатываемыйМассив.Удалить(ИндексЭлемента);
			КоличествоЭлементов = КоличествоЭлементов - 1;
		Иначе   
			ЕстьВМассиве.Вставить(ЭлементМассива, Истина);
			ИндексЭлемента = ИндексЭлемента + 1;
		КонецЕсли;
	КонецЦикла;

	Возврат ОбрабатываемыйМассив;
	
КонецФункции // -- УникальныеЗначенияМассива()"}
},
{0,
{"[Функция] - Удалить повторяющиеся элементы",0,0,"Массив[УдалитьПовторяющиеся]","Функция УдалитьПовторяющиесяЭлементыМассива(Массив) Экспорт 
	
	ТекущийИндекс = 0; 
	ВсегоЭлементов = Массив.Количество(); 
	Пока ТекущийИндекс < ВсегоЭлементов Цикл 
		Индекс2 = ТекущийИндекс + 1; 
		Пока Индекс2 < ВсегоЭлементов Цикл 
			Если Массив[Индекс2] = Массив[ТекущийИндекс] Тогда 
				Массив.Удалить(Индекс2); 
				ВсегоЭлементов = ВсегоЭлементов - 1; 
			Иначе 
				Индекс2 = Индекс2 + 1; 
			КонецЕсли; 
		КонецЦикла; 
		ТекущийИндекс = ТекущийИндекс + 1; 
	КонецЦикла; 
	Возврат Массив; 
	
КонецФункции    
"}
},
{0,
{"[Функция] - Распределение пропорционально",0,0,"Массив","// Функция выполняет пропорциональное распределение суммы в соответствии с заданными коэффициентами распределения
//
// Параметры:
//		ИсхСумма - распределяемая сумма
//		МассивКоэф - массив коэффициентов распределения
//		Точность - точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2)
	
	Если МассивКоэф.Количество() = 0 Или ИсхСумма = 0 Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		
		МодульЧисла = ?(МассивКоэф[К] > 0, МассивКоэф[К], - МассивКоэф[К]);
		
		Если МаксЗнач < МодульЧисла Тогда
			МаксЗнач = МодульЧисла;
			ИндексМакс = К;
		КонецЕсли;
		
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
		
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСумм = Новый Массив(МассивКоэф.Количество());
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		МассивСумм[К] = Окр(ИсхСумма * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		РаспрСумма = РаспрСумма + МассивСумм[К];
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффиецент с максимальным весом
	Если Не РаспрСумма = ИсхСумма Тогда
		МассивСумм[ИндексМакс] = МассивСумм[ИндексМакс] + ИсхСумма - РаспрСумма;
	КонецЕсли;
	
	Возврат МассивСумм;
	
КонецФункции
"}
},
{0,
{"[Функция] - Отсортировать массив",0,0,"Массив","Функция ОтсортированныйМассив(Массив, Направление = Неопределено) Экспорт
	
	Направление = ?(Направление = Неопределено, НаправлениеСортировки.Возр, Направление);
	
	РезультатФункции = Новый СписокЗначений;
	РезультатФункции.ЗагрузитьЗначения(Массив);
	РезультатФункции.СортироватьПоЗначению(Направление);
		
	Возврат РезультатФункции.ВыгрузитьЗначения();
	
КонецФункции // -- ОтсортированныйМассив()
"}
},
{0,
{"[Функция] - Задача",0,0,"","Функция ТриМаксимальныхЧисла(Знач Массив, ЗаданноеЧисло)
	
		СписокДляСортировки = Новый СписокЗначений;
		СписокДляСортировки.ЗагрузитьЗначения(Массив);
		СписокДляСортировки.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Массив = СписокДляСортировки.ВыгрузитьЗначения();
		
		Для i = 0 По Массив.ВГраница() Цикл
			Для j = i + 1 По Массив.ВГраница() Цикл
				Для k = j + 1 По Массив.ВГраница() Цикл
					РасчетноеЧисло = Массив[i] + Массив[k] + Массив[j];
					Если РасчетноеЧисло <= ЗаданноеЧисло Тогда 
						Возврат СтрШаблон(""%1 %2 %3"", Массив[k], Массив[j], Массив[i]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Возврат ""не определено"";
	
КонецФункции"}
}
},
{6,
{"Перечисление",1,0,"",""},
{0,
{"Перечисления",0,0,"Переч[исления]","Перечисления.<? """", ЗначениеПеречисления>"}
},
{0,
{"Предопределенное значение",0,0,"Пред[определенноеЗначение]","ПредопределенноеЗначение(""Перечисление.<? """", ЗначениеПеречисления>."")"}
},
{0,
{"Перечисления (БСП)",0,0,"Переч[исления]","ОбщегоНазначения.ПредопределенныйЭлемент(""Перечисление.<? """", ЗначениеПеречисления>"")"}
},
{0,
{"Получить имя значения перечисления",0,0,"Переч[ислениеИмя]","ЗначениеПеречисления = Перечисления.<? """", ЗначениеПеречисления>;
ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;"}
},
{0,
{"Обход перечисления в цикле",0,0,"","Для Каждого Элемент Из <? ""Перечесление"", Перечисление> Цикл
	// Элемент
КонецЦикла;"}
},
{0,
{"Перечисление в Структуру",0,0,"Переч[ислениеВСтруктуру]","СоотвПеречисления = Новый Соответствие;
ОбъектПеречисления = Перечисления.<? ""Имя перечисления"">;
Для Сч = 0 По ОбъектПеречисления.Количество() - 1 Цикл
	ЗначПеречисл = Метаданные.Перечисления.<? ""Имя перечисления"">.ЗначенияПеречисления[Сч];
	СоотвПеречисления.Вставить(ЗначениеПеречисления.Синоним, ЗначПеречисл);
КонецЦикла;	
"}
}
},
{5,
{"Соответствие",1,0,"",""},
{0,
{"Новый Соответствие",0,0,"Соотв[етствие]","<? ""Имя соответствия""> = Новый Соответствие;"}
},
{0,
{"Существует свойство",0,0,"Соотв[етствие]","Если <? ""Имя соответствия"">.Получить(<? ""Ключ"">) = Неопределено Тогда
	// 
КонецЕсли;"}
},
{0,
{"Удалить элемент соответствия",0,0,"Соотв[етствие]","<? ""Имя соответствия"">.Удалить(<? ""Ключ"">)"}
},
{0,
{"Очистить соответствие",0,0,"Соотв[етствие]","<? ""Имя соответствия"">.Очистить()"}
},
{0,
{"Обход соответствие в цикле",0,0,"Соотв[етствие]","Для Каждого Элемент Из <? ""Имя соответствия""> Цикл
	// Элемент.Ключ
	// Элемент.Значение
КонецЦикла;"}
}
},
{8,
{"Список значений",1,0,"",""},
{0,
{"Новый СписокЗначений",0,0,"Список[Значений]","СписокЗначений = Новый СписокЗначений;"}
},
{0,
{"Найти элемент списка",0,0,"Список[Значений]","<? ""Имя списка значений"">.НайтиПоЗначению(<? ""Значение"">)"}
},
{0,
{"Получить индекс элемента",0,0,"Список[Значений]","<? ""Имя списка значений"">.Индекс(<? ""Значение"">)"}
},
{0,
{"Сортировать список значений",0,0,"Список[Значений]","<? ""Имя списка значений"">.СортироватьПоЗначению(НаправлениеСортировки.<? ""Направление"", ВыборВарианта, ""Возрастание"",""Возр"", ""Убывание"",""Убыв"">);"}
},
{0,
{"Очистить список значений",0,0,"Список[Значений]","<? ""Имя списка значений"">.Очистить()"}
},
{0,
{"Удаление элементов списка (цикл)",0,0,"Список[Значений]","// Обход списка с конца, так как при удалении элементы сдвигаются к началу
КоличествоСтрок = <? ""ИмяСписка"">.Количество();
Для Сч = 1 По КоличествоСтрок  Цикл
	ТекСтрока = <? ""ИмяСписка"">[КоличествоСтрок - Сч];
	// Условие удаления
	<? ""ИмяСписка"">.Удалить(ТекСтрока);
КонецЦикла;
"}
},
{0,
{"Значения списка в массив",0,0,"Список[Значений]","Массив = <? ""Имя списка значений"">.ВыгрузитьЗначения()"}
},
{0,
{"Загрузить значения списка из массива",0,0,"Список[Значений]","<? ""Имя списка значений"">.ЗагрузитьЗначения(Массив);"}
}
},
{33,
{"Строки",1,0,"",""},
{0,
{"Получить N количество символов СЛЕВА",0,0,"Лев","Лев(<? ""Строковая переменная"">, <? ""Количество символов"">)"}
},
{0,
{"Получить N количество символов СПРАВА",0,0,"Прав","Прав(<? ""Строковая переменная"">, <? ""Количество символов"">)"}
},
{0,
{"Получить N количество символов СЕРЕДИНА",0,0,"Сред","Сред(<? ""Строковая переменная"">, <? ""Начиная с"">, <? ""Количество символов"">)"}
},
{0,
{"Найти подстроку в строке",0,0,"Стр[Найти]","СтрНайти(<? ""Имя строки поиска"">, ""<? ""Строка поиска"">"")"}
},
{0,
{"Заменить подстроку в строке",0,0,"Стр[Заменить]","СтрЗаменить(<? ""Строка"">, <? ""Подстрока поиска"">, <? ""Подстрока замены"">)"}
},
{0,
{"Подсчет числа вхлждения в строку",0,0,"Стр[ЧислоВхождений]","СтрЧислоВхождений(<? ""Имя переменной"">, <? ""Подстрока"">)"}
},
{0,
{"Убрать пустые символы СЛЕВА",0,0,"Сокр[Л]","СокрЛ(<? ""Строка"">)"}
},
{0,
{"Убрать пустые символы СПРАВА",0,0,"Сокр[П]","СокрП(<? ""Строка"">)"}
},
{0,
{"Убрать пустые символы СЛЕВА и СПРАВА",0,0,"Сокр[ЛП]","СокрЛП(<? ""Строка"">)"}
},
{0,
{"Строку в верхних регистр",0,0,"ВРег","ВРег(<? ""Строка"">)"}
},
{0,
{"Строку в нижний регистр",0,0,"НРег","НРег(<? ""Строка"">)"}
},
{0,
{"Строку в титульный регистр",0,0,"ТРег","ТРег(<? ""Строка"">)"}
},
{0,
{"НСтр",0,0,"НСтр","НСтр(""ru='Текст написан для примера.';""
	+ ""en='The text is written for an example.'""
	, <?""Код языка"">)"}
},
{0,
{"Получить код символа",0,0,"КодСимвола","КодСимвола(""<? ""Символ"">"")"}
},
{0,
{"Получить символ из кода",0,0,"Символ","Символ(<? ""Код символа"">)"}
},
{0,
{"Только цифры в строке (БСП)",0,0,"Стр[ИзЦифр]","СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(<? ""Строка"">)"}
},
{0,
{"Строка в число (БСП)",0,0,"Стр[ВЧисло]","СтроковыеФункцииКлиентСервер.СтрокаВЧисло(<? ""Строка"">)"}
},
{0,
{"Удаление лидирующих символов (БСП)",0,0,"Стр[УдалениеЛидирующих]","СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(<? ""Имя строки"">, ""<? ""Символ удаления"">"")"}
},
{0,
{"Строка латиницей (БСП)",0,0,"Стр[Латиницей]","СтроковыеФункцииКлиент.СтрокаЛатиницей(<? ""Имя строки"">)"}
},
{0,
{"Подсчет количества строк",0,0,"Стр[ЧислоСтрок]","СтрЧислоСтрок(<? ""Строка"">)"}
},
{0,
{"Получить строку по номеру",0,0,"Стр[ПолучитьСтроку]","СтрПолучитьСтроку(<? ""Строка"">, <? ""Номер строки"">) "}
},
{0,
{"Строка в массив (СтрРазделить)",0,0,"Стр[Разделить]","СтрРазделить(<? ""Строка"">, ""<? ""Разделитель"">"")"}
},
{0,
{"Проверка пустая строка",0,0,"Пустая[Строка]","Если ПустаяСтрока(<? ""Строка проверки"">) Тогда
	//
КонецЕсли;"}
},
{0,
{"Склонение по падежам (платформа)",0,0,"Стр[Падежи]","ПолучитьСклоненияСтроки(<? ""Имя переменной"">, ""<? ""Пол"", ВыборВарианта, ""Не использовать"","""", ""Мужской"",""Л=ru_RU;ПЛ=Мужской"", ""Женский"",""Л=ru_RU;ПЛ=Женский"">"", СтрШаблон(""ПД=%1"", ""<? ""Падеж"", ВыборВарианта, ""Именительный"",""Именительный"", ""Родительный"",""Родительный"", ""Дательный"",""Дательный"", ""Винительный"",""Винительный"", ""Творительный"",""Творительный"", ""Предложный"",""Предложный"">""))[0]"}
},
{0,
{"Сериализовать значение в строку",0,0,"Знач[ениеВСтрокуВнутр]","ЗначениеВСтрокуВнутр(<? ""Массив"">)"}
},
{0,
{"Десериализовать значение из строки",0,0,"ЗначениеИзСтрокиВнутр","ЗначениеИзСтрокиВнутр(<? ""Строка"">)"}
},
{0,
{"Добавление лидирующих нулей",0,0,"Строка","Прав(""00000"" + ""10Р"", 5) "}
},
{0,
{"[Функция] - Строка в число",0,0,"Строка[ВЧисло]","// функция преобразует строку в число, примеры:
// 315 руб. = 315
// 1 007,30 м2 (квадратный метр) = 1007,3
// -12.5% = -12,5
// ,05 = 0,05
// пустая строка или пробелы = 0
Функция СтрокаВЧисло(Знач СтрокаЧисло) Экспорт
	
	Результат = """";
	Для Индекс = 1 По СтрДлина(СтрокаЧисло) Цикл
		Символ = Сред(СтрокаЧисло, Индекс, 1);
		КодСимвола = КодСимвола(Символ);
		Если ((КодСимвола >= 48 И КодСимвола <= 57) Или (Символ = ""-"" И Индекс = 1) Или (Символ = "","") Или (Символ = ""."") Или (Символ = "" "") Или (КодСимвола = 160)) Тогда
			Если КодСимвола <> 32 И КодСимвола <> 160 Тогда
				Результат = Результат + Символ;
			КонецЕсли; 
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Результат);
	
	Возврат Результат;
	
КонецФункции"}
},
{0,
{"[Функция] - Строка в дату",0,0,"Строка[ВДату]","Функция СтрокуВДату(Знач ДатаСтрокой)

	Массив = СтрРазделить(ДатаСтрокой, ""0123456789"", Ложь);
	Для Каждого Элемент из Массив Цикл 
	    ДатаСтрокой = СтрЗаменить(ДатаСтрокой, Элемент, """");
	КонецЦикла;
	
	Возврат Дата( ДатаСтрокой );

КонецФункции"}
},
{0,
{"[Функция] - Строка в число",0,0,"Строка[ВЧисло]","Функция СтрокуВЧисло(Знач ЧислоСтрокой)
	
	Массив = СтрРазделить(ЧислоСтрокой, ""0123456789"", Ложь);
    Для Каждого Элемент из Массив Цикл 
        ЧислоСтрокой = СтрЗаменить(ЧислоСтрокой, Элемент, """");
    КонецЦикла;
    
    Возврат ?(ПустаяСтрока(ЧислоСтрокой), Неопределено, Число( ЧислоСтрокой ));
	
КонецФункции"}
},
{0,
{"[Функция] - Проверка строки RegExp (через ФабрикаXDTO)",0,0,"Строка[RegExp]","//Итак, самое простое, что нужно, чтобы освоить шаблоны проверки:
//	. - любой символ
//	+ - один или более раз, пример "".+"" - один или более любой символ.
//	* - ноль или более раз, пример "".*"" - любое количество любых символов (даже ни одного).
//	[n-m] - символ от m до n, пример: ""[0-9]+"" - одна или более цифр(а).
//	\d - цифра, пример \d+ - одна или более цифр(а).
//	\D - не цифра.
//	\s - пробельный символ - ТАБ, пробел, перенос строки, возврат каретки и т.п.
//	\S - непробельный символ.
//	\w - буква, цифра, подчеркивание.
//	\W - не буква, не цифра и не подчеркивание соответственно.
//	^ - начало текста, например ""^\d+"" - строка начинается с цифры.
//	$ - конец текста, например ""\D+$"" - строка заканчивается НЕ цифрой.
//	{m,n} - шаблон для от m до n символов, например ""\d{2,4}"" - от двух до четырех цифр. Можно указать одну и всего цифру для строгого соответвия.
//	\ - экранирует спецсимволы. Например, ""\."" - символ точки.
// Пример: Сообщить(ПроверитьСтрокуRegExp(""01.01.2012"",""\d{2}\.\d{2}\.\d{4}""));
Функция ПроверитьСтрокуRegExp(Строка, Фасет) Экспорт 
	
    Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                ""<Model xmlns=""""http://v8.1c.ru/8.1/xdto"""" xmlns:xs=""""http://www.w3.org/2001/XMLSchema"""" xmlns:xsi=""""http://www.w3.org/2001/XMLSchema-instance"""" xsi:type=""""Model"""">
                |<package targetNamespace=""""sample-my-package"""">
                |<valueType name=""""testtypes"""" base=""""xs:string"""">
                |<pattern>"" + Фасет + ""</pattern>
                |</valueType>
                |<objectType name=""""TestObj"""">
                |<property xmlns:d4p1=""""sample-my-package"""" name=""""TestItem"""" type=""""d4p1:testtypes""""/>
                |</objectType>
                |</package>
                |</Model>"");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить(""sample-my-package"");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить(""TestObj""));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
    
КонецФункции"}
},
{0,
{"[Функция] - Раскодировать строку (oem866 -> c1251)",0,0,"Строка[Кодировака_oem866_to_w1251]","&НаСервере
Функция КодировкаOEM866вW1251(Знач Строка)

	СтрокаURL = КодироватьСтроку(Строка, СпособКодированияСтроки.URLВКодировкеURL, ""cp866"");
	Строка = РаскодироватьСтроку(СтрокаURL, СпособКодированияСтроки.URLВКодировкеURL, ""cp1251"");
	
	Возврат Строка;

КонецФункции // КодировкаW1251вOEM866()
"}
},
{0,
{"[Функция] - Раскодировать строку (c1251 -> oem866)",0,0,"Строка[Кодировака_w1251_to_oem866]","&НаСервере
Функция КодировкаW1251вOEM866(Знач Строка)

	СтрокаURL = КодироватьСтроку(Строка, СпособКодированияСтроки.URLВКодировкеURL, ""cp1251"");
	Строка = РаскодироватьСтроку(СтрокаURL, СпособКодированияСтроки.URLВКодировкеURL, ""cp866"");
	
	Возврат Строка;

КонецФункции // КодировкаW1251вOEM866()
"}
}
},
{4,
{"Структура",1,0,"",""},
{0,
{"Структура новая",0,0,"Струк[тура]","<? ""Имя структуры""> = Новый Структура;"}
},
{0,
{"Ключ структуры существет",0,0,"Струк[тураКлючСуществует]","<? ""Имя структуры"">.Свойство(""<? ""Имя ключа"">"")"}
},
{0,
{"[Процедура] - Дополнить структуру",0,0,"Струк[тураДополнить]","Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено) Экспорт
	
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник.Свойство(Элемент.Ключ) Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтрШаблон(""Пересечение ключей источника и приемника: """"%1"""".""), Элемент.Ключ);
			КонецЕсли
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"[Процедура] - Очистить Структуру от значений",0,0,"Струк[тураОчиститьЗначения]","Процедура ОчиститьЗначенияСтруктуры(Структура) Экспорт
	
	Для Каждого Свойство Из Структура Цикл
		Структура[Свойство.Ключ] = Неопределено; 
	КонецЦикла;
	
КонецПроцедуры"}
}
},
{12,
{"Таблица значений",1,0,"",""},
{0,
{"ТаблицаЗначений (Новая)",0,0,"Таб[лицаЗначений]","ТаблицаЗначений = Новый ТаблицаЗначений;"}
},
{0,
{"Найти строки",0,0,"Таб[лицаЗначений]","ПараметрыОтбора = Новый Структура;
ПараметрыОтбора.Вставить(""<? ""Имя колонки"">"", <? ""Значение отбора"">);
МассивНайденныхСтрок = <? ""Имя таблицы"">.НайтиСтроки(ПараметрыОтбора);
"}
},
{0,
{"Удаление колонки",0,0,"Таб[лицаЗначений]","<? ""Имя ТаблицыЗначений"">.Колонки.Удалить(""<? ""Имя колонки"">"");"}
},
{0,
{"Удаление строки",0,0,"Таб[лицаЗначений]","<? ""Имя ТаблицыЗначений"">.Удалить(<? ""Имя ТаблицыЗначений"">.Индекс(<СтрокаТЗ>));"}
},
{0,
{"Сравнение ТаблицЗначений",0,0,"Таб[лицаЗначенийСравнить]","// Предварительно надо отсортировать обе таблицы по одному и тому же уникальному ключу
СтрВнутр_СтараяТЗ = ЗначениеВСтрокуВнутр(тзСтарыеПартииГТД.Скопировать());
СтрВнутр_НоваяТЗ  = ЗначениеВСтрокуВнутр(тзНовыеПартииГТД.Скопировать());

Если СтрВнутр_СтараяТЗ <> СтрВнутр_НоваяТЗ Тогда
КонецЕсли;"}
},
{0,
{"Свернуть колонку ТЗ в массив",0,0,"","Массив = <?""Имя исходной таблицы значений"">.Скопировать(, <?""Имя колонки"">);
Массив.Свернуть(<?""Имя колонки"">, );
Массив = Массив.ВыгрузитьКолонку(<?""Имя колонки"">);
"}
},
{0,
{"[Функция] - Проверка наличия колонки",0,0,"Таб[лицаЗначений]","Функция ЕстьЛиКолонкаВСтрокеТЗ(ИмяКолонки, СтрокаТаблицыЗначений)

	УИД = Новый УникальныйИдентификатор(); 
	ВременнаяСтруктура = Новый Структура(ИмяКолонки, УИД); 
	ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, СтрокаТаблицыЗначений); 
	
	Возврат ВременнаяСтруктура[ИмяКолонки] <> УИД;
	
КонецФункции

"}
},
{0,
{"[Функция] - Транспонировать",0,0,"Таб[лицаЗначений]","Функция ТранспонироватьТЗ(ТЗ) Экспорт
   
	ТЗ2 = Новый ТаблицаЗначений;
	Массив = ТЗ.ВыгрузитьКолонку(ТЗ.Колонки[0]); // первая колонка содержит названия новых колонок
	ТЗ2.Колонки.Добавить(ТЗ.Колонки[0].Имя); // старые названия колонок сохраним в первой колонке
	
	Для Каждого Значения из Массив Цикл
		ТЗ2.Колонки.Добавить(СокрЛП(Значения));
	КонецЦикла;
	
	Для Сч = 1 По ТЗ.Колонки.Количество() - 1 Цикл
		ТЗ2.Добавить();
		ТЗ2[Сч - 1][ТЗ.Колонки[0].Имя] = ТЗ.Колонки[Сч].Имя;
	КонецЦикла;
	
	СчетчикСтрок = -1;
	Для каждого стр из Тз Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		Мас = Новый Массив;
		Для Сч = 1 По ТЗ.Колонки.Количество() - 1 Цикл
			Мас.Вставить(Сч - 1, стр[Сч]);
		КонецЦикла;
		ТЗ2.ЗагрузитьКолонку(Мас, ТЗ2.Колонки[СчетчикСтрок + 1]);
	КонецЦикла;
	
	Возврат ТЗ2;
   
КонецФункции
"}
},
{0,
{"[Функция] - Отфильтровать (Построитель)",0,0,"Таб[лицаЗначений]","// ТаблицаОтборов - Таблица значений с колонками
// ИмяОтбора - Строка
// ВидСравнения - ВидСравнения
// Значение - Any
// Возвращает отфильтрованную таблицу значений
Функция ОтфильтроватьТаблицуЗначений(ТаблицаЗначенийДляФильтрации, ТаблицаОтборов)

	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначенийДляФильтрации);

	Для Каждого СтрокаКоллекции Из ТаблицаОтборов Цикл
		Отбор = Построитель.Отбор.Добавить(СтрокаКоллекции.ИмяОтбора);
		Отбор.ВидСравнения = СтрокаКоллекции.ВидСравнения;
		Отбор.Использование = Истина;
		Отбор.Значение = СтрокаКоллекции.Значение;
	КонецЦикла;

	Возврат Построитель.Результат.Выгрузить();

КонецФункции
"}
},
{0,
{"[Функция] - Отбор (Построитель)",0,0,"Таб[лицаЗначений]"," //Получение данных из ТабзицыЗначений через ПостроительЗапроса (отбор)
 // ВАЖНО: Колонки ТаблицыЗначений должны быть типизированы
 //Параметры:
 // ТаблицаЗначений - ТаблицаЗначений - Произвольная таблица для отбора.
 // ИмяКолонки - Строка - Наименование колонки.
 // Значение - ЛюбоеЗначение - Значение отбора.
 // ЗначениеТипаСревнения - ВидСравнения - Значение вида сравления (Пример: ВидСравнения.Равно).
 //Возвращаемое значение:
 //	РезультатФункции - ТаблицаЗначений - Содержит строки переданной ТаблицыЗначений удовлетворяющих
									//заданному в параметрах отбору	
&НаСервере
Функция ОтборЧерезПостроитель(Знач ТаблицаЗначений, Знач ИмяКолонки, Знач Значение
							, Знач ЗначениеТипаСревнения = Неопределено) Экспорт
							
	РезультатФункции = Неопределено;
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Построитель = Новый ПостроительЗапроса;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
		ОтборНастр = Построитель.Отбор.Добавить(ИмяКолонки);
		ОтборНастр.ВидСравнения = ?(ЗначениеТипаСревнения = Неопределено
												, ВидСравнения.Равно
												, ЗначениеТипаСревнения);
		ОтборНастр.Значение = Значение;
		ОтборНастр.Использование = Истина;
		Построитель.Выполнить();
		РезультатФункции = Построитель.Результат.Выгрузить();
	#КонецЕсли
	Возврат РезультатФункции;
 
КонецФункции // -- ОтборЧерезПостроитель "}
},
{0,
{"[Функция] - ТаблицаЗначений в МассивСтруктур",0,0,"Таб[лицаЗначений]","// Преобразует таблицу значений в массив структур.
// Может использоваться для передачи на клиент данных в том случае, если таблица
// значений содержит только такие значения, которые могут
// быть переданы с сервера на клиент.
//
// Полученный массив содержит структуры, каждая из которых повторяет
// структуру колонок таблицы значений.
//
// Не рекомендуется использовать для преобразования таблиц значений
// с большим количеством строк.
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - исходная таблица значений.
//
// Возвращаемое значение:
//  Массив - коллекция строк таблицы в виде структур.
//
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = """";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + "","";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции"}
},
{0,
{"[Процедура] - Распределить число",0,0,"","Процедура АлгоритмРаспределения(ТаблицаДанных , ИмяПоляКоличество
								, ИмяПоляСуммы, Знач РаспределямаяСумма)
		
	Если ТаблицаДанных.Количество() > 0 Тогда 
		ОбщееКоличество = ТаблицаДанных.Итог(ИмяПоляКоличество);
		КонтрольнаяСумма = ТаблицаДанных.Итог(ИмяПоляСуммы) + РаспределямаяСумма;
		МаксСумма = 0;
		ИндексМаксЗначения = 0;
		
		Для Каждого Эл Из ТаблицаДанных Цикл
			Коэфициент = Эл[ИмяПоляКоличество] / ОбщееКоличество;
			Распределить = РаспределямаяСумма * Коэфициент;
			Эл[ИмяПоляСуммы] = Эл[ИмяПоляСуммы] + Распределить;
			ОбщееКоличество = ОбщееКоличество - Эл[ИмяПоляКоличество];
			РаспределямаяСумма = РаспределямаяСумма - Распределить;
			МаксСумма = Макс(МаксСумма, Эл[ИмяПоляСуммы]);
			Если МаксСумма = Эл[ИмяПоляСуммы] Тогда 
				ИндексМаксЗначения = ТаблицаДанных.Индекс(Эл);
			КонецЕсли;
		КонецЦикла;	
		МаксСтрокаТЗ = ТаблицаДанных[ИндексМаксЗначения];
		МаксСтрокаТЗ[ИмяПоляСуммы] = МаксСтрокаТЗ[ИмяПоляСуммы] 
									+ (КонтрольнаяСумма - ТаблицаДанных.Итог(ИмяПоляСуммы));
	КонецЕсли;
		
КонецПроцедуры // -- АлгоритмРаспределения()
"}
}
},
{5,
{"Типы",1,0,"",""},
{0,
{"Выбор типа (Тип)",0,0,"Тип","Тип(""<?"""", ВыборТипа>"")<?>"}
},
{0,
{"Выбор типа значения (ТипЗнч)",0,0,"Тип[Знч]","ТипЗнч(""<?"""", ВыборТипа>"")<?>"}
},
{0,
{"ОписанияТипов",0,0,"Опис[аниеТипов]","<?""Конструктор описания типов"", КонструкторОписанияТипов><?>"}
},
{0,
{"Ограничение типа на реквизит",0,0,"Тип","МассивТипов = Новый Массив();
Массив.Добавить(<?"""", ВыборТипа>); 
ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
Элементы.<?""Имя Реквизита"">.ОграничениеТипа = ОграничениеТипа;
Объект.<?""Имя Реквизита""> = ОграничениеТипа.ПривестиЗначение(Объект.<?""Имя Реквизита"">);<?>
"}
},
{0,
{"Условие проверки ТипЗнч и Тип",0,0,"Тип[Знч=Тип]","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

КонецЕсли;<?>"}
}
},
{6,
{"Цвет",1,0,"",""},
{0,
{"WebЦвета",0,0,"Цвет","WebЦвета<?>"}
},
{0,
{"Новый Цвет",0,0,"Цвет","Цвет = Новый Цвет(0, 0, 0);"}
},
{0,
{"Цвет стиля",0,0,"Цвет","ЦветСтиля = ЦветаСтиля."}
},
{0,
{"[Функция] - Каталог Web-цветов",0,0,"Цвет","// Возвращает таблицу Web-цветов с абсолютными цветами.
//
// Возвращаемое значение:
//	Соответствие - Соответствие с цветами.
//
Функция КаталогWebЦветов() Экспорт
	
	Соответствие = Новый Соответствие;
    	
	Соответствие.Вставить(WebЦвета.Аквамарин,					Новый Цвет(127, 255, 212));
	Соответствие.Вставить(WebЦвета.АкварельноСиний,				Новый Цвет(240, 248, 255));
	Соответствие.Вставить(WebЦвета.АнтикБелый,					Новый Цвет(250, 235, 215));
	Соответствие.Вставить(WebЦвета.Бежевый,						Новый Цвет(245, 245, 220));
	Соответствие.Вставить(WebЦвета.Белоснежный,					Новый Цвет(255, 250, 250));
	Соответствие.Вставить(WebЦвета.Белый,						Новый Цвет(255, 255, 255));
	Соответствие.Вставить(WebЦвета.Бирюзовый,					Новый Цвет(064, 224, 208));
	Соответствие.Вставить(WebЦвета.БледноБирюзовый,				Новый Цвет(175, 238, 238));
	Соответствие.Вставить(WebЦвета.БледноЗеленый,				Новый Цвет(152, 251, 152));
	Соответствие.Вставить(WebЦвета.БледноЗолотистый,			Новый Цвет(238, 232, 170));
	Соответствие.Вставить(WebЦвета.БледноКрасноФиолетовый,		Новый Цвет(219, 112, 147));
	Соответствие.Вставить(WebЦвета.БледноЛиловый,				Новый Цвет(230, 230, 250));
	Соответствие.Вставить(WebЦвета.БледноМиндальный,			Новый Цвет(255, 235, 205));
	Соответствие.Вставить(WebЦвета.БледноСиреневый,				Новый Цвет(216, 191, 216));
	Соответствие.Вставить(WebЦвета.Васильковый,					Новый Цвет(100, 149, 237));
	Соответствие.Вставить(WebЦвета.ВесеннеЗеленый,				Новый Цвет(000, 255, 127));
	Соответствие.Вставить(WebЦвета.Голубой,						Новый Цвет(166, 202, 240));
	Соответствие.Вставить(WebЦвета.ГолубойСКраснымОттенком,		Новый Цвет(255, 240, 245));
	Соответствие.Вставить(WebЦвета.ГолубойСоСтальнымОттенком,	Новый Цвет(176, 196, 222));
	Соответствие.Вставить(WebЦвета.ГрифельноСерый,				Новый Цвет(112, 128, 144));
	Соответствие.Вставить(WebЦвета.ГрифельноСиний,				Новый Цвет(106, 090, 205));
	Соответствие.Вставить(WebЦвета.Древесный,					Новый Цвет(222, 184, 135));
	Соответствие.Вставить(WebЦвета.ДымчатоБелый,				Новый Цвет(245, 245, 245));
	Соответствие.Вставить(WebЦвета.ЖелтоЗеленый,				Новый Цвет(154, 205, 050));
	Соответствие.Вставить(WebЦвета.Желтый,						Новый Цвет(255, 255, 000));
	Соответствие.Вставить(WebЦвета.ЗамшаСветлый,				Новый Цвет(255, 228, 181));
	Соответствие.Вставить(WebЦвета.ЗеленаяЛужайка,				Новый Цвет(124, 252, 000));
	Соответствие.Вставить(WebЦвета.ЗеленоЖелтый,				Новый Цвет(173, 255, 047));
	Соответствие.Вставить(WebЦвета.ЗеленоватоЖелтый,			Новый Цвет(127, 255, 000));
	Соответствие.Вставить(WebЦвета.ЗеленоватоЛимонный,			Новый Цвет(000, 255, 000));
	Соответствие.Вставить(WebЦвета.Зеленый,						Новый Цвет(000, 128, 000));
	Соответствие.Вставить(WebЦвета.ЗеленыйЛес,					Новый Цвет(034, 139, 034));
	Соответствие.Вставить(WebЦвета.Золотистый,					Новый Цвет(218, 165, 032));
	Соответствие.Вставить(WebЦвета.Золотой,						Новый Цвет(255, 215, 000));
	Соответствие.Вставить(WebЦвета.Индиго,						Новый Цвет(075, 000, 130));
	Соответствие.Вставить(WebЦвета.Киноварь,					Новый Цвет(205, 092, 092));
	Соответствие.Вставить(WebЦвета.Кирпичный,					Новый Цвет(178, 034, 034));
	Соответствие.Вставить(WebЦвета.КожаноКоричневый,			Новый Цвет(139, 069, 019));
	Соответствие.Вставить(WebЦвета.Коралловый,					Новый Цвет(255, 127, 080));
	Соответствие.Вставить(WebЦвета.Коричневый,					Новый Цвет(165, 042, 042));
	Соответствие.Вставить(WebЦвета.КоролевскиГолубой,			Новый Цвет(065, 105, 225));
	Соответствие.Вставить(WebЦвета.КрасноФиолетовый,			Новый Цвет(208, 032, 144));
	Соответствие.Вставить(WebЦвета.Красный,						Новый Цвет(255, 000, 000));
	Соответствие.Вставить(WebЦвета.Кремовый,					Новый Цвет(255, 251, 240));
	Соответствие.Вставить(WebЦвета.Лазурный,					Новый Цвет(240, 255, 255));
	Соответствие.Вставить(WebЦвета.ЛимонноЗеленый,				Новый Цвет(050, 205, 050));
	Соответствие.Вставить(WebЦвета.Лимонный,					Новый Цвет(255, 250, 205));
	Соответствие.Вставить(WebЦвета.Лосось,						Новый Цвет(250, 128, 114));
	Соответствие.Вставить(WebЦвета.ЛососьСветлый,				Новый Цвет(255, 160, 122));
	Соответствие.Вставить(WebЦвета.ЛососьТемный,				Новый Цвет(233, 150, 122));
	Соответствие.Вставить(WebЦвета.Льняной,						Новый Цвет(250, 240, 230));
	Соответствие.Вставить(WebЦвета.Малиновый,					Новый Цвет(220, 020, 060));
	Соответствие.Вставить(WebЦвета.МятныйКрем,					Новый Цвет(245, 255, 250));
	Соответствие.Вставить(WebЦвета.НавахоБелый,					Новый Цвет(255, 222, 173));
	Соответствие.Вставить(WebЦвета.НасыщенноНебесноГолубой,		Новый Цвет(000, 191, 255));
	Соответствие.Вставить(WebЦвета.НасыщенноРозовый,			Новый Цвет(255, 020, 147));
	Соответствие.Вставить(WebЦвета.НебесноГолубой,				Новый Цвет(135, 206, 235));
	Соответствие.Вставить(WebЦвета.НейтральноАквамариновый,		Новый Цвет(102, 205, 170));
	Соответствие.Вставить(WebЦвета.НейтральноБирюзовый,			Новый Цвет(072, 209, 204));
	Соответствие.Вставить(WebЦвета.НейтральноВесеннеЗеленый,	Новый Цвет(000, 250, 154));
	Соответствие.Вставить(WebЦвета.НейтральноГрифельноСиний,	Новый Цвет(123, 104, 238));
	Соответствие.Вставить(WebЦвета.НейтральноЗеленый,			Новый Цвет(192, 220, 192));
	Соответствие.Вставить(WebЦвета.НейтральноКоричневый,		Новый Цвет(205, 133, 63));
	Соответствие.Вставить(WebЦвета.НейтральноПурпурный,			Новый Цвет(147, 112, 219));
	Соответствие.Вставить(WebЦвета.НейтральноСерый,				Новый Цвет(160, 160, 164));
	Соответствие.Вставить(WebЦвета.НейтральноСиний,				Новый Цвет(000, 000, 205));
	Соответствие.Вставить(WebЦвета.НейтральноФиолетовоКрасный,	Новый Цвет(199, 021, 133));
	Соответствие.Вставить(WebЦвета.Оливковый,					Новый Цвет(128, 128, 000));
	Соответствие.Вставить(WebЦвета.ОранжевоКрасный,				Новый Цвет(255, 069, 000));
	Соответствие.Вставить(WebЦвета.Оранжевый,					Новый Цвет(255, 165, 000));
	Соответствие.Вставить(WebЦвета.Орхидея,						Новый Цвет(218, 112, 214));
	Соответствие.Вставить(WebЦвета.ОрхидеяНейтральный,			Новый Цвет(186, 085, 211));
	Соответствие.Вставить(WebЦвета.ОрхидеяТемный,				Новый Цвет(153, 050, 204));
	Соответствие.Вставить(WebЦвета.Охра,						Новый Цвет(160, 082, 045));
	Соответствие.Вставить(WebЦвета.Перламутровый,				Новый Цвет(255, 245, 238));
	Соответствие.Вставить(WebЦвета.Персиковый,					Новый Цвет(255, 218, 185));
	Соответствие.Вставить(WebЦвета.ПесочноКоричневый,			Новый Цвет(244, 164, 096));
	Соответствие.Вставить(WebЦвета.ПолночноСиний,				Новый Цвет(025, 025, 112));
	Соответствие.Вставить(WebЦвета.ПризрачноБелый,				Новый Цвет(248, 248, 255));
	Соответствие.Вставить(WebЦвета.Пурпурный,					Новый Цвет(128, 000, 128));
	Соответствие.Вставить(WebЦвета.Пшеничный,					Новый Цвет(245, 222, 179));
	Соответствие.Вставить(WebЦвета.РозовоКоричневый,			Новый Цвет(188, 143, 143));
	Соответствие.Вставить(WebЦвета.Розовый,						Новый Цвет(255, 192, 203));
	Соответствие.Вставить(WebЦвета.Роса,						Новый Цвет(240, 255, 240));
	Соответствие.Вставить(WebЦвета.РыжеватоКоричневый,			Новый Цвет(210, 180, 140));
	Соответствие.Вставить(WebЦвета.СветлоГрифельноСерый,		Новый Цвет(119, 136, 153));
	Соответствие.Вставить(WebЦвета.СветлоГрифельноСиний,		Новый Цвет(132, 112, 255));
	Соответствие.Вставить(WebЦвета.СветлоЖелтый,				Новый Цвет(255, 255, 224));
	Соответствие.Вставить(WebЦвета.СветлоЖелтыйЗолотистый,		Новый Цвет(250, 250, 210));
	Соответствие.Вставить(WebЦвета.СветлоЗеленый,				Новый Цвет(144, 238, 144));
	Соответствие.Вставить(WebЦвета.СветлоЗолотистый,			Новый Цвет(255, 236, 139));
	Соответствие.Вставить(WebЦвета.СветлоКоралловый,			Новый Цвет(240, 128, 128));
	Соответствие.Вставить(WebЦвета.СветлоКоричневый,			Новый Цвет(255, 228, 196));
	Соответствие.Вставить(WebЦвета.СветлоНебесноГолубой,		Новый Цвет(135, 206, 250));
	Соответствие.Вставить(WebЦвета.СветлоРозовый,				Новый Цвет(255, 182, 193));
	Соответствие.Вставить(WebЦвета.СветлоСерый,					Новый Цвет(192, 192, 192));
	Соответствие.Вставить(WebЦвета.СеребристоСерый,				Новый Цвет(220, 220, 220));
	Соответствие.Вставить(WebЦвета.Серебряный,					Новый Цвет(192, 192, 192));
	Соответствие.Вставить(WebЦвета.СероСиний,					Новый Цвет(095, 158, 160));
	Соответствие.Вставить(WebЦвета.Серый,						Новый Цвет(128, 128, 128));
	Соответствие.Вставить(WebЦвета.СинеСерый,					Новый Цвет(030, 144, 255));
	Соответствие.Вставить(WebЦвета.СинеФиолетовый,				Новый Цвет(138, 043, 226));
	Соответствие.Вставить(WebЦвета.Синий,						Новый Цвет(000, 000, 255));
	Соответствие.Вставить(WebЦвета.СинийСПороховымОттенком,		Новый Цвет(176, 224, 230));
	Соответствие.Вставить(WebЦвета.СинийСоСтальнымОттенком,		Новый Цвет(070, 130, 180));
	Соответствие.Вставить(WebЦвета.Сливовый,					Новый Цвет(221, 160, 221));
	Соответствие.Вставить(WebЦвета.СлоноваяКость,				Новый Цвет(255, 255, 240));
	Соответствие.Вставить(WebЦвета.СтароеКружево,				Новый Цвет(253, 245, 230));
	Соответствие.Вставить(WebЦвета.ТемноБирюзовый,				Новый Цвет(000, 206, 209));
	Соответствие.Вставить(WebЦвета.ТемноБордовый,				Новый Цвет(128, 000, 000));
	Соответствие.Вставить(WebЦвета.ТемноГрифельноСерый,			Новый Цвет(047, 079, 079));
	Соответствие.Вставить(WebЦвета.ТемноГрифельноСиний,			Новый Цвет(072, 061, 139));
	Соответствие.Вставить(WebЦвета.ТемноЗеленый,				Новый Цвет(000, 100, 000));
	Соответствие.Вставить(WebЦвета.ТемноЗолотистый,				Новый Цвет(184, 134, 011));
	Соответствие.Вставить(WebЦвета.ТемноКрасный,				Новый Цвет(139, 000, 000));
	Соответствие.Вставить(WebЦвета.ТемноОливковоЗеленый,		Новый Цвет(085, 107, 47));
	Соответствие.Вставить(WebЦвета.ТемноОранжевый,				Новый Цвет(255, 140, 000));
	Соответствие.Вставить(WebЦвета.ТемноСерый,					Новый Цвет(169, 169, 169));
	Соответствие.Вставить(WebЦвета.ТемноСиний,					Новый Цвет(000, 000, 139));
	Соответствие.Вставить(WebЦвета.ТемноФиолетовый,				Новый Цвет(148, 000, 211));
	Соответствие.Вставить(WebЦвета.ТеплоРозовый,				Новый Цвет(255, 105, 180));
	Соответствие.Вставить(WebЦвета.Томатный,					Новый Цвет(255, 099, 071));
	Соответствие.Вставить(WebЦвета.ТопленоеМолоко,				Новый Цвет(255, 239, 213));
	Соответствие.Вставить(WebЦвета.ТусклоОливковый,				Новый Цвет(107, 142, 035));
	Соответствие.Вставить(WebЦвета.ТусклоРозовый,				Новый Цвет(255, 228, 225));
	Соответствие.Вставить(WebЦвета.ТусклоСерый,					Новый Цвет(105, 105, 105));
	Соответствие.Вставить(WebЦвета.Ультрамарин,					Новый Цвет(000, 000, 128));
	Соответствие.Вставить(WebЦвета.Фиолетовый,					Новый Цвет(238, 130, 238));
	Соответствие.Вставить(WebЦвета.Фуксин,						Новый Цвет(255, 000, 255));
	Соответствие.Вставить(WebЦвета.ФуксинТемный,				Новый Цвет(139, 000, 139));
	Соответствие.Вставить(WebЦвета.Фуксия,						Новый Цвет(255, 000, 255));
	Соответствие.Вставить(WebЦвета.Хаки,						Новый Цвет(240, 230, 140));
	Соответствие.Вставить(WebЦвета.ХакиТемный,					Новый Цвет(189, 183, 107));
	Соответствие.Вставить(WebЦвета.ЦветМорскойВолны,			Новый Цвет(046, 139, 087));
	Соответствие.Вставить(WebЦвета.ЦветМорскойВолныНейтральный,	Новый Цвет(060, 179, 113));
	Соответствие.Вставить(WebЦвета.ЦветМорскойВолныСветлый,		Новый Цвет(032, 178, 170));
	Соответствие.Вставить(WebЦвета.ЦветМорскойВолныТемный,		Новый Цвет(143, 188, 139));
	Соответствие.Вставить(WebЦвета.ЦветокБелый,					Новый Цвет(255, 250, 240));
	Соответствие.Вставить(WebЦвета.Циан,						Новый Цвет(000, 255, 255));
	Соответствие.Вставить(WebЦвета.ЦианАкварельный,				Новый Цвет(000, 255, 255));
	Соответствие.Вставить(WebЦвета.ЦианНейтральный,				Новый Цвет(000, 128, 128));
	Соответствие.Вставить(WebЦвета.ЦианСветлый,					Новый Цвет(224, 255, 255));
	Соответствие.Вставить(WebЦвета.ЦианТемный,					Новый Цвет(000, 139, 139));
	Соответствие.Вставить(WebЦвета.Черный,						Новый Цвет(000, 000, 000));
	Соответствие.Вставить(WebЦвета.ШелковыйОттенок,				Новый Цвет(255, 248, 220));
	Соответствие.Вставить(WebЦвета.Шоколадный,					Новый Цвет(210, 105, 30));
	
	Возврат Соответствие;
	
КонецФункции
"}
},
{0,
{"[Функция] - Из RGB в HEX",0,0,"Цвет","Функция RGB_HEX(Знач Red, Знач Green, Знач Blue)
	
	Возврат ""#"" + Сред(DecToAny(ПобитовоеИли(ПобитовоеИли(ПобитовоеИли(Blue, ПобитовыйСдвигВлево(Green, 8)), ПобитовыйСдвигВлево(Red, 16)), ПобитовыйСдвигВлево(1, 24)), 16), 2);
	
КонецФункции"}
},
{0,
{"[Функция] - Из HEX в RGB",0,0,"Цвет","Функция HEX_TO_RGB(HEX)
	
	RED   = ЧислоИзШестнадцатеричнойСтроки(""0x"" + Сред(HEX, 2, 2)); 	
	GREEN =	ЧислоИзШестнадцатеричнойСтроки(""0x"" + Сред(HEX, 4, 2));
	BLUE  = ЧислоИзШестнадцатеричнойСтроки(""0x"" + Сред(HEX, 6, 2));
	
	RGB   = Строка(RED) + "", "" + Строка(GREEN) + "", "" + Строка(BLUE);
	
КонецФункции"}
}
},
{9,
{"Число",1,0,"",""},
{0,
{"Генератор случайных чисел",0,0,"ГСЧ","ГСЧ = Новый ГенераторСлучайныхЧисел();
СлучайноеЧисло = ГСЧ.СлучайноеЧисло(<?""Нижняя граница"">, <?""Верхняя граница"">);"}
},
{0,
{"Модуль числа",0,0,"Число[Модуль]","Макс(<? ""Число"">, -<? ""Число"">);"}
},
{0,
{"РежимОкругления",0,0,"Режим[Округления]","РежимОкругления.<? ""Режим округления"", ВыборВарианта, ""Окр15как10"",""Окр15как10"", ""Окр15как20"",""Окр15как20"">"}
},
{0,
{"Число прописью",0,0,"Число[Прописью]","ЧислоПрописью(<?>, , ""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"")"}
},
{0,
{"[Функция] - Проверка на четность числа",0,0,"Число","&НаСервереБезКонтекста
Функция ЧислоЧетное(Знач ПроверяемоеЧисло = 0)
	
	Результат = Ложь;
	
	Если ТипЗнч(ПроверяемоеЧисло) = Тип(""Число"") Тогда 
		Результат = ПроверяемоеЧисло%2 = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // -- ЧислоЧетное()
"}
},
{0,
{"[Функция] - Получить цифры строки",0,0,"Число","Функция ЦифрыСтроки(Строка, ВключаяСимволы = """""""") Экспорт
	
	ЦифрыСтроки = """""""";
	
	Для Сч = 1 по СтрДлина(Строка(Строка)) Цикл
		Символ = Сред(Строка, Сч, 1);
		Если Найти(""""0123456789"""" + ВключаяСимволы, Символ) > 0 Тогда
			ЦифрыСтроки = ЦифрыСтроки + Символ; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЦифрыСтроки

КонецФункции"}
},
{0,
{"[Функция] - Случайное число",0,0,"Число","Функция СлучайноеЧисло(НижняяГраница, ВерхняяГраница, Разрядность = 0)
		
	Коэфициент = Pow(10, Разрядность);
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	РезультатФункции = ГСЧ.СлучайноеЧисло(НижняяГраница * Коэфициент
											, ВерхняяГраница * Коэфициент) 
											/ Коэфициент;
	Возврат РезультатФункции;
		
КонецФункции // -- СлучайноеЧисло()"}
},
{0,
{"[Функция] - Шестнадцетиричное число в десятичное",0,0,"Число","// Функция переводит шестнадцатеричное число в десятичное
// Параметры: _Hex     - Строка              - Шестнадцатеричное число
// Возвращаемое значение: Число   - Десятичное число
//
Функция HexToDecЧисло(Знач _Hex)
	
	Если _Hex = ""0"" Тогда 
		Возврат 0;
	КонецЕсли;
	
	ЧислаHex 		= ""0123456789ABCDEF"";
	_Hex 			= СокрЛП(_Hex);
	СтаршаяСтепень 	= СтрДлина(_Hex) - 1;
	Результат 		= 0;
	счСимволов 		= 1;
	Пока СтаршаяСтепень >= 0 Цикл
		_HexСимвол 		= Сред(_Hex, счСимволов, 1);
		Представление 	= СтрНайти(ЧислаHex, _HexСимвол) - 1;
		Результат 		= Результат + Представление * Pow(16, СтаршаяСтепень);
		СтаршаяСтепень 	= СтаршаяСтепень - 1;
		СчСимволов 		= СчСимволов + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // HexToDec()"}
},
{0,
{"[Функция] - Из десятичного числа в любую систему счисления",0,0,"Число","// Конвертация из 10-чной в любую систему счисления.
//
// Параметры:
//	Значение - Строка,Число - исходное значение.
//	Нотация - Число - основание системы счисления.
//
// Возвращаемое значение:
//	Строка - значение в нужной системе счисления.
//
Функция DecToAny(Знач Значение = 0, Знач Нотация = 16)
	
	Результат = """";
	Пока Значение > 0 Цикл
		Результат = Сред(""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"", Значение % Нотация + 1, 1) + Результат;
		Значение = Цел(Значение / Нотация);		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции"}
}
},
{2,
{"Шрифты",1,0,"",""},
{0,
{"Шрифт (Новый)",0,0,"Шрифт","Шрифт = Новый Шрифт();"}
},
{0,
{"Шрифт (Настройка)",0,0,"Шрифт","Шрифт = Новый Шрифт( , , , , , ); // Имя шрифта, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый"}
}
}
},
{8,
{"Объекты конфигурации",1,0,"",""},
{4,
{"Блокировки регистров",1,0,"",""},
{0,
{"Блокировка РегистрНакопления",0,0,"Блокировка","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.<?"""", РегистрНакопления>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрБухгалтерии",0,0,"Блокировка","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрБухгалтерии.<?"""", РегистрБухгалтерии>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.УстановитьЗначение(""Период"", Новый Диапазон( , ));
//ЭлементБлокировки.УстановитьЗначение(""Счет"", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрСведений",0,0,"Блокировка","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрСведений.<?"""", РегистрСведений>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрРасчета",0,0,"Блокировка","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрРасчета.<?"""", РегистрРасчета>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
}
},
{2,
{"Временное хранилище",1,0,"",""},
{0,
{"Поместить во ВременноеХранилище",0,0,"Времен[ноеХранилище]","ПоместитьВоВременноеХранилище(<? ""Переменная"">)"}
},
{0,
{"Получить из ВременногоХранилища",0,0,"Времен[ноеХранилище]","ПолучитьИзВременногоХранилища(<? ""Адрес"">)"}
}
},
{9,
{"Документы",1,0,"",""},
{0,
{"Блокировка перед изменением",0,0,"Документ[Блокировка]","Документ = Документы.<? ""Выбор документа"", Документ>.ПолучитьСсылку(УИД).ПолучитьОбъект();
Если Не Документ.Заблокирован() Тогда
	Документ.Заблокировать();
	// внесение изменений
	Документ.Записать();
	Документ.Разблокировать();
КонецЕсли;"}
},
{0,
{"Ввод на основании программно",0,0,"Документ[ВводНаОсновании]","НовыйДокумент = Документы.<? ""Выберите документ"", Документ>.СоздатьДокумент();
НовыйДокумент.Заполнить(<? ""Имя переменной параметров заполнения"">);
ФормаДок = НовыйДокумент.ПолучитьФорму();
ФормаДок.ПараметрОснование = <? ""Имя переменной параметров заполнения"">;
ФормаДок.Открыть();"}
},
{0,
{"Объект ""Документ"" получить ТабличнуюЧасть",0,0,"Документ[ПолучитьТЧ]","Документ.<? """", ОбъектМетаданных, ""Документ"", ""Документ.ТабличнаяЧасть"">"}
},
{0,
{"Обход документов",0,0,"Документ[ыОбойти]","Выборка = Документы.<?"""", Документ>.Выбрать();
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
},
{0,
{"РежимЗаписиДокумента",0,0,"Режим[ЗаписиДокумента]","РежимЗаписиДокумента.<? ""Режим записи документа"", ВыборВарианта, ""Запись"",""Запись"", ""ОтменаПроведения"",""ОтменаПроведения"", ""Проведение"",""Проведение"">"}
},
{0,
{"Создание копии документа",0,0,"Документ[Скопировать]","ДокументИсх = Документы.<? ""Выбор документа"", Документ>.ПолучитьСсылку(УИД);
НовыйДокумент = ДокументИсх.Скопировать();
НовыйДокумент.Дата = ТекущаяДата();
НовыйДокумент.Записать();"}
},
{0,
{"Установить новый номер",0,0,"Уст[ановитьНовыйНомер]","<?""Объект"">.УстановитьНовыйНомер();"}
},
{0,
{"Удаление документа",0,0,"","ДокументНаУдаление = <?""Ссылка на документ"">.ПолучитьОбъект();
ДокументНаУдаление.Удалить();"}
},
{0,
{"[Функция] - Есть реквизит или свойство объекта",0,0,"","Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт

   КлючУникальности   = Новый УникальныйИдентификатор;
   СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
   ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);

   Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;

КонецФункции"}
}
},
{5,
{"Права",1,0,"",""},
{0,
{"Право доступа",0,0,"Право[Доступа]","ПравоДоступа(""<?"""", ВыборВарианта,
				""Чтение"", ""Чтение"",
				""Добавление"", ""Добавление"",
				""Изменение"", ""Изменение"",
				""Удаление"", ""Удаление"",
				""Проведение"", ""Проведение"",
				""ОтменаПроведения"", ""ОтменаПроведения"",
				""Просмотр"", ""Просмотр"",
				""Интерактивное добавление"", ""ИнтерактивноеДобавление"",
				""Редактирование"", ""Редактирование"",
				""Интерактивная пометка удаления"", ""ИнтерактивнаяПометкаУдаления"",
				""Интерактивное снятие пометки удаления"", ""ИнтерактивноеСнятиеПометкиУдаления"",
				""Интерактивное удаление помеченных"", ""ИнтерактивноеУдалениеПомеченных"",
				""Интерактивное проведение"", ""ИнтерактивноеПроведение"",
				""Интерактивное проведение не оперативное"", ""ИнтерактивноеПроведениеНеОперативное"",
				""Интерактивная отмена проведения"", ""ИнтерактивнаяОтменаПроведения"",
				""Интерактивное изменение проведенных"", ""ИнтерактивноеИзменениеПроведенных"",
				""Ввод по строке"", ""ВводПоСтроке"",
				""Управление итогами"", ""УправлениеИтогами"",
				""Использование"", ""Использование"",
				""Интерактивное удаление"", ""ИнтерактивноеУдаление"",
				""Администрирование"", ""Администрирование"",
				""Монопольный режим"", ""МонопольныйРежим"",
				""Активные пользователи"", ""АктивныеПользователи"",
				""Журнал регистрации"", ""ЖурналРегистрации"",
				""Внешнее соединение"", ""ВнешнееСоединение"",
				""Automation"", ""Automation"",
				""Интерактивное открытие внешних обработок"", ""ИнтерактивноеОткрытиеВнешнихОбработок"",
				""Интерактивное открытие внешних отчетов"", ""ИнтерактивноеОткрытиеВнешнихОтчетов"",
				""Получение"", ""Получение"",
				""Установка"", ""Установка"",
				""Интерактивная активация"", ""ИнтерактивнаяАктивация"",
				""Старт"", ""Старт"",
				""Интерактивный старт"", ""ИнтерактивныйСтарт"",
				""Выполнение"", ""Выполнение"",
				""Интерактивное выполнение"", ""ИнтерактивноеВыполнение"",
				""Вывод"", ""Вывод"",
				""Обновление конфигурации базы данных"", ""ОбновлениеКонфигурацииБазыДанных"",
				""Тонкий клиент"", ""ТонкийКлиент"",
				""Веб клиент"", ""ВебКлиент"",
				""Толстый клиент "", ""ТолстыйКлиент"">"",<?> ""<ОбъектМетаданных>"", ""<Пользователь/Роль>"", ""<СтандартныйРеквизитСтандартнаяТабличнаяЧасть>"")<?>"}
},
{0,
{"Роль доступна",0,0,"Роль[Доступна]","РольДоступна(""<?"""", ОбъектМетаданных, ""Роль"">"")<?>"}
},
{0,
{"Привилегированный режим",0,0,"Прив[илегированныйРежим]","ПривилегированныйРежим();<?>"}
},
{0,
{"Установить привилегированный режим",0,0,"Прив[илегированныйРежим]","УстановитьПривилегированныйРежим(<?"""", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">);"}
},
{0,
{"Установить безопасный режим",0,0,"Безопасный[Режим]","УстановитьБезопасныйРежим(<?"""", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">);"}
}
},
{4,
{"Регистры",1,0,"",""},
{4,
{"РегистрСведений",1,0,"",""},
{0,
{"Добавить запись в регистр сведений",0,0,"Регистр[Сведений]","Запись = РегистрыСведений.<? ""Регистр сведений"", РегистрСведений>.СоздатьМенеджерЗаписи();
Запись.Период = ТекущаяДата();
//
Запись.Записать();"}
},
{0,
{"Набор записей (РегистрСведений)",0,0,"Регистр[Сведений]","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборЗаписей();
"}
},
{0,
{"РегистрСведений",0,0,"Регистр[Сведений]","РегистрСведений.<?"""", ОбъектМетаданных, ""РегистрСведений""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""СрезПервых"", "".СрезПервых(<?>)"", ""СрезПоследних"", "".СрезПоследних(<?>)"">"}
},
{0,
{"Очистка РегистрСведений",0,0,"Регистр[Сведений]","НаборЗаписей = РегистрыСведений.<?""Выберите РегистрСведений"", РегистрСведений>.СоздатьНаборЗаписей();
НаборЗаписей.Записать();
"}
}
},
{4,
{"РегистрНакопления",1,0,"",""},
{0,
{"Выбор РегистрНакопления",0,0,"Регистр[Накопления]","РегистрНакопления.<?"""", ОбъектМетаданных, ""РегистрНакопления""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"">"}
},
{0,
{"Вид движения (РегистрыНакопления)",0,0,"ВидД[вижения]","ВидДвижения = <? """", ВыборВарианта, ""Приход"",""ВидДвиженияНакопления.Приход"", ""Расход"",""ВидДвиженияНакопления.Расход"">;"}
},
{0,
{"Набор записей (РегистрНакопления)",0,0,"НаборЗаписей","НаборЗаписей = РегистрыНакопления.<?"""", РегистрНакопления>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Отключение перерасчета по РегиструНакопления",0,0,"Регистр[НакопленияОтклРасчета]","РегистрыНакопления.<?""Выберите регистр накопления"", РегистрНакопления>.УстановитьИспользованиеИтогов(<?""Включить/Отключить расчет итогов"", ВыборВарианта, ""Включить"",""Истина"", ""Отключить"",""Ложь"">);"}
}
},
{3,
{"РегистрБухгалтерии",1,0,"",""},
{0,
{"РегистрБухгалтерии",0,0,"Рег[истрБухгалтерии]","РегистрБухгалтерии.<?"""", ОбъектМетаданных, ""РегистрБухгалтерии""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Субконто"", "".Субконто"", ""ДвиженияССубконто"", "".ДвиженияССубконто(<?>)"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"", ""ОборотыДтКт"", "".ОборотыДтКт(<?>)"">"}
},
{0,
{"Набор записей (РегистрБухгалтерии)",0,0,"НаборЗаписей","НаборЗаписей = РегистрыБухгалтерии.<?"""", РегистрБухгалтерии>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Вид движения (РегистрыБухгалтерии)",0,0,"ВидД[вижения]","ВидДвижения = <? """", ВыборВарианта, ""Дебет"",""ВидДвиженияБухгалтерии.Дебет"", ""Кредит"",""ВидДвиженияБухгалтерии.Кредит"">;
"}
}
},
{3,
{"РегистрРасчета",1,0,"",""},
{0,
{"РегистрРасчета",0,0,"Рег[истрРасчета]","РегистрРасчета.<?"""", ОбъектМетаданных, ""РегистрРасчета"", ""РегистрРасчета.Перерасчет"">"}
},
{0,
{"Набор записей (РегистрРасчета)",0,0,"НаборЗаписей","НаборЗаписей = РегистрыРасчета.<?"""", РегистрРасчета>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"Запись РегистраРасчетов",0,0,"Запись","Запись = Движения.<?"""", РегистрРасчета>.Добавить();
Запись.ПериодРегистрации = Дата;
Запись.ПериодДействияНачало = ;
Запись.ПериодДействияКонец = ;
Запись.Сторно = Ложь;
Запись.Сотрудник = ;
Запись.Подразделение = ;
Запись.График = ;
Запись.Параметр = ;
Запись.БазовыйПериодНачало = ;
Запись.БазовыйПериодКонец = ;"}
}
}
},
{3,
{"Справочники",1,0,"",""},
{0,
{"Удалить все элементы справочника",0,0,"Справоч[никУдалитьВсеЭлементы]","Выборка = Справочники.<? """", Справочник>.ВыбратьИерархически();
Пока Выборка.Следующий() Цикл
   Выборка.Удалить();
КонецЦикла;"}
},
{0,
{"Запись данных при недостаточности заполнения",0,0,"Справоч[никОбменДанными]","<?""Ссылка на элемент справочника"">.ОбменДанными.Загрузка = Истина;"}
},
{0,
{"[Процедура] - ОбработкаПроверкиЗаполнения ",0,0,"","Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты = Новый Массив;
	ИсключаемыеРеквизиты = Новый Массив;

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты
															, ИсключаемыеРеквизиты);
	#КонецЕсли
	
КонецПроцедуры
"}
}
},
{8,
{"Счета",1,0,"",""},
{0,
{"Выбор счета Дт",0,0,"Счет[Дт]","СчетДт = <? """", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"Выбор счета Кт",0,0,"Счет[Кт]","СчетКт = <? """", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"Движение",0,0,"Движение","Движение = Движения<?>
Движение.Период = Дата;"}
},
{0,
{"Субконто[Дт]",0,0,"СубконтоДт","СубконтоДт[<? """", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
},
{0,
{"Субконто[Кт]",0,0,"СубконтоКт","СубконтоКт[<? """", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
},
{0,
{"Граница",0,0,"Граница","Граница = Новый Граница(<?>, <? """", ВыборВарианта, ""ВидГраницы.Включая"",""ВидГраницы.Включая"", ""ВидГраницы.Исключая"",""ВидГраницы.Исключая"">);"}
},
{0,
{"Максимальное количество субконто",0,0,"Субконто[МаксЧисло]","Метаданные.ПланыСчетов[""<?"""", ПланСчетов>""].МаксКоличествоСубконто;"}
},
{0,
{"[Функция] - Получить свойства счета",0,0,"Счет[Свойства]","Функция УниверсальныйПолучитьСвойстваСчета(Знач Счет) Экспорт 
	
	ВидыСубконто = Строка(Счет.ВидыСубконто);
	ИмяПланаСчетов = СтрРазделить(ВидыСубконто, ""."", Ложь)[1];
	
	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить(""Ссылка""                         , ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка());
	ДанныеСчета.Вставить(""Наименование""                   , """");
	ДанныеСчета.Вставить(""Код""                            , """");
	ДанныеСчета.Вставить(""КодБыстрогоВыбора""              , """");
	ДанныеСчета.Вставить(""Порядок""                        , """");
	ДанныеСчета.Вставить(""Родитель""                       , ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка());
	ДанныеСчета.Вставить(""Вид""                            , Неопределено);
	ДанныеСчета.Вставить(""Забалансовый""                   , Ложь);
	ДанныеСчета.Вставить(""ЗапретитьИспользоватьВПроводках"", Ложь);
	ДанныеСчета.Вставить(""Валютный""                       , Ложь);
	ДанныеСчета.Вставить(""Количественный""                 , Ложь);
	ДанныеСчета.Вставить(""УчетПоПодразделениям""           , Ложь);
	ДанныеСчета.Вставить(""НалоговыйУчет""                  , Ложь);
	ДанныеСчета.Вставить(""КоличествоСубконто""             , 0);
	ДанныеСчета.Вставить(""ИдентификаторыСубконто""         , Новый Соответствие); // Ключ - вид субконто, Значение - строка ""1"", ""2"", ""3""
	
	//МаксКоличествоСубконто	= БухгалтерскийУчет.МаксимальноеКоличествоСубконто();
	МаксКоличествоСубконто	= Метаданные.ПланыСчетов[ИмяПланаСчетов].МаксКоличествоСубконто;
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто + ""Наименование"",  Неопределено);
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто + ""ТипЗначения"",   Неопределено);
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто + ""Суммовой"",      Ложь);
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто + ""ТолькоОбороты"", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""Счет"", Счет);
	
	Запрос.Текст = СтрШаблон(""ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.Родитель КАК Родитель,
	|	ПланСчетов.Код КАК Код,
	|	ПланСчетов.КодБыстрогоВыбора КАК КодБыстрогоВыбора,
	|	ПланСчетов.Порядок КАК Порядок,
	|	ПланСчетов.Наименование КАК Наименование,
	|	ПланСчетов.Вид КАК Вид,
	|	ПланСчетов.Забалансовый КАК Забалансовый,
	|	ПланСчетов.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
	|	ПланСчетов.Валютный КАК Валютный,
	|	ПланСчетов.Количественный КАК Количественный,
	|	ПланСчетов.УчетПоПодразделениям КАК УчетПоПодразделениям,
	|	ПланСчетов.НалоговыйУчет КАК НалоговыйУчет
	|ИЗ
	|	ПланСчетов.%1 КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	ВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ВидыСубконто.ТолькоОбороты КАК ТолькоОбороты,
	|	ВидыСубконто.Суммовой КАК Суммовой
	|ИЗ
	|	ПланСчетов.%1.ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	ВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыСубконто.НомерСтроки""
	, ИмяПланаСчетов);
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
	
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
	
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
	
	ИндексСубконто	= 0;
	
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто + ""Наименование"",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто + ""ТипЗначения"",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто + ""Суммовой"",      ВыборкаВидыСубконто.Суммовой);
		ДанныеСчета.Вставить(""ВидСубконто"" + ИндексСубконто + ""ТолькоОбороты"", ВыборкаВидыСубконто.ТолькоОбороты);
		
		ИдентификаторСубконто = XMLСтрока(ИндексСубконто);
		ДанныеСчета.ИдентификаторыСубконто.Вставить(ВыборкаВидыСубконто.ВидСубконто, ИдентификаторСубконто);
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции // -- ПолучитьСвойстваСчета()
"}
}
},
{0,
{"[Функция] - Проверки объекта на изменения",0,0,"Объект[Модифицирован]","Функция ОбъектМодифицирован(Объект, ПроверятьТабличныеЧасти = Истина, ПроверятьСтандартные = Истина) 
    
	Ссылка = Объект.Ссылка;
	Метаданное = Ссылка.Метаданные();
    
	Для каждого Реквизит из Метаданное.Реквизиты Цикл
		Если Объект[Реквизит.Имя] <> Ссылка[Реквизит.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
    
	Если ПроверятьСтандартные Тогда
		Для каждого Реквизит из Метаданное.СтандартныеРеквизиты Цикл
			Если Объект[Реквизит.Имя] <> Ссылка[Реквизит.Имя] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
    
    
    Если ПроверятьТабличныеЧасти Тогда
        Для каждого ТЧ из Метаданное.ТабличныеЧасти Цикл
            
            Если Объект[ТЧ.Имя].Количество() <> Ссылка[ТЧ.Имя].Количество() Тогда
                Возврат Истина;
            КонецЕсли;
                        
            Для Индекс = 0 по Объект[ТЧ.Имя].Количество()-1 Цикл
                ОбъектСтрокаТЧ = Объект[ТЧ.Имя][Индекс];
                СсылкаСтрокаТЧ = Ссылка[ТЧ.Имя][Индекс];
                Для каждого РеквизитТЧ из ТЧ.Реквизиты Цикл
                    Если ОбъектСтрокаТЧ[РеквизитТЧ.Имя] <> СсылкаСтрокаТЧ[РеквизитТЧ.Имя] Тогда
                        Возврат Истина;
                    КонецЕсли;
                КонецЦикла;
            КонецЦикла;
            
        КонецЦикла;        
    КонецЕсли;
    
    Возврат Ложь;
    
КонецФункции"}
}
},
{4,
{"Клиент",1,0,"",""},
{11,
{"Диалоги",1,0,"",""},
{0,
{"Диалог выбора файла (Обычный)",0,0,"Диалог[ВыбораФайла]","Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
Диалог.Заголовок = ""Выберите файл"";
Диалог.ПолноеИмяФайла = """"; 
Фильтр = ""Все файлы (*.*)|*.*""; 
Диалог.Фильтр = Фильтр; 
Диалог.МножественныйВыбор = Ложь;
Диалог.Каталог = """";
Если Диалог.Выбрать() Тогда
	// Элемент.значение = Диалог.ПолноеИмяФайла;
КонецЕсли;"}
},
{0,
{"Диалог выбора файла (ОписаниеОповещения)",0,0,"Диалог[ВыбораФайла]","Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
Диалог.Заголовок = ""Выберите файл"";
Диалог.ПолноеИмяФайла = """"; 
Фильтр = ""Все файлы (*.*)|*.*""; 
Диалог.Фильтр = Фильтр; 
Диалог.МножественныйВыбор = Ложь;
Диалог.Каталог = """";
Структура = Новый Структура(""Диалог"", Диалог);
ОписаниеОповещения = Новый ОписаниеОповещения(""ВыборФайлаОповещение"", ЭтотОбъект, Структура);
Диалог.Показать(ОписаниеОповещения); 

// Добавить процедуру
//&НаКлиенте
//Процедура ВыборФайлаОповещение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
//	Если ВыбранныеФайлы = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	Диалог = ДополнительныеПараметры.Диалог;
//КонецПроцедуры
"}
},
{0,
{"Диалог выбора каталога (Обычный)",0,0,"Диалог[ВыбораКаталога]","Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
Диалог.Заголовок = ""Выберите каталог""; 
Диалог.МножественныйВыбор = Ложь;
Диалог.Каталог = """";
Если Диалог.Выбрать() Тогда
		
КонецЕсли;"}
},
{0,
{"Диалог выбора каталога (ОпианиеОповещения)",0,0,"Диалог[ВыбораКаталога]","Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
Диалог.Заголовок = ""Выберите каталог""; 
Диалог.МножественныйВыбор = Ложь;
Диалог.Каталог = """";
ДополнительныеПараметры = Новый Структура;
ДополнительныеПараметры.Вставить(""ИмяРеквизита"", <Реквизит>);
ОписаниеОповещенияВыбораКаталога = Новый ОписаниеОповещения(""ПриВыбореКаталога"", ЭтотОбъект, ДополнительныеПараметры);
Диалог.Показать(ОписаниеОповещенияВыбораКаталога);

//// Добавить
//Процедура ПриВыбореКаталога(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт
//	
//	Если ВыбранныйКаталог = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	тотОбъект[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныйКаталог[0];
//	
//КонецПроцедуры"}
},
{0,
{"Диалог выбора цвета",0,0,"Диалог[ВыбораЦвета]","ДиалогВыбораЦвета = Новый ДиалогВыбораЦвета;
ОписаниеОповещения = Новый ОписаниеОповещения(""ВыборЦветаОповещение"", ЭтотОбъект);
ДиалогВыбораЦвета.Показать(ОписаниеОповещения);

//&НаКлиенте
//Процедура ВыборЦветаОповещение(Цвет, ДополнительныеПараметры) Экспорт 
//	Если Цвет = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	// Цвет
//КонецПроцедуры"}
},
{0,
{"Диалог выбора шрифта",0,0,"Диалог[ВыбораШрифта]","ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
ОписаниеОповещения = Новый ОписаниеОповещения(""ВыборШрифтаОповещение"", ЭтотОбъект);
ДиалогВыбораШрифта.Показать(ОписаниеОповещения);

//&НаКлиенте
//Процедура ВыборШрифтаОповещение(Шрифт, ДополнительныеПараметры) Экспорт 
//	Если Шрифт = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	// Шрифт
//КонецПроцедуры"}
},
{0,
{"Диалог выбора периода",0,0,"Диалог[ВыбораПериода]","ДиалогВыбораПериода = Новый ДиалогРедактированияСтандартногоПериода;
ДиалогВыбораПериода.Период = Новый СтандартныйПериод(Дата(1, 1, 1), Дата(1, 1, 1));
ОписаниеОповещения = Новый ОписаниеОповещения(""ВыборПериодаОповещение"", ЭтотОбъект);
ДиалогВыбораПериода.Показать(ОписаниеОповещения);

//&НаКлиенте
//Процедура ВыборПериодаОповещение(Период, ДополнительныеПараметры) Экспорт 
//	Если Период = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	// Период
//КонецПроцедуры	
"}
},
{0,
{"Ввод числа (Обычный)",0,0,"Ввод[Числа]","ВведенноеЧисло = 0;
РезультатВвода = ВвестиЧисло(ВведенноеЧисло, ""<? ""Текст запроса числа"">"");
Если РезультатВвода Тогда
	// ВведенноеЧисло
КонецЕсли;"}
},
{0,
{"Ввод числа (ОписаниеОповещения)",0,0,"Ввод[Числа]","ВведенноеЧисло = 0;
СтруктураЧисла = Новый Структура(""ВведенноеЧисло"", ВведенноеЧисло);
ОписаниеОповещения = Новый ОписаниеОповещения(""ВводЧислаОповещение"", ЭтотОбъект, СтруктураЧисла);
ПоказатьВводЧисла(ОписаниеОповещения, ВведенноеЧисло, ""<? ""Текст запроса числа"">"");

//Процедура ВводЧислаОповещение(Число, ДополнительныеПараметры) Экспорт
//	
//	ВведенноеЧисло = ?(Число = Неопределено, ДополнительныеПараметры.ВведенноеЧисло, Число);
//	
//КонецПроцедуры
"}
},
{0,
{"Ввод строки (Обычный)",0,0,"Ввод[Строки]","ВведеннаяСтрока = """";
РезультатВвода = ВвестиСтроку(ВведеннаяСтрока, ""<? ""Текст запроса строки"">"");
Если РезультатВвода Тогда
	// ВведеннаяСтрока
КонецЕсли;
"}
},
{0,
{"РежимДиалогаВопрос",0,0,"Режим[ДиалогаВопрос]","РежимДиалогаВопрос.<? ""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"",""ДаНет"", ""ДаНетОтмена"",""ДаНетОтмена"", ""ОК"",""ОК"", ""ОКОтмена"",""ОКОтмена"", ""ПовторитьОтмена"",""ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"",""ПрерватьПовторитьПропустить"">"}
}
},
{4,
{"Диалоги ввода данных",1,0,"",""},
{0,
{"Ввести дату",0,0,"Ввести[Дату]","ЗначениеВведено = ВвестиДату(<?>, ""Укажите дату"", ЧастиДаты.<?""Части даты"", ВыборВарианта, ""Дата"", ""Дата"", ""Дата и время"", ""ДатаВремя"", ""Время"", ""Время"">);"}
},
{0,
{"Ввести значение",0,0,"Ввести[Значение]","ЗначениеВведено = ВвестиЗначение(<?>, ""Введите "", <?"""", КонструкторОписанияТипов>);"}
},
{0,
{"Ввести строку",0,0,"Ввести[Строку]","ЗначениеВведено = ВвестиСтроку(<?>, ""Введите "", <?""Длина строки"">, <?"""", ВыборВарианта, ""Не многострочная"", ""Ложь"", ""Многострочная"", ""Истина"">);"}
},
{0,
{"Ввести число",0,0,"Ввести[Число]","ЗначениеВведено = ВвестиЧисло(<?>, ""Введите "", <?""Длина"">, <?""Точность"">);"}
}
},
{12,
{"Форма",1,0,"",""},
{0,
{"Обновить произвольную форму",0,0,"Опов[еститьОбИзменении]","ОповеститьОбИзменении(Тип(""<?""Выберите тип"", ВыборТипа>"")); // Выбирать объект конфигурации с суффиксом ""Ссылка"""}
},
{0,
{"Открыть форму (с параметрами)",0,0,"Открыть[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
ОткрытьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"", ПараметрыФормы);"}
},
{0,
{"Получить форму (с параметрами)",0,0,"Получить[Форму]","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );
Форма = ПолучитьФорму(""ОбщаяФорма.<?""Выберите общую форму"", ОбъектМетаданных, ""ОбщаяФорма"">"");
"}
},
{0,
{"Обработка оповещения",0,0,"Обработка[Оповещения]","&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = ""<? ""Имя события"">"" Тогда
		// действие
	КонецЕсли;
	
КонецПроцедуры"}
},
{1,
{"Модуль менеджера",1,0,"",""},
{0,
{"[Процедура]  Представление наименования объекта",0,0,"Предст[авлениеОбъекта]","// Модуль менеджера Объекта
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(""<? ""Наименование""> № %1 от %2""
								, Формат(Данные.Ссылка.Номер, ""ЧГ="")
								, Формат(Данные.Ссылка.Дата, ""ДФ=dd.MM.yyyy""));
	
КонецПроцедуры"}
}
},
{3,
{"ПолеHTML",1,0,"",""},
{0,
{"Заполнить объект Form и Submit",0,0,"HTML[ЗаполнитьФорму]","ДокументHTML = Элементы.ПолеHTML.Документ;
FormЛогинПароль = ДокументHTML.getElementById(""FormID"");
FormЛогинПароль.login.value = ""login"";
FormЛогинПароль.password.value = ""password"";
FormЛогинПароль.submit();
"}
},
{0,
{"Исходный код страницы",0,0,"HTML[ИсходныйКодСтраницы]","ДокументHTML = Элементы.ПолеHTML.Документ;
HTMLИсходныйКодСтраницы = ДокументHTML.documentElement.innerHTML;"}
},
{0,
{"Получить элемент страницы",0,0,"HTML[Элемент]","ДокументHTML = Элементы.<? ""Имя ПолеHTML"">;
HTMLЭлемент = ДокументHTML.querySelector(""button[class=""""btn btn-primary center-block""""]""); // пример
// HTMLЭлемент.click();"}
}
},
{7,
{"Реквизиты формы",1,0,"",""},
{0,
{"Реквизит формы по имени",0,0,"Рекв[изитФормы]","ЭтотОбъект[""<?""Имя реквизита"">""]"}
},
{0,
{"Проверить заполнение реквизитов формы",0,0,"Пров[еритьЗаполнение]","ПроверитьЗаполнение();"}
},
{0,
{"Реквизиты формы ВСЕ",0,0,"Рекв[изитыФормы]","РеквизитыФормы = Новый Структура;
Для Каждого Эл Из ПолучитьРеквизиты() Цикл 
	РеквизитыФормы.Вставить(Эл.Имя, ЭтотОбъект[Эл.Имя]);
КонецЦикла;
"}
},
{0,
{"Загрузить Реквизит формы",0,0,"Рекв[изитВосстановитьЗначение]","// ""ПриОткрытии"", для загрузки значения реквизитов формы (пригодится для динамических реквизитов)
// в связке с ""СохранитьЗначение""
ИмяРеквизита = """";
Значение = ВосстановитьЗначение(ИмяРеквизита);
Если ЗначениеЗаполнено(Значение) Тогда 
	ЭтотОбъект[ИмяРеквизита] = Значение;
КонецЕсли;
"}
},
{0,
{"Сохранить Реквизит формы",0,0,"Рекв[изитСохранитьЗначение]","// ПередЗакрытием, для созхранения значения реквизитов формы (пригодится для динамических реквизитов)
// в связке с ВосстановитьЗначение
ИмяРеквизита = """";
СохранитьЗначение(ИмяРеквизита, ЭтотОбъект[ИмяРеквизита]);"}
},
{0,
{"[Процедура] - Проверка существования реквизита",0,0,"Рекв[изитСуществует]","&НаКлиенте
Функция ПроверкаНаСвойствоОбъекта(ИмяСвойстваОбъекта) Экспорт

	Ключуникальности = Новый Уникальныйидентификатор;
	СтруктураРеквизита = Новый Структура (ИмяСвойстваОбъекта, КлючУникальности);
	ЗаполнитьЗначенияСвойств (СтруктураРеквизита, ЭтаФорма);
	
	Возврат СтруктураРеквизита[ИмяСвойстваОбъекта] <> Ключуникальности;
   
КонецФункции
"}
},
{0,
{"[Процедура] - Проверка существования свойства объекта",0,0,"Рекв[изитСуществует]","Функция ПроверкаНаСвойствоОбъекта(ИмяСвойстваОбъекта) Экспорт

   ЕстьСвойство = Ложь;
   СтруктураОбъекта = Новый Структура(ИмяСвойстваОбъекта, Неопределено);
   ЗаполнитьЗначенияСвойств(СтруктураОбъекта, ЭтотОбъект);

   Если СтруктураОбъекта[ИмяСвойстваОбъекта] = Неопределено Тогда
       СтруктураОбъекта[ИмяСвойстваОбъекта] = Ложь;
       ЗаполнитьЗначенияСвойств(СтруктураОбъекта, ЭтотОбъект);
       Если СтруктураОбъекта[ИмяСвойстваОбъекта] <> Ложь Тогда
           ЕстьСвойство = Истина;
       КонецЕсли;
   Иначе
       ЕстьСвойство = Истина;
   КонецЕсли;

   Возврат ЕстьСвойство;// Булево

КонецФункции
"}
}
},
{9,
{"Создание элементов формы (программно)",1,0,"",""},
{0,
{"Создание ПоляФормы",0,0,"Поле[ФормыНовое]","ПолеФормыНовое = ЭтаФорма.Элементы.Добавить(""<? ""Имя ПолеФормы"">"", Тип(""ПолеФормы""), ЭтаФорма);
ПолеФормыНовое.Вид = ВидПоляФормы.ПолеВвода;
ПолеФормыНовое.ПутьКДанным = ""<? ""Путь к данным"">"";"}
},
{0,
{"Создание ГруппаФормы",0,0,"Группа[Формы]","<? ""Имя группы""> = Элементы.Добавить(""<? ""Имя группы"">"", Тип(""ГруппаФормы""), ЭтаФорма);
<? ""Имя группы"">.Вид = ВидГруппыФормы.ОбычнаяГруппа;
<? ""Имя группы"">.Отображение = ОтображениеОбычнойГруппы.<? ""Отображение группы"", ВыборВарианта, ""Нет"",""Нет"", ""ОбычноеВыделение"",""ОбычноеВыделение"", ""СильноеВыделение"",""СильноеВыделение"", ""СлабоеВыделение"",""СлабоеВыделение"">;
<? ""Имя группы"">.ОтображатьЗаголовок = <? ""Отображать заголовок"", ВыборВарианта, ""Да"",""Истина"", ""Нет"",""Ложь"">; 
<? ""Имя группы"">.Группировка = ГруппировкаПодчиненныхЭлементовФормы.<? ""Тип группировки"", ВыборВарианта, ""Вертикальная"",""Вертикальная"", ""ГоризонтальнаяВсегда"",""ГоризонтальнаяВсегда"", ""ГоризонтальнаяЕслиВозможно"",""ГоризонтальнаяЕслиВозможно"">;
<? ""Имя группы"">.РастягиватьПоГоризонтали = <? ""Растягивать по горизонтали"", ВыборВарианта, ""Да"",""Истина"", ""Нет"",""Ложь"">"}
},
{0,
{"Создание ГруппаСтраницы",0,0,"Группа[Формы]","<? ""Имя группы страниц""> = Элементы.Добавить(""<? ""Имя группы страниц"">"", Тип(""ГруппаФормы""), ЭтаФорма);
<? ""Имя группы страниц"">.Вид = ВидГруппыФормы.Страницы;
<? ""Имя группы страниц"">.ОтображениеСтраниц = ОтображениеСтраницФормы.<? ""Расположение закладок"", ""Авто"",""Авто"", ""ЗакладкиСверху"",""ЗакладкиСверху"", ""ЗакладкиСлеваГоризонтально"",""ЗакладкиСлеваГоризонтально"", ""ЗакладкиСнизу"",""ЗакладкиСнизу"", ""ЗакладкиСправаГоризонтально"",""ЗакладкиСправаГоризонтально"", ""Нет"",""Нет"", ""Пролистывание"",""Пролистывание"">;
<? ""Имя группы страниц"">.РастягиватьПоГоризонтали = <? ""Растягивать по горизонтали"", ВыборВарианта, ""Да"",""Истина"", ""Нет"",""Ложь"">"}
},
{0,
{"Создание ГруппаСтраницы - Страница",0,0,"Группа[Формы]","<? ""Имя страницы""> = Элементы.Добавить(<? ""Имя страницы"">, Тип(""ГруппаФормы""), ГруппаСтраниц);
<? ""Имя страницы"">.Вид = ВидГруппыФормы.Страница;
<? ""Имя страницы"">.Заголовок = ""<? ""Наименование страницы"">"";"}
},
{0,
{"Создание ДекорацияНадпись",0,0,"Декор[ация]","<? ""Имя декорации""> = ЭтаФорма.Элементы.Добавить(""<? ""Имя декорации"">"", Тип(""ДекорацияФормы""),СтраницаТовары);
<? ""Имя декорации"">.Вид = ВидДекорацииФормы.Надпись;
<? ""Имя декорации"">.Заголовок = ""<? ""Текст надписи"">"";"}
},
{0,
{"Создание ДекорацияКартинка",0,0,"Декор[ация]","<? ""Имя элемента""> = ЭтаФорма.Элементы.Добавить(""<? ""Имя элемента"">"", Тип(""ДекорацияФормы""), ЭтаФорма);
<? ""Имя элемента"">.Вид = ВидДекорацииФормы.Картинка;
<? ""Имя элемента"">.Картинка = БиблиотекаКартинок.<? БиблиотекаКартинок>;
<? ""Имя элемента"">.РазмерКартинки = РазмерКартинки.<? ""Размер картинки"", ВыборВарианта, ""АвтоРазмер"",""АвтоРазмер"", ""АвтоРазмерБезУчетаМасштаба"",""АвтоРазмерБезУчетаМасштаба"", ""ПоРазмеруШрифта"",""ПоРазмеруШрифта"", ""Пропорционально"",""Пропорционально"", ""Растянуть"",""Растянуть"", ""РеальныйРазмер"",""РеальныйРазмер"", ""РеальныйРазмерБезУчетаМасштаба"",""РеальныйРазмерБезУчетаМасштаба"", ""РеальныйРазмерБезУчетаМасштаба"",""РеальныйРазмерБезУчетаМасштаба"", ""Черепица"",""Черепица"">;
//<? ""Имя элемента"">.Ширина = 20;
//<? ""Имя элемента"">.Высота = 8;"}
},
{0,
{"Создание РеквизитаФормы",0,0,"Реквизит[Формы]","ДобавляемыеРеквизиты = Новый Массив;
<? ""Имя реквизита""> = Новый РеквизитФормы(<? ""Имя реквизита"">, <?""Конструктор описания типов"", КонструкторОписанияТипов>); 
ДобавляемыеРеквизиты.Добавить(<? ""Имя реквизита"">);	
ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);"}
},
{0,
{"Создание КомандыФормы",0,0,"Команда[Формы]","КомандаФормы = ЭтаФорма.Команды.Добавить(""<? ""Имя команды"">"");
КомандаФормы.Заголовок = ""<? ""Имя команды"">"";
КомандаФормы.Действие = ""<? ""Имя команды"">""; //указываем только имя процедуры"}
},
{0,
{"Изменение Типа",0,0,"","ИмяРеквизитаФормы = ""<?""Имя реквизита формы"">"";
ИмяОбъекта = """";

Объект[<?""Имя реквизита формы"">] = ПланыСчетов[ИмяОбъекта].ПустаяСсылка();

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип(СтрШаблон(""ПланСчетовСсылка.%1"", ИмяОбъекта)));
ОписаниеПланСчета = Новый ОписаниеТипов(МассивТипов);

Элементы[<?""Имя реквизита формы"">].ОграничениеТипа = ОписаниеПланСчета;
Объект[<?""Имя реквизита формы"">] = ОписаниеПланСчета.ПривестиЗначение(Объект[<?""Имя реквизита формы"">]);
"}
}
},
{9,
{"Сообщение / Вопрос / Предупреждение",1,0,"",""},
{0,
{"Сообщение (ОбщегоНазначенияКлиентСервер.СообщитьПользователю) - Устарела",0,0,"Сообщ[ение]","ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""<? ""Текст сообщения"">"");"}
},
{0,
{"Сообщение (ОбщегоНазначения.СообщитьПользователю)",0,0,"Сообщ[ение]","ОбщегоНазначения.СообщитьПользователю(""<? ""Текст сообщения"">"")"}
},
{0,
{"Вопрос (ОписаниеОповещения)",0,0,"Вопрос","ДополнительныеПараметры = Новый Структура();
ОписаниеОповещения = Новый ОписаниеОповещения(""ПоказатьВопросОповещение"", ЭтотОбъект, ДополнительныеПараметры);
ПоказатьВопрос(ОписаниеОповещения, ""<? ""Вопрос"">"", РежимДиалогаВопрос.<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""ДаНет"", ""ДаНетОтмена"", ""ДаНетОтмена"", ""ОК"", ""ОК"", ""ОКОтмена"", ""ОКОтмена"", ""ПовторитьОтмена"", ""ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""ПрерватьПовторитьПропустить"">);
	
//&НаКлиенте
//Процедура ПоказатьВопросОповещение(РезультатВопроса, ДополнительныеПараметры) Экспорт
//	Ответ = РезультатВопроса;
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		//Логика загрузки
//	КонецЕсли;
//КонецПроцедуры"}
},
{0,
{"Вопрос (Асинх)",0,0,"Вопрос","Ответ = Ждать ВопросАсинх(""<? ""Текст вопроса"">"", <? ""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"",""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"",""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"",""РежимДиалогаВопрос.ОК"", ""ОКОтмена"",""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"",""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"",""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
Если Ответ <? """", ВыборВарианта, ""Равен"",""="", ""Не равен"",""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"",""КодВозвратаДиалога.Да"", ""Нет"",""КодВозвратаДиалога.Нет"", ""ОК"",""КодВозвратаДиалога.ОК"", ""Отмена"",""КодВозвратаДиалога.Отмена"", ""Повторить"",""КодВозвратаДиалога.Повторить"", ""Прервать"",""КодВозвратаДиалога.Прервать"", ""Пропустить"",""КодВозвратаДиалога.Пропустить"", ""Тайаут"",""КодВозвратаДиалога.Таймаут""> Тогда
	// ...	
КонецЕсли; 
"}
},
{0,
{"Показать оповещение пользователя (простое)",0,0,"Показать[ОповещениеПользователя]","ПоказатьОповещениеПользователя(""<?""Текст оповещения"">"");"}
},
{0,
{"Показать оповещение пользователя (пояснения параметров)",0,0,"Показать[ОповещениеПользователя]","ПоказатьОповещениеПользователя(
	""<?""Текст заголовка"">"" 		// Текст заголовка
	, 							// Навигационная ссылка
	, ""<?""Текст пояснения"">""	// текст пояснения
	, 							// Картинка
);	
"}
},
{0,
{"Показать оповещение пользователя (НавигационнаяСсылка)",0,0,"Показать[ОповещениеПользователя]","НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект.Ссылка);
ПоказатьОповещениеПользователя(""<?""Текст оповещения"">"", НавигационнаяСсылка, Строка(Объект.Ссылка));"}
},
{0,
{"Предупреждение (Обычное)",0,0,"Показать[Предупреждение]","ПоказатьПредупреждение( ,<?>, 60);"}
},
{0,
{"Предупреждение (ОписаниеОповещения)",0,0,"Показать[Предупреждение]","ОписаниеОповещения = Новый ОписаниеОповещения(""<? ""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьПредупреждение(ОписаниеОповещения, <?>, 60);

////Вынести в отдельную процедуру
//&НаКлиенте
//Процедура <?""Имя процедуры обработчика"">(ДополнительныеПараметры) Экспорт
//	
//КонецПроцедуры
"}
}
},
{4,
{"ТабличнаяЧасть",1,0,"",""},
{0,
{"Текушая cтрока",0,0,"Тек[ущаяСтрока]","ТекущаяСтрока = Элементы.<?>.ТекущаяСтрока;"}
},
{0,
{"Текущие данные (ТаблицаЗначений)",0,0,"Тек[Данные]","ТекДанные = Элемент.<?>ТекущиеДанные;"}
},
{0,
{"Выделенные строки (в массив)",0,0,"Выд[еленныеСтроки]","ВыделенныеСтроки = Элементы.<?>.ВыделенныеСтроки;
Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
	//ТекСтрока. = ;
КонецЦикла;"}
},
{0,
{"Выледенные строки (Построитель)",0,0,"Выд[еленныеСтроки]","Построитель = Новый ПостроительОтчета;
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ДокументСписок);
Выборка = Построитель.Результат.Выбрать();
Пока Выборка.Следующий() Цикл
	
КонецЦикла;
"}
}
},
{2,
{"Прочее",1,0,"",""},
{0,
{"СтандартнаяОбработка",0,0,"Стандарт[наяОбработка]","СтандартнаяОбработка = Ложь;"}
},
{0,
{"Отказ",0,0,"Отказ","Отказ = <? """", ВыборВарианта, ""Истина"",""Истина"", ""Ложь"",""Ложь"">"}
}
},
{3,
{"УсловноеОформление",1,0,"",""},
{0,
{"УсловноеОформление - групповое условие",0,0,"Услов[ноеОформление]","	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ГруппаИЛИ = ЭлементОформления.Отбор.Элементы.Добавить(Тип(""ГруппаЭлементовОтбораКомпоновкиДанных""));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаИЛИ.Использование = Истина;
	
	ЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""Объект.Стоимость"");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = 100000;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""Объект.Стоимость"");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 2000000;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветФона"", WebЦвета.Лосось);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(""Стоимость"");
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления.Использование = Истина;
"}
},
{0,
{"Условное оформление - простое условие",0,0,"Услов[ноеОформление]","	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""Объект.Стоимость"");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 1 000 000;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветФона"", WebЦвета.Лосось);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(""Стоимость"");
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления.Использование = Истина;"}
},
{0,
{"Декомпилятор условного оформления",0,0,"Услов[ноеОформлениеДекомпилятор]","	// https://infostart.ru/1c/tools/1171297/
	Если Параметры.Свойство(""ДекомпиляцияУсловногоОформления"") Тогда
		ВнешниеОбработки.Создать(ЭтаФорма.Параметры.ДекомпиляцияУсловногоОформления.ИмяПодключеннойОбработки,Ложь).ОпределитьКодУсловногоОформления(ЭтаФорма);
	КонецЕсли;
"}
}
}
},
{1,
{"ФормаВыбора",1,0,"",""},
{0,
{"ФормаВыбора с отбором",0,0,"Открыть[ФормуВыбора]","СтандартнаяОбработка = Ложь;
МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(<Значение>);
Отбор = Новый Структура;
Отбор.Вставить(""Отбор"", Новый Структура(""<Имя реквизита>"", МассивОтбора));
Отбор.Вставить(""МножественныйВыбор"", Ложь);
ЗакрытиеВыбора = Новый ОписаниеОповещения(""ПриЗакрытииФормыВыбора"", ЭтотОбъект, ""Подбор"");
ОткрытьФорму(""<ОбъектКонфигурации>.ФормаВыбора"", Отбор, ЭтаФорма, , , , ЗакрытиеВыбора);

//// Добавить ОписаниеОповещения в код
//&НаКлиенте
//Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт 
//	
//	Если Значение = Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	Объект.<Реквизит> = Значение;
//	
//КонецПроцедуры
"}
}
}
},
{16,
{"Код для разработки",1,0,"",""},
{6,
{"Базы данных SQL",1,0,"",""},
{0,
{"Подключение к SQL-серверу",0,0,"SQL","//Инициализация переменных
ИмяСервераSQL = ""WIN2012\TEST_SQL"";
ПользовательSQL = ""UserDB"";
ПарольSQL = ""Pass123456"";
БазаДанныхSQL = ""TestDB"";
ТаблицаSQL = ""Table_1"";
/////////////////////////////////////////
//Подключение к SQL-серверу
Попытка
Соединение  = Новый COMОбъект(""ADODB.Connection"");
	Команда     = Новый COMОбъект(""ADODB.Command"");
	Выборка     = Новый COMОбъект(""ADODB.RecordSet"");
	Соединение.ConnectionString =
		""driver={SQL Server};"" +
		""server=""+ИмяСервераSQL+"";""+
		""uid=""+ПользовательSQL+"";""+
		""pwd=""+ПарольSQL+"";""+
		""database=""+БазаДанныхSQL+"";"";
	Соединение.ConnectionTimeout = 30;
	Соединение.CommandTimeout = 600;
	//Открытие соединение
	Соединение.Open();
	Команда.ActiveConnection   = Соединение;
	Сообщить(""Успешное подключение!"");
Исключение
	Сообщить(ОписаниеОшибки());
	Возврат;
КонецПопытки;"}
},
{0,
{"Закрытие соединения",0,0,"SQL","//Закрытия соединения
Попытка
	Соединение.Close();
	Сообщить(""Соединение закрыто!"");
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
},
{0,
{"Добавление записей в таблицу",0,0,"SQL","//Добавляем запись в таблицу
ТекДата = ТекущаяДата();
ТекСтрока = ""Запись строки"";
ТекЧисло = 123456;

//Приобразуем данные
Если НЕ ЗначениеЗаполнено(ТекДата) Тогда
	ТекДата = Дата(1753,1,1); //Для пустой даты необходимо отправлять 01.01.1753
КонецЕсли;
ТекЧисло = Формат(ТекЧисло,""ЧГ=""); //Удаляем пробелы

ТекстТекущейИнструкции =
	""INSERT INTO ""+ТаблицаSQL+""
	|([C_DateTime], [C_Char], [C_Numeric])
	|VALUES ('""+ТекДата+""', N'""+ТекСтрока+""', '""+ТекЧисло+""')"";
Попытка
	Соединение.Execute(ТекстТекущейИнструкции,,128);
	Сообщить(""Запись добавлена!"");
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
},
{0,
{"Обновление записей в таблице",0,0,"SQL","//Обновляем записи в таблице с C_Numeric = 123456
ТекЧисло = 123456;
ТекДатаНовая = Дата(1,1,1);
ТекСтрокаНовая = ""Обновленная запись строки"";

//Приобразуем данные
Если НЕ ЗначениеЗаполнено(ТекДатаНовая) Тогда
	ТекДатаНовая = Дата(1753,1,1); //Для пустой даты необходимо отправлять 01.01.1753
КонецЕсли;
ТекЧисло = Формат(ТекЧисло,""ЧГ=""); //Удаляем пробелы

ТекстТекущейИнструкции =
	""UPDATE ""+ТаблицаSQL+""
	|SET
	|   [C_Char] = N'""+ТекСтрокаНовая+""',
	|   [C_DateTime] = '""+ТекДатаНовая+""'
	|WHERE [C_Numeric]='""+ТекЧисло+""'"";
Попытка
	Соединение.Execute(ТекстТекущейИнструкции,,128);
	Сообщить(""Запись обновлена!"");
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
},
{0,
{"Просмотр выборки из таблицы",0,0,"SQL","//Читаем записи
ТекстИнструкции =
	""SELECT
	|   [C_DateTime], [C_Char], [C_Numeric]
	|FROM ""+ТаблицаSQL;
Попытка
	Команда.CommandText = ТекстИнструкции;
	Выборка = Команда.Execute();
	Если Выборка.BOF = Ложь Тогда
		Выборка.MoveFirst();
		Пока Выборка.EOF = Ложь Цикл
			Сообщить(""[C_DateTime]=""+Дата(Выборка.Fields(""C_DateTime"").Value)
			+"", [C_Char]=""+СокрЛП(Выборка.Fields(""C_Char"").Value)
			+"", [C_Numeric]=""+Число(Выборка.Fields(""C_Numeric"").Value));
			Выборка.MoveNext();
		КонецЦикла;
	КонецЕсли;
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
},
{0,
{"Удаление записей из таблицы",0,0,"SQL","//Удаляем записи в таблице с C_Numeric = 123456
ТекЧисло = 123456;
ТекЧисло = Формат(ТекЧисло,""ЧГ=""); //Удаляем пробелы

ТекстТекущейИнструкции =
	""DELETE FROM ""+ТаблицаSQL+""
	|WHERE [C_Numeric]='""+ТекЧисло+""'"";
Попытка
	Соединение.Execute(ТекстТекущейИнструкции,,128);
	Сообщить(""Запись удалена!"");
Исключение
	Сообщить(ОписаниеОшибки());
КонецПопытки;"}
}
},
{3,
{"ВнешняяОбработка",1,0,"",""},
{0,
{"Сведения о внешней обработке (сокр)",0,0,"Свед[енияОВнешнейОбработке]","Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить(""Вид"", ""<?"""", ВыборВарианта, ""Печатная форма"", ""ПечатнаяФорма"", ""Форма заполнения"", ""ЗаполнениеОбъекта"", ""Создать на основании"", ""СозданиеСвязанныхОбъектов"", ""Отчет"", ""Отчет"", ""Сервис - Дополнительные обработки"", ""ДополнительнаяОбработка"", ""Сервис - Дополнительные отчеты"", ""ДополнительныйОтчет"">"");
	ПараметрыРегистрации.Вставить(""Наименование"", ""<?""Название обработки"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", <?""Безопасный режим"", ВыборВарианта, ""Ложь"", ""Ложь"", ""Истина"", ""Истина"">);
	ПараметрыРегистрации.Вставить(""Версия"", ""<?""Версия"">""); 
	ПараметрыРегистрации.Вставить(""Информация"", ""<?""Краткая информация об обработке"">""); 
	
	Возврат ПараметрыРегистрации;	

КонецФункции
"}
},
{0,
{"Сведения о внешней обработке",0,0,"Свед[енияОВнешнейОбработке]","Функция СведенияОВнешнейОбработке() Экспорт
	
	//В обработке не забывайте заполнять: Свойство - Хранилище вариантов ""ХранилищеВариантовОтчетов""
	ПарамРегистрации = Новый Структура;
	ПарамРегистрации.Вставить(""Вид"", ""<?"""", ВыборВарианта, ""Печатная форма"", ""ПечатнаяФорма"", ""Форма заполнения"", ""ЗаполнениеОбъекта"", ""Создать на основании"", ""СозданиеСвязанныхОбъектов"", ""Отчет"", ""Отчет"", ""Сервис - Дополнительные обработки"", ""ДополнительнаяОбработка"", ""Сервис - Дополнительные отчеты"", ""ДополнительныйОтчет"">"");
	//ПарамРегистрации.Вставить(""Назначение"", ""Документ.ИмяДокумента"");  // указываем вид документа
	ПарамРегистрации.Вставить(""Наименование"", ""<?""Наименование обработки (без пробелов)"">"");
	//Р - номер редакции (минимум 1 цифра, может занимать и больше разрядов);
	//П - номер подредакции (минимум 1 цифра, может занимать и больше разрядов);
	//З - номер версии (минимум 1 цифра, может занимать и больше разрядов);
	//С - номер сборки (минимум 1 цифра, может занимать и больше разрядов).
	ПарамРегистрации.Вставить(""Версия"", ""<?""Версия формата {Р|РР}.{П|ПП}.{З|ЗЗ}.{С|СС}"">"");
	ПарамРегистрации.Вставить(""Информация"", ""<?""Информация об обработке"">"");
	ПарамРегистрации.Вставить(""ВерсияБСП"", ""<?""Версия БСП"">"");
	ПарамРегистрации.Вставить(""БезопасныйРежим"", <?""Безопасный режим"", ВыборВарианта, ""Ложь"", ""Ложь"", ""Истина"", ""Истина"">);
	ПарамРегистрации.Вставить(""ИспользоватьДляФормыОбъекта"", <?""Использовать для формы объекта"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">);
	
	СписокКоманд = Новый ТаблицаЗначений;
	СписокКоманд.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));
	СписокКоманд.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка""));
	СписокКоманд.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка""));
	СписокКоманд.Колонки.Добавить(""ПоказыватьОповещение"", Новый ОписаниеТипов(""Булево""));
	СписокКоманд.Колонки.Добавить(""Модификатор"", Новый ОписаниеТипов(""Строка""));
	СписокКоманд.Колонки.Добавить(""ОткрытиеФормы"", Новый ОписаниеТипов(""Булево""));
	
	ПарамРегистрации.Вставить(""Команды"", СписокКоманд);
	Команда = ПарамРегистрации.Команды.Добавить();
	Команда.Представление = НСтр(""ru = '<?""Тескт команды"">'"");
	Команда.Идентификатор = ""<?""Тескт команды"">"";
	Команда.Использование = ""<?""Тип команды"", ВыборВарианта, ""ОткрытиеФормы"", ""ОткрытиеФормы"", ""ЗаполнениеФормы"", ""ЗаполнениеФормы"", ""ЗагрузкаДанныхИзФайла"", ""ЗагрузкаДанныхИзФайла"", ""ВызовКлиентскогоМетода"", ""ВызовКлиентскогоМетода"", ""ВызовСерверногоМетода"", ""ВызовСерверногоМетода"">"";
	Команда.ОткрытиеФормы = Истина;
	Команда.ПоказыватьОповещение = Истина;
	
	Возврат ПарамРегистрации;
	
КонецФункции"}
},
{6,
{"Печатные формы",1,0,"",""},
{0,
{"Внешняя печатная форма",0,0,"ВПФ","Функция СведенияОВнешнейОбработке()

	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;    
	МассивНазначений.Добавить(""Документ.<?""Выберите документ"", Документ>"");
	
	ПараметрыРегистрации.Вставить(""Вид"", ""ПечатнаяФорма"");
	ПараметрыРегистрации.Вставить(""Назначение"", МассивНазначений);
	ПараметрыРегистрации.Вставить(""Наименование"", ""<? ""Имя регистрации"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Ложь);
	ПараметрыРегистрации.Вставить(""Версия"", ""1.0.0.1""); 
	ПараметрыРегистрации.Вставить(""Информация"", ""<? ""Информация о внешней печатной форме"">""); 
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, ""<? ""Заголовок печатной формы""> (ВПФ)""
									, ""<? ""Имя регистрации"">""
									, ""ВызовСерверногоМетода""
									, Истина
									, ""ПечатьMXL"");
	ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;	

КонецФункции // -- СведенияОВнешнейОбработке()

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить(""Представление"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Использование"", Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""ПоказыватьОповещение"", Новый ОписаниеТипов(""Булево""));
	Команды.Колонки.Добавить(""Модификатор"", Новый ОписаниеТипов(""Строка""));
	
	Возврат Команды;
	
КонецФункции // -- ПолучитьТаблицуКоманд()

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор
							, Использование, ПоказыватьОповещение = Ложь, Модификатор = """")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление; 
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм
						, ОбъектыПечати, ПараметрыВывода) Экспорт
						
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм
										, ""<? ""Имя регистрации"">""
										, ""<? ""Заголовок печатной формы""> (ВПФ)""
										, СформироватьПечатнуюФорму(ЭлементМассива
																	, ОбъектыПечати));
	КонецЦикла;
	
КонецПроцедуры // -- Печать()"}
},
{0,
{"Печатная форма",0,0,"ПФ","ТабДок = Новый ТабличныйДокумент;
Макет = <Путь до макета>.ПолучитьМакет(""<НаименованиеМакета>"");
Область = Макет.ПолучитьОбласть(""<НаименованиеОбласти>"");
ТабДок.Вывести(Область);

ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
ТабДок.АвтоМасштаб = Истина;
ТабДок.Показать();"}
},
{0,
{"Проверка существания области в макете",0,0,"Область[Существует]","ОбластьСуществует = ЗначениеЗаполнено(Макет.Области.Найти(""<? ""Имя области"">""))"}
},
{0,
{"Чтение ячеек макета",0,0,"","Массив = Новый Массив;
ЭлОбъект = Отчеты.<? ""Выберите отчет"", Отчет>;
Макет = ЭлОбъект.ПолучитьМакет(""<? ""Имя отчета"">"");
Стр = 1; // пример по первой колонке
Пока истина Цикл
    Адрес = СтрШаблон(""R%1C1"", Формат(Стр, ""ЧГ="")); 
    Значение = Макет.Область(Адрес).Текст;
    Если ПустаяСтрока(Значение) Тогда
        Прервать;
    КонецЕсли;      
    Массив.Добавить(Значение);
    Стр = Стр + 1;
КонецЦикла;
"}
},
{1,
{"Оформление печатной формы",1,0,"",""},
{0,
{"Линия",0,0,"Линия","Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);"}
}
},
{1,
{"Данные для макетов",1,0,"",""},
{0,
{"Сведения об Юр/Физ лице",0,0,"СведенияОбФизЮрЛице","СведенияОбФизЮрЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(<?""Ссылка"">, ТекущаяДата());
Область.Параметры.<?""ИмяПараметра""> = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбФизЮрЛице);
"}
}
}
}
},
{6,
{"Запросы",1,0,"",""},
{0,
{"Запрос",0,0,"Запрос","Запрос<?""Имя запроса (без пробелов)""> = Новый Запрос;
Запрос<?""Имя запроса (без пробелов)"">.Текст = 
	""<?"""", ТекстЗапроса>"";
РезультатЗапроса = Запрос<?""Имя запроса (без пробелов)"">.Выполнить();

Выборка = РезультатЗапроса.Выбрать();
Пока Выборка.Следующий() Цикл 
	<?>
КонецЦикла;
"}
},
{0,
{"Запрос с параметром",0,0,"","Запрос<?""Имя запроса (без пробелов)""> = Новый Запрос;
Запрос<?""Имя запроса (без пробелов)"">.Текст = 
	""<?"""", ТекстЗапроса>"";
РезультатЗапроса = Запрос<?""Имя запроса (без пробелов)"">.Выполнить();
Запрос.УстановитьПараметр(""<?""Имя параметра"">"", <?""Параметр"">);

Выборка = РезультатЗапроса.Выбрать();
Пока Выборка.Следующий() Цикл 
	<?>
КонецЦикла;"}
},
{0,
{"Менеджер временных таблиц",0,0,"Менед[жерВременныхТаблиц]","Запрос<?""Имя запроса (без пробелов)""> = Новый Запрос;
МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
Запрос<?""Имя запроса (без пробелов)"">.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
Запрос<?""Имя запроса (без пробелов)"">.Текст = 
	""<?""Текст запроса МенеджераВременныхТаблиц"", ТекстЗапроса>"";
РезультатЗапроса = Запрос<?""Имя запроса (без пробелов)"">.Выполнить();

Запрос<?""Имя запроса (без пробелов)"">.Текст = ""<?""Текст запроса"", ТекстЗапроса>"";
РезультатЗапроса = Запрос<?""Имя запроса (без пробелов)"">.Выполнить();
Выборка = РезультатЗапроса.Выбрать();
Пока Выборка.Следующий() Цикл 
	<?>
КонецЦикла;
"}
},
{0,
{"Установить параметр",0,0,"Запрос[УстановитьПараметр]","Запрос<?""Имя запроса (без пробелов)"">.УстановитьПараметр(""<?""Параметр запроса"">"", <?""Реквизит"">);<?>"}
},
{0,
{"Проверка запрос пустой",0,0,"Запрос[Пустой]","Если РезультатЗапроса.Пустой() Тогда 
	<?>
КонецЕсли;
"}
},
{2,
{"Операторы Запроса",1,0,"",""},
{4,
{"Функции",1,0,"",""},
{12,
{"Функции работы со строками",1,0,"",""},
{0,
{"СТРОКА(<Выражение>)",0,0,"","СТРОКА(<Выражение>)"}
},
{0,
{"ДЛИНАСТРОКИ(<Строка>)",0,0,"","ДЛИНАСТРОКИ(<Строка>)"}
},
{0,
{"ЛЕВ(<Строка>, <ЧислоСимволов>)",0,0,"",""}
},
{0,
{"ПРАВ(<Строка>, <ЧислоСимволов>)",0,0,"",""}
},
{0,
{"ВРЕГ(<Строка>)",0,0,"",""}
},
{0,
{"НРЕГ(<Строка>)",0,0,"",""}
},
{0,
{"ПОДСТРОКА(<Строка>, <НачальнаяПозиция>, <Длина>)",0,0,"",""}
},
{0,
{"СОКРЛ(<Строка>)",0,0,"",""}
},
{0,
{"СОКРП(<Строка>)",0,0,"",""}
},
{0,
{"СОКРЛП(<Строка>)",0,0,"",""}
},
{0,
{"СТРНАЙТИ(<Строка>, <ПодстрокаПоиска>)",0,0,"",""}
},
{0,
{"СТРЗАМЕНИТЬ(<Строка>, <ПодстрокаПоиска>, <ПодстрокаЗамены>)",0,0,"",""}
}
},
{16,
{"Функции работы с датами",1,0,"",""},
{0,
{"ГОД(<Дата>)",0,0,"",""}
},
{0,
{"КВАРТАЛ(<Дата>)",0,0,"",""}
},
{0,
{"МЕСЯЦ(<Дата>)",0,0,"",""}
},
{0,
{"ДЕНЬГОДА(<Дата>)",0,0,"",""}
},
{0,
{"ДЕНЬ(<Дата>)",0,0,"",""}
},
{0,
{"НЕДЕЛЯ(<Дата>)",0,0,"",""}
},
{0,
{"ДЕНЬНЕДЕЛИ(<Дата>)",0,0,"",""}
},
{0,
{"ЧАС(<Дата>)",0,0,"",""}
},
{0,
{"МИНУТА(<Дата>)",0,0,"",""}
},
{0,
{"СЕКУНДА(<Дата>)",0,0,"",""}
},
{0,
{"НАЧАЛОПЕРИОДА(<Дата>, <Период>)",0,0,"",""}
},
{0,
{"КОНЕЦПЕРИОДА(<Дата>, <Период>)",0,0,"",""}
},
{0,
{"ДОБАВИТЬКДАТЕ(<Дата>, <Тип>, <Количество>)",0,0,"",""}
},
{0,
{"РАЗНОСТЬДАТ(<Дата1>, <Дата2>, <Тип>)",0,0,"",""}
},
{0,
{"ДАТАВРЕМЯ(<Год>,<Месяц>,<День>,<Час>,<Минута>,<Секунда>)",0,0,"",""}
},
{0,
{"ДАТАВРЕМЯ(1,1,1,0,0,0)",0,0,"ДАТАВРЕМЯ","ДАТАВРЕМЯ(1,1,1,0,0,0)"}
}
},
{13,
{"Функции работы с числами",1,0,"",""},
{0,
{"ACOS(<Число>)",0,0,"",""}
},
{0,
{"ASIN(<Число>)",0,0,"",""}
},
{0,
{"ATAN(<Число>)",0,0,"",""}
},
{0,
{"COS(<Число>)",0,0,"",""}
},
{0,
{"TAN(<Число>)",0,0,"",""}
},
{0,
{"SIN(<Число>)",0,0,"",""}
},
{0,
{"EXP(<Число>)",0,0,"",""}
},
{0,
{"LOG(<Число>)",0,0,"",""}
},
{0,
{"LOG10(<Число>)",0,0,"",""}
},
{0,
{"POW(<Основание>, <Показатель>)",0,0,"",""}
},
{0,
{"SQRT(<Число>)",0,0,"",""}
},
{0,
{"ОКР(<Число>, <Разрядность>)",0,0,"",""}
},
{0,
{"ЦЕЛ(<Число>)",0,0,"",""}
}
},
{5,
{"Агрегатные функции",1,0,"",""},
{0,
{"СУММА(<Выражение>)",0,0,"",""}
},
{0,
{"МИНИМУМ(<Выражение>)",0,0,"",""}
},
{0,
{"МАКСИМУМ(<Выражение>)",0,0,"",""}
},
{0,
{"СРЕДНЕЕ(<Выражение>)",0,0,"",""}
},
{0,
{"КОЛИЧЕСТВО(<Выражение>)",0,0,"",""}
}
}
},
{17,
{"Прочее",1,0,"",""},
{0,
{"ВЫБОР",0,0,"","ВЫБОР 
	КОГДА <Выражение> ТОГДА <Выражение>
	ИНАЧЕ <Выражение>
КОНЕЦ"}
},
{0,
{"ВЫРАЗИТЬ(<Выражение> КАК <Тип>)",0,0,"","ВЫРАЗИТЬ(<Выражение> КАК <Тип>)"}
},
{0,
{"В ИЕРАРХИИ(<СписокЗначений>)",0,0,"","В ИЕРАРХИИ(<СписокЗначений>)"}
},
{0,
{"ЗНАЧЕНИЕ(<Имя>)",0,0,"","ЗНАЧЕНИЕ(<Имя>)"}
},
{0,
{"ЕСТЬNULL(<Выражение>, <Выражение>)",0,0,"","ЕСТЬNULL(<Выражение>, <Выражение>)"}
},
{0,
{"ЕСТЬ NULL",0,0,"","ЕСТЬ NULL"}
},
{0,
{"ССЫЛКА <ИмяТаблицы>",0,0,"","ССЫЛКА <ИмяТаблицы>"}
},
{0,
{"МЕЖДУ <Выражение> И <Выражение>",0,0,"","МЕЖДУ <Выражение> И <Выражение>"}
},
{0,
{"ПОДОБНО """"",0,0,"","ПОДОБНО """""}
},
{0,
{"СГРУППИРОВАНОПО(<Имя>)",0,0,"","СГРУППИРОВАНОПО(<Имя>)"}
},
{0,
{"ТИП(<Имя типа>)",0,0,"","ТИП(<Имя типа>)"}
},
{0,
{"ПРЕДСТАВЛЕНИЕ(<Выражение>)",0,0,"",""}
},
{0,
{"ПРЕДСТАВЛЕНИЕССЫЛКИ(<Выражение>)",0,0,"",""}
},
{0,
{"ТИПЗНАЧЕНИЯ(<Выражение>)",0,0,"",""}
},
{0,
{"АВТОНОМЕРЗАПИСИ()",0,0,"",""}
},
{0,
{"РАЗМЕРХРАНИМЫХДАННЫХ(<Поле>)",0,0,"",""}
},
{0,
{"УНИКАЛЬНЫЙИДЕНТИФИКАТОР(<Выражение>)",0,0,"",""}
}
}
}
},
{4,
{"Журнал регистрации",1,0,"",""},
{0,
{"Запись журнала регистрации",0,0,"Журнал[РегистрацииЗапись]","ЗаписьЖурналаРегистрации(НСтр(""""ru = '<? ""Имя события"">'"""")
							, УровеньЖурналаРегистрации.<? ""Уровень"", ВыборВарианта, ""Информация"",""Информация"", ""Ошибка"",""Ошибка"", ""Предупреждение"",""Предупреждение"", ""Примечание"",""Примечание"">
							, // ОбъектМетаданных
							, // Данные
							, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) // Комментарий
							, // РежимТранзакции
						);<?>"}
},
{0,
{"Запись журнала регистрации (Структура)",0,0,"","СписокЗаписейЖурнала = Новый СписокЗначений();

ЗаписьЖурналаНачало = Новый Структура(""ИмяСобытия, ПредставлениеУровня, Комментарий, ДатаСобытия"");
ЗаписьЖурналаНачало.ИмяСобытия = ""<?""Имя события"">"";
ЗаписьЖурналаНачало.ПредставлениеУровня = ""<?""Представление уровня"", ВыборВарианта, ""Предупреждение"", ""Предупреждение"", ""Примечание"", ""Примечание"", ""Ошибка"", ""Ошибка"">""; 
ЗаписьЖурналаНачало.Комментарий = ""<?""Коммертарий"">"";
ЗаписьЖурналаНачало.ДатаСобытия = ТекущаяДата();
СписокЗаписейЖурнала.Добавить(ЗаписьЖурналаНачало);

ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СписокЗаписейЖурнала);<?>"}
},
{0,
{"Подробная информация об ошибке",0,0,"Ошиб[ка]","ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())"}
},
{0,
{"[Функция] - Последняя активность пользователя",0,0,"Журнал[РегистрацииАктивныйПользователь]","Функция ПоследняяАктивностьПользователя(Знач Пользователь = Неопределено)<?>
    
    Результат = Дата(1, 1, 1);
	
	Если Пользователь = Неопределено Тогда 
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
    ПользовательУИД = Пользователь.ИдентификаторПользователяИБ;
	НовыйУИД = Новый УникальныйИдентификатор(ПользовательУИД);
    ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(НовыйУИД);
    Если Не ПользовательИБ = Неопределено Тогда 
        ПользовательИмяИБ = ПользовательИБ.Имя;
    Иначе
        Возврат Результат;
    КонецЕсли;
    
    Если Не ПустаяСтрока(ПользовательИмяИБ) Тогда
		
		УИД = Новый УникальныйИдентификатор();
		
        Отбор = Новый СписокЗначений;
        События = Новый СписокЗначений;
        СписокПользователей = Новый СписокЗначений;
        События.Добавить(""_$Session$_.Start"", ""Сеанс. Начало"");
        Отбор.Добавить(События, ""Событие"");
        СписокПользователей.Добавить(ПользовательИмяИБ, ПользовательИмяИБ);
        Отбор.Добавить(СписокПользователей, ""Пользователь"");
        ОтборЖурналаРегистрации = Новый Структура;
        ОтборЖурналаРегистрации.Вставить(""Событие"", События); 
        ОтборЖурналаРегистрации.Вставить(""Пользователь"", СписокПользователей); 
        ОтборЖурналаРегистрации.Вставить(""ДатаНачала"", Дата(1, 1, 1)); 
        ОтборЖурналаРегистрации.Вставить(""ДатаОкончания"", ТекущаяДата() - 60); 
 
        ПараметрыОтчета = Новый Структура;
        ПараметрыОтчета.Вставить(""ОтборЖурналаРегистрации"", ОтборЖурналаРегистрации);
        ПараметрыОтчета.Вставить(""КоличествоПоказываемыхСобытий"", 1);
        ПараметрыОтчета.Вставить(""УникальныйИдентификатор"", УИД);
        ПараметрыОтчета.Вставить(""МенеджерВладельца"", Обработки.ЖурналРегистрации);
        ПараметрыОтчета.Вставить(""ДобавлятьДополнительныеКолонки"", Ложь);
        ПараметрыОтчета.Вставить(""Журнал"", Новый ТаблицаЗначений);
        
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УИД);
		// +++{ 31.05.2023 :: БНВ - Надо на клиента
		ЖурналРегистрации.ПрочитатьСобытияЖурналаРегистрации(ПараметрыОтчета, АдресХранилища);
		// }--- БНВ
        ЖурналСобытий = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если ЖурналСобытий <> Неопределено Тогда 
			Если ТипЗнч(ЖурналСобытий.СобытияЖурнала) = Тип(""ТаблицаЗначений"") 
				И ЖурналСобытий.СобытияЖурнала.Количество() > 0 
			Тогда
	            Данные = ЖурналСобытий.СобытияЖурнала[0];
	            Результат = Данные.Дата;
			КонецЕсли; 
		КонецЕсли;
    КонецЕсли;
 
    Возврат Результат;
    
КонецФункции // -- ПоследняяАктивностьПользователя()
"}
}
},
{5,
{"Организация / Контрагенты",1,0,"",""},
{0,
{"Текущая организация",0,0,"Текущ[аяОрганизация]","ТекущаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();"}
},
{0,
{"Текущий пользователь (Клиент)",0,0,"Текущ[ийПользовательКлиент]","ТекущийПользователь = ПользователиКлиент.ТекущийПользователь();"}
},
{0,
{"Текущий пользователь (Сервер)",0,0,"Текущ[ийПользовательСервер]","ТекущийПользователь = Пользователи.ТекущийПользователь();"}
},
{0,
{"Текущий пользователь (ПараметрыСеанса)",0,0,"Текущ[ийПользователь]","ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;"}
},
{0,
{"[Функция] - Контрагенты ""Основной договор""",0,0,"Код[ОсновнойДоговор]","Функция ПолучитьОсновнойДоговор(Знач Организация, Знач Контрагент, Знач ВидДоговора) Экспорт 
	
	РезультатФункции = ПредопределенноеЗначение(""Справочник.ДоговорыКонтрагентов.ПустаяСсылка"");
	
	ЗапросПолучитьОсновнойДоговор = Новый Запрос;
	ЗапросПолучитьОсновнойДоговор.Текст = 
		""ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = &ВидДоговора"";
	ЗапросПолучитьОсновнойДоговор.УстановитьПараметр(""ВидДоговора"", ВидДоговора);
	ЗапросПолучитьОсновнойДоговор.УстановитьПараметр(""Контрагент"", Контрагент);
	ЗапросПолучитьОсновнойДоговор.УстановитьПараметр(""Организация"", Организация);
	
	РезультатЗапроса = ЗапросПолучитьОсновнойДоговор.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		РезультатФункции = Выборка.Договор;
	КонецЕсли;
	
	//Если основной договор не отмечен, то поищем среди всех договоров 
	//и если по данному виду он один и непомеченный на удаление, то возьмем его
	
	Если РезультатФункции.Пустая() Тогда
		ЗапросКоличественный = Новый Запрос;
		ЗапросКоличественный.Текст = 
			""ВЫБРАТЬ
			|	МАКСИМУМ(ДоговорыКонтрагентов.Ссылка) КАК Договор,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоговорыКонтрагентов.Ссылка) КАК КоличествоДоговоров
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Контрагент
			|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления"";
		ЗапросКоличественный.УстановитьПараметр(""ВидДоговора"", ВидДоговора);
		ЗапросКоличественный.УстановитьПараметр(""Контрагент"", Контрагент);
		ЗапросКоличественный.УстановитьПараметр(""Организация"", Организация);
		
		РезультатЗапроса = ЗапросКоличественный.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.КоличествоДоговоров = 1 Тогда
				РезультатФункции = Выборка.Договор;
			ИначеЕсли Выборка.КоличествоДоговоров = 0 Тогда
				ТекстОшибки = СтрШаблон(""Для контрагента %1 не создан договор 
										| по виду %2 для организации %3""
										, Контрагент, ВидДоговора, Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				// +++ 14.11.2022 :: БНВ - В случае если потребуется создавать договор
				// РезультатФункции = СоздатьОсновнойДоговор(Организация, Контрагент, ВидДоговора);
				// --- БНВ
			ИначеЕсли Выборка.КоличествоДоговоров > 1 Тогда
				РезультатФункции = Выборка.Договор;
				ТекстОшибки = СтрШаблон(""Для контрагента %1 подставлен первый договор 
										| из нескольких по виду %2 для организации %3""
										, Контрагент, ВидДоговора, Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;

КонецФункции // -- ПолучитьОсновнойДоговор()"}
}
},
{2,
{"Права и Роли",1,0,"",""},
{0,
{"РольДоступна",0,0,"Роль[Доступна]","РольДоступна(""<?""Наименование Роли"">"")"}
},
{0,
{"ПравоДоступа",0,0,"Право[Доступа]","ПравоДоступа(""<?""Вид доступа"">"", Метаданные.<?""Объект конфигурации"">)"}
}
},
{12,
{"Прочее",1,0,"",""},
{0,
{"Значения реквизитов объекта",0,0,"Значения[реквизитовОбъекта]","<? ""Имя переменной""> = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(<? ""Ссылка на объект"">, ""ИмяРеквизита1, ИмяРеквизита2 и т.д."")"}
},
{0,
{"Объекты - Изменение отображения представления объекта [Процедура]",0,0,"Код[ПредставлениеНаименованияВСписке]","
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(""Этот объект № %1 от %2""
								, Формат(Данные.Ссылка.Номер, ""ЧГ="")
								, Формат(Данные.Ссылка.Дата, ""ДФ=dd.MM.yyyy""));
	
КонецПроцедуры // -- ОбработкаПолученияПредставления()
"}
},
{0,
{"Описание оповещения (с описанием обработчика)",0,0,"Опис[аниеОповещения]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры"">"", ЭтотОбъект);

//==========Вынести в отдельную процедуру========
//
//Список аргументов зависит от контекста вызова!
//&НаКлиенте
//Процедура <?""Имя процедуры"">(ДополнительныеПараметры) Экспорт
//	
//КонецПроцедуры
 "}
},
{0,
{"ПодключитьОбработчикОжидания",0,0,"Подкл[ючитьОбработчикОжидания]","ПодключитьОбработчикОжидания(""<? ""Имя процедуры"">"", <? ""Секунды"">, <? ""Повторения"", ВыборВарианта, ""Истина"",""Истина"", ""Ложь"",""Ложь"">)"}
},
{0,
{"Программная установка безопасного режима",0,0,"Устан[овитьБезопасныйРежим]","УстановитьБезопасныйРежим(<? ""Включить/Выключить"", ВыборВарианта, ""Включить"",""Истина"", ""Выключить"",""Ложь"">)"}
},
{0,
{"Табличный документ в таблицу значений",0,0,"","Построитель = Новый ПостроительОтчета;
Построитель.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
Построитель.ЗаполнитьНастройки();
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(<ТабДок.Область()>);
Построитель.Выполнить();
ТЗ = Построитель.Результат.Выгрузить();"}
},
{0,
{"[Функция] - Разность дат",0,0,"Дата","Функция РазностьДат(ДатаНачала, ДатаОкончания, Периодичность) Экспорт
	
	Разность = 0;
	
	День = 24 * 60 * 60; // Количество секунд в дне
	
	Если Периодичность = ПредопределенноеЗначение(""Перечисление.Периодичность.Год"") Тогда
		Разность = Год(ДатаОкончания) - Год(ДатаНачала);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение(""Перечисление.Периодичность.Полугодие"") Тогда
		Разность =
			?(Месяц(ДатаОкончания) > 6, 2, 1) - ?(Месяц(ДатаНачала) > 6, 2, 1) + 2 * (Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение(""Перечисление.Периодичность.Квартал"") Тогда
		Разность = Цел(Месяц(НачалоКвартала(ДатаОкончания)) / 3) - Цел(Месяц(НачалоКвартала(ДатаНачала)) / 3)
			+ 4 * (Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение(""Перечисление.Периодичность.Месяц"") Тогда
		Разность = Месяц(ДатаОкончания) - Месяц(ДатаНачала) + 12 * (Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение(""Перечисление.Периодичность.Декада"") Тогда
		Разность = Цел((ДатаОкончания - ДатаНачала) / (10 * День));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение(""Перечисление.Периодичность.Неделя"") Тогда
		Разность =
			Цел((НачалоНедели(ДатаОкончания) - НачалоНедели(ДатаНачала)) / (7 * День));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение(""Перечисление.Периодичность.День"") Тогда
		Разность = (ДатаОкончания - ДатаНачала) / День;
		
	КонецЕсли;
	
	Возврат Разность;
	
КонецФункции"}
},
{0,
{"[Функция] - Расчет времени выполнения",0,0,"Дата","//
// Параметры:
//  Старт - Число - результат значения работы функции """"ТекущаяУниверсальнаяДатаВМиллисекундах()""""
//  Финиш - Число - результат значения работы функции """"ТекущаяУниверсальнаяДатаВМиллисекундах()""""\
//
// Возвращаемое значение: 
//  Строка
// 
&НаСервереБезКонтекста
Функция ОписаниеЗамераВремени(Старт, Финиш)
		
	КоличествоМилисекунд = Финиш - Старт;
	КоличествоСекунд = Цел(КоличествоМилисекунд / 1000);
		
	Часы = Цел(КоличествоСекунд / 3600);
	Минуты = Цел((КоличествоСекунд - Часы * 3600) / 60);
	Секунды = КоличествоСекунд - Часы * 3600 - Минуты * 60;
	Милисекунды = КоличествоМилисекунд / 1000 - КоличествоСекунд;
		
	СтрокаВремя = СтрШаблон(""%1:%2:%3""
							, Формат(Часы, ""ЧЦ=2; ЧН=00; ЧВН="")
							, Формат(Минуты, ""ЧЦ=2; ЧН=00; ЧВН="")
							, Формат(Секунды + Милисекунды, ""ЧЦ=5; ЧДЦ=3; ЧРД=.; ЧН=00.000; ЧВН="")
							);
                  
    Возврат СтрокаВремя;
		
КонецФункции"}
},
{1,
{"Пароли",1,0,"",""},
{0,
{"Сгенерировать пароль",0,0,"Пароль[Сгенерировать]","ПарольДлинна = 8;
Пароль = Пользователи.СоздатьПароль(ПарольДлинна, <? ""Сложность пароля"", ВыборВарианта, ""Сложно"",""Истина"", ""Легко"",""Ложь"">, ""ДляПользователей"");"}
}
},
{2,
{"ЭтоНовый",1,0,"",""},
{0,
{"Проверка ЭтоНовый (Объект.Ссылка)",0,0,"ЭтоНовый","ЭтоНовый = ?(ЗначениеЗаполнено(Объект.Ссылка), Ложь, Истина);"}
},
{0,
{"Проверка ЭтоНовый (Параметры)",0,0,"ЭтоНовый","ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);"}
}
},
{2,
{"Редкий случай",1,0,"",""},
{0,
{"Получить web-cсылку на объект метаданных",0,0,"","Функция ПолучитьWebСсылкуНаОбъект(Объект) Экспорт

	НавСсылка = ПолучитьНавигационнуюСсылку(Объект);
	ДлинаСтроки = СтрДлина(НавСсылка);
	ПозицияРеф 	= СтрНайти(НавСсылка, ""?ref"");
	НавСсылка 	= Прав(НавСсылка, ДлинаСтроки - ПозицияРеф + 1) + ""#"" + Лев(НавСсылка, ПозицияРеф - 1);
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	srv = НСтр(СтрокаСоединения, ""Srvr"");
	ref = НСтр(СтрокаСоединения, ""Ref"");
	НавСсылка 	= ""e1c://server/""+ srv + ""/"" + ref + НавСсылка;		
	Возврат НавСсылка;
	
КонецФункции"}
},
{0,
{"Проверка узла через ping (COMОбъект)",0,0,"Код[Ping]","// Проверка доступности переданного узла с помощью команды ping
//
// Параметры:
//  АдресURL - пингуемый адрес
//
// Возвращаемое значение: 
//  Булево
//
Функция Пинг(АдресURL = """")
    
    Если ПустаяСтрока(АдресURL) Тогда
        АдресURL = ""www.ya.ru"";            
    КонецЕсли; 
    
    objShell = Новый COMОбъект(""WScript.Shell"") ;
    objScriptExec = objShell.Exec(""ping.exe -n 1 "" + АдресURL);
    strPingResults = НРег(objScriptExec.StdOut.ReadAll());
    ЕстьСоединение = Найти(strPingResults, ""ttl="") > 0;    
    
    Возврат ЕстьСоединение;
    
КонецФункции"}
}
},
{1,
{"Голос",1,0,"",""},
{0,
{"Голосовое сообщение",0,0,"Голос","Голос = Новый COMObject(""SAPI.SpVoice"");
Голос.Speak(""<? ""Текст сообщения"">"");"}
}
}
},
{1,
{"Транзакции",1,0,"",""},
{0,
{"Транзакция",0,0,"Начать[Транзакцию]","// https://its.1c.ru/db/v8std/content/783/hdoc
НачатьТранзакцию();
Попытка
    // чтение или запись данных
    ЗафиксироватьТранзакцию();
Исключение
    ОтменитьТранзакцию();
    ЗаписьЖурналаРегистрации(НСтр(""ru = 'Выполнение операции'""),
       УровеньЖурналаРегистрации.Ошибка,,,
       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
КонецПопытки;"}
}
},
{4,
{"Еще не обработано",1,0,"",""},
{0,
{"Создание построителя запроса по табличному полю",0,0,"","Функция ПолучитьПостроительЗапросаСпискаТабличногоПоля(пТабличноеПоле) 

    МетаданныеЗначения = ЛксПолучитьМетаданные(пТабличноеПоле.Значение);
    ПостроительЗапроса = Новый ПостроительЗапроса;
    ПостроительЗапроса.Текст = ""ВЫБРАТЬ * ИЗ "" + МетаданныеЗначения.ПолноеИмя() + "" КАК Таблица"";
    ПостроительЗапроса.ЗаполнитьНастройки();
    ЛксСкопироватьПорядок(ПостроительЗапроса.Порядок, пТабличноеПоле.Значение.Порядок);
    ЛксСкопироватьОтборДинамическогоСписка(ПостроительЗапроса.Отбор, пТабличноеПоле.Значение.Отбор);
    Если Истина
        И ЛксЛиМетаданныеИерархическогоОбъекта(МетаданныеЗначения)
        И пТабличноеПоле.ИерархическийПросмотр
    Тогда
        ПостроительЗапроса.Отбор.Добавить(""Родитель"");
        Если пТабличноеПоле.ТекущийРодитель <> Неопределено Тогда 
            ПостроительЗапроса.Отбор.Родитель.Установить(пТабличноеПоле.ТекущийРодитель);
        КонецЕсли;
    КонецЕсли;
    Возврат ПостроительЗапроса;

КонецФункции"}
},
{0,
{"Транзакция с просмотром результатов и возможностью отката изменений",0,0,"","ВТРанзакции = Истина;
Если ВТранзакции Тогда	
	НачатьТранзакцию(); 
КонецЕсли;

Если ВТранзакции Тогда
	ФормаСписка = <?""Тип объекта?"", ВыборТипа>.ПолучитьФормуСписка();
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.Закрыть();
	КонецЕсли;
	ФормаСписка.ОткрытьМодально();
	Если Вопрос(""Принять изменения?"", РежимДиалогаВопрос.ДаНет, <?""Таймаут вопроса в секундах"">, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
КонецЕсли;"}
},
{0,
{"CSV в массив из структур",0,0,"","Функция ПреобразоватьCSVвМассив(CSV)
	
	Разделитель        = Символы.Таб;
	ЗаголовкиCSV       = СокрЛП(СтрПолучитьСтроку(CSV, 1));
	
	DATA = Новый Массив;
	Для НомерСтроки=2 По СтрЧислоСтрок(CSV) Цикл  
		Строка         = СтрПолучитьСтроку(CSV, НомерСтроки);
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель, Ложь, );
		Структура      = Новый Структура(СтрЗаменить(ЗаголовкиCSV,  Разделитель, "",""));
		Инд            = 0;
		Для Каждого КлючЗначение Из Структура Цикл
			Структура[КлючЗначение.Ключ] = МассивПодстрок[Инд];
			Инд = Инд+1;
		КонецЦикла;
		DATA.Добавить(Структура);
	КонецЦикла;
		
	Возврат DATA;
		
КонецФункции

"}
},
{0,
{"[Функция] - Создать получю копию элемента справочника",0,0,"","Функция СоздатьПолнуюКопиюЭлементаСправочника(Ссылка, ИсключаяРеквизиты = """", стрНовыеРеквизиты = """") Экспорт
    
    НачатьТранзакцию();
    
    //Если нет владельцев тогда не присваиваем этот реквизит при копировании
    Если ссылка.Метаданные().Владельцы.Количество() = 0 и Найти(ИсключаяРеквизиты , ""Владелец"") = 0 Тогда
        ИсключаяРеквизиты = ИсключаяРеквизиты + "",Владелец"";
    КонецЕсли;
    
    //Если не иерархический, но забыли исключить родителя
    Если НЕ ссылка.Метаданные().Иерархический и Найти(ИсключаяРеквизиты , ""Родитель"") = 0 Тогда
        ИсключаяРеквизиты = ИсключаяРеквизиты + "",Родитель"";
    КонецЕсли;    
    
    //Если забыли исключить реквизиты доступные только для групп добавим в исключения и их
    Для Каждого Реквизит Из ссылка.Метаданные().Реквизиты Цикл
        Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И Найти(ИсключаяРеквизиты , Реквизит.Имя) = 0 Тогда
            ИсключаяРеквизиты = ИсключаяРеквизиты + "","" + Реквизит.Имя;    
        КонецЕсли;
    КонецЦикла;
    
    //Формируем список подчиненных справочников и массив их типов
    спПодчиненныхСправочников = Новый Массив;
    мТиповПодчиненныхСправочников = Новый Массив;
    Для Каждого Спр Из Метаданные.Справочники Цикл
        Если Спр.Владельцы.Содержит(ссылка.Метаданные()) Тогда
            спПодчиненныхСправочников.Добавить(Спр.Имя);
            мТиповПодчиненныхСправочников.Добавить(Тип(""СправочникСсылка."" + Спр.Имя));
        КонецЕсли;
    КонецЦикла;
    
    //Регистры сведений. Только там где наш элемент копирования может быть ведущим измерением. Запоминаем названия регистров и имена измерений.
    спРегистровСведений = Новый Соответствие;
    Для Каждого Рег Из МЕтаданные.РегистрыСведений Цикл        
        Для Каждого Измерение Из Рег.Измерения Цикл
            Если Измерение.Тип.СодержитТип(Тип(""СправочникСсылка."" + Ссылка.Метаданные().Имя)) И Измерение.Ведущее Тогда
                спРегистровСведений.Вставить(Рег.Имя, Рег.Измерения.Индекс(Измерение)); Прервать;
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    
    //Копируем необычно, чтобы легко исключить требуемые реквизиты 
    КопияСсылки = Справочники[ссылка.Метаданные().Имя].СоздатьЭлемент();
    НовыйКод = КопияСсылки.Код;
    ЗаполнитьЗначенияСвойств(КопияСсылки, Ссылка,,ИсключаяРеквизиты);
    КопияСсылки.Код = НовыйКод;
    
    //Если нужно присвоим нужные значения нужным реквизитам копии.
    Если ТипЗнч(стрНовыеРеквизиты) = Тип(""Структура"") Тогда
        ЗаполнитьЗначенияСвойств(КопияСсылки,стрНовыеРеквизиты);    
    КонецЕсли;

    //Очищаем значения подчиненных справочников ибо они не могут принадлежать новому владельцу (копии старого)
    Для Каждого Реквизит Из КопияСсылки.Метаданные().Реквизиты Цикл
        Если Не мТиповПодчиненныхСправочников.Найти(ТипЗнч(КопияСсылки[Реквизит.Имя])) = Неопределено Тогда
            КопияСсылки[Реквизит.Имя] = Неопределено;    
        КонецЕсли;
    КонецЦикла;
    
    //Теперь запишется:)
    КопияСсылки.Записать();
    
    //ТЗ. Сложим сюда старые значения подчиненных справочников и соответствующие им новые, для нашей копии
    тСинхронизацииРеквизитов = Новый ТаблицаЗначений;
    тСинхронизацииРеквизитов.Колонки.Добавить(""СтароеЗначение"");
    тСинхронизацииРеквизитов.Колонки.Добавить(""НовоеЗначение"");
    
    //А теперь создадим новые подчиненные элементы копированием и сопоставим их имеющимся у объекта копирования
    Для Каждого ПодчиненныйСправочник Из спПодчиненныхСправочников Цикл
        ВыборкаИзПодчиненногоСправочника = Справочники[ПодчиненныйСправочник].Выбрать(,Ссылка);
        Пока ВыборкаИзПодчиненногоСправочника.Следующий() Цикл
            ЗаписьСинхронизации = тСинхронизацииРеквизитов.Добавить();
            НовыйПодчиненныйЭлемент = ВыборкаИзПодчиненногоСправочника.Ссылка.Скопировать();
            НовыйПодчиненныйЭлемент.Владелец = КопияСсылки.Ссылка;
            НовыйПодчиненныйЭлемент.Записать();
            ЗаписьСинхронизации.СтароеЗначение = ВыборкаИзПодчиненногоСправочника.Ссылка;
            ЗаписьСинхронизации.НовоеЗначение  = НовыйПодчиненныйЭлемент.Ссылка;
        КонецЦикла;
    КонецЦикла;
    
    //Присвоим копии элемента копии значений подчиненных справочников 
    Для Каждого Реквизит Из Ссылка.Метаданные().Реквизиты Цикл
        Если Не мТиповПодчиненныхСправочников.Найти(ТипЗнч(КопияСсылки[Реквизит.Имя])) = Неопределено Тогда
            НайденныйРеквизитСоответствия = тСинхронизацииРеквизитов.Найти(Ссылка[Реквизит.Имя],""СтароеЗначение"");
            Если НЕ НайденныйРеквизитСоответствия = Неопределено 
                И Найти(ИсключаяРеквизиты, Реквизит.Имя) = 0 Тогда
                КопияСсылки[Реквизит.Имя] = НайденныйРеквизитСоответствия.НовоеЗначение;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    //Снова запишемся перед записью регистров 
    КопияСсылки.Записать();
    
    //Регистры сведений, содержащие измерением копируемый элемент
    Для Каждого Регистр Из спРегистровСведений Цикл
        РегистрМетаданные = Метаданные.РегистрыСведений.Найти(Регистр.Ключ);
        ИмяИзмерения = РегистрМетаданные.Измерения.Получить(Регистр.Значение).Имя;
        //Только независимые, ибо копировать еще и регистраторы это уже слишком!
        Если РегистрМетаданные.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
            
            Если РегистрМетаданные.ПериодичностьРегистраСведений  = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
                РегистрВыборка = РегистрыСведений[Регистр.Ключ].Выбрать(Новый Структура(ИмяИзмерения, Ссылка));//Непериодические
            Иначе
                РегистрВыборка = РегистрыСведений[Регистр.Ключ].Выбрать(,,Новый Структура(ИмяИзмерения, Ссылка));//Периодические
            КонецЕсли;
            
            НаборЗаписей = РегистрыСведений[Регистр.Ключ].СоздатьНаборЗаписей();
            НаборЗаписей.Отбор[ИмяИзмерения].Установить(КопияСсылки.Ссылка);
            
            Пока РегистрВыборка.Следующий() Цикл
                //Если в выборке есть записи с копируемым элементом скопируем ее для его копии
                НоваяЗапись = НаборЗаписей.Добавить();
                ЗаполнитьЗначенияСвойств(НоваяЗапись, РегистрВыборка,,ИмяИзмерения);
                НоваяЗапись[ИмяИзмерения] = КопияСсылки.Ссылка; //А сюда подставим копию.
            КонецЦикла;
            
            Если НаборЗаписей.Количество()>0 Тогда
                НаборЗаписей.Записать();
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    ЗафиксироватьТранзакцию();
    
    Возврат КопияСсылки;
    
КонецФункции
"}
}
},
{0,
{"Кодирование/Декодирование",1,0,"",""}
},
{1,
{"Пользователи",1,0,"",""},
{0,
{"[Функция] - Предыдущий вход Пользователя",0,0,"","Функция ПредыдущийВход()
    
	Результат = Дата(1, 1, 1);
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ПользовательУИД = Новый УникальныйИдентификатор(Пользователь.ИдентификаторПользователяИБ);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательУИД);
	ПользовательИмя = ?(Не ПользовательИБ = Неопределено, ПользовательИБ.Имя, """"); 

	Если НЕ ПустаяСтрока(ПользовательИмя) Тогда
		ФормаУИД = ЭтаФорма.УникальныйИдентификатор;
		События = Новый СписокЗначений;
		События.Добавить(""_$Session$_.Start"", ""Сеанс. Начало"");
		СписокПользователей = Новый СписокЗначений;
		СписокПользователей.Добавить(ПользовательИмя, ПользовательИмя);

		Отбор = Новый СписокЗначений;
		Отбор.Добавить(События, ""Событие"");
		Отбор.Добавить(СписокПользователей, ""Пользователь"");
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить(""Событие"", События); 
		ОтборЖурналаРегистрации.Вставить(""Пользователь"", СписокПользователей); 
		ОтборЖурналаРегистрации.Вставить(""ДатаНачала"", Дата(1, 1, 1)); 
		ОтборЖурналаРегистрации.Вставить(""ДатаОкончания"", ТекущаяДата() - 60); 

		ПарамОтчета = Новый Структура;
		ПарамОтчета.Вставить(""ОтборЖурналаРегистрации"", ОтборЖурналаРегистрации);
		ПарамОтчета.Вставить(""КоличествоПоказываемыхСобытий"", 1);
		ПарамОтчета.Вставить(""УникальныйИдентификатор"", ФормаУИД);
		ПарамОтчета.Вставить(""МенеджерВладельца"", Обработки.ЖурналРегистрации);
		ПарамОтчета.Вставить(""ДобавлятьДополнительныеКолонки"", Ложь);
		ПарамОтчета.Вставить(""Журнал"", Новый ТаблицаЗначений);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ФормаУИД);
		ЖурналРегистрации.ПрочитатьСобытияЖурналаРегистрации(ПарамОтчета, АдресХранилища);
		СобытияЖурнала = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если ТипЗнч(СобытияЖурнала.СобытияЖурнала) = Тип(""ТаблицаЗначений"") 
			И СобытияЖурнала.СобытияЖурнала.Количество() > 0 
		Тогда
			Результат = СобытияЖурнала.СобытияЖурнала[0].Дата;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // -- ПредыдущийВход()"}
}
},
{3,
{"Почта (e-mail)",1,0,"",""},
{0,
{"Отправить почтовое сообщение",0,0,"Почта[ОтправитьСообщение]","Профиль = Новый ИнтернетПочтовыйПрофиль;
Профиль.АдресСервераSMTP = ""smtp.mail.ru"";
Профиль.ПользовательSMTP = ""***@mail.ru"";
Профиль.ПарольSMTP = ""***"";
Профиль.ИспользоватьSSLSMTP = Истина;
Профиль.ПортSMTP = 465; 
Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;

Письмо = Новый ИнтернетПочтовоеСообщение;
Текст = Письмо.Тексты.Добавить(""Привет!!!"");
Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
Письмо.Тема = ""Test""; 
Письмо.Отправитель = ""***@mail.ru"";
Письмо.ИмяОтправителя = ""***"";
Письмо.Получатели.Добавить(""****@mail.ru"");
   
Почта = Новый ИнтернетПочта;     
Попытка
	Почта.Подключиться(Профиль);
	ПоказатьОповещениеПользователя(""Подключено"");
Исключение
	ПоказатьОповещениеПользователя(""Не удалось подключиться к серверу"");
	ВызватьИсключение ОписаниеОшибки();
КонецПопытки;

Попытка
	Почта.Послать(Письмо);
	ПоказатьОповещениеПользователя(""Письмо отправлено"");
Исключение
	ПоказатьОповещениеПользователя(""Не удалось отправить письмо"");
	ВызватьИсключение ОписаниеОшибки();
КонецПопытки;

Почта.Отключиться();
ПоказатьОповещениеПользователя(""Соединение завершено"");"}
},
{0,
{"Получить письма",0,0,"Почта[ПолучитьПисьма]","&НаСервере
Процедура ПолучитьПисьмаСПочтовогоСервера()

    ПочтовыйПрофиль = СозданиеИнтернетПрофиля();
    Попытка
        Сообщить(""Подключение к почтовому серверу..."" + ПочтовыйПрофиль.АдресСервераPOP3);
        Email = Новый ИнтернетПочта;
        Email.Подключиться(ПочтовыйПрофиль);

        МассивСообщений = Новый Массив;
        Сообщить(""Чтение писем..."");
        МассивСообщений = Email.Выбрать(Ложь); // Ложь - письма с сервера не удаляются
    Исключение
        Сообщить(""Ошибка подключения к серверу: ""+ОписаниеОшибки());
    КонецПопытки;

    Если МассивСообщений.Количество() = 0 Тогда
        Сообщить(""Почтовый ящик пуст!"");
    КонецЕсли;

КонецПроцедуры"}
},
{0,
{"[Функция] - Создание интернет профиля",0,0,"Почта[Профиль]","//Yandex.ru (https://yandex.ru/support/mail/mail-clients/others.html)
//Входящая почта протокол IMAP: сервер imap.yandex.ru (SSL; порт 993)
//Входящая почта протокол POP3: сервер pop.yandex.ru (SSL; порт 993)
//Исходящая почта протокол SMTP: сервера smtp.yandex.ru (SSL; порт 465)
//Примечание: почта вида login@yandex.ru: логин до знака @. Для доменной почты - логин это полный адрес почтового ящика.

//Mail.ru (https://help.mail.ru/mail/mailer/popsmtp)
//Входящая почта протокол IMAP: сервер imap.mail.ru (SSL; порт 993)
//Входящая почта протокол POP3: сервер pop.mail.ru (SSL; порт 995)
//Исходящая почта протокол SMTP: сервера smtp.mail.ru (SSL; порт 465)
//Примечание: эл.адрес - полное имя почтового ящика, включая логин, @ и домен; имя пользователя - полное имя почтового ящика, включая логин, @ и домен; обычный пароль (без шифрования); сервер исходящей почты требует авторизации.

//Gmail.com (https://support.google.com/mail/answer/7126229?hl=ru, https://support.google.com/mail/answer/7104828?hl=ru)
//Входящая почта протокол IMAP: сервер imap.gmail.com (SSL; порт 993)
//Входящая почта протокол POP3: сервер pop.gmail.com (SSL; порт 995)
//Исходящая почта протокол SMTP: сервера smtp.gmail.com (SSL; порт 465,  TLS, TLS/STARTTLS: 587)
//Примечание: Время ожидания сервера более 1 минуты (рекомендуется 5 минут)

&НаСервере
Функция СозданиеИнтернетПрофиля()

    ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
    ПочтовыйПрофиль.ВремяОжидания          = 300;// Google рекомендует 5 минут
    // Исходящая почта
    //Если ФормироватьIMAPПрофиль Тогда
    ПочтовыйПрофиль.АдресСервераIMAP   = ""imap.yandex.ru"";   // imap.mail.ru
    ПочтовыйПрофиль.ПользовательIMAP   = ""from1C@yandex.ru""; // from1C@mail.ru
    ПочтовыйПрофиль.ПортIMAP           = 993; // 993
    Попытка
        ПочтовыйПрофиль.ИспользоватьSSLIMAP = Истина;
    Исключение
        Сообщить(""Не работает служба SSL IMAP! Для корректной работы необходима платформа 1С версии не менее 8.3!"");
    КонецПопытки;
    ПочтовыйПрофиль.ПарольIMAP         = ""Ro1Cte921hAb8sKf4"";
    //КонецЕсли;

    //Если ФормироватьSMTPПрофиль Тогда
    ПочтовыйПрофиль.АдресСервераSMTP   = ""smtp.yandex.ru""; // smtp.mail.ru
    ПочтовыйПрофиль.ПользовательSMTP   = ""from1C@yandex.ru""; // from1C@mail.ru
    ПочтовыйПрофиль.ПортSMTP           = 465; // 465
    Попытка
        ПочтовыйПрофиль.ИспользоватьSSLSMTP = Истина;
    Исключение
        Сообщить(""Не работает служба SSL SMTP! Для корректной работы необходима платформа 1С версии не менее 8.3!"");
    КонецПопытки;
    ПочтовыйПрофиль.ПарольSMTP         = ""Ro1Cte921hAb8sKf4"";
    ПочтовыйПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
    //КонецЕсли;

    // Входящая почта
    //Если ФормироватьPOP3Профиль Тогда
    ПочтовыйПрофиль.АдресСервераPOP3   = ""pop.yandex.ru""; //    pop.mail.ru
    ПочтовыйПрофиль.Пользователь       = ""from1C@yandex.ru""; // from1C@mail.ru
    ПочтовыйПрофиль.ПортPOP3           = 993; // 995
    Попытка
        ПочтовыйПрофиль.ИспользоватьSSLPOP3 = Истина;
    Исключение
        Сообщить(""Не работает служба SSL POP3! Для корректной работы необходима платформа 1С версии не менее 8.3!"");
    КонецПопытки;
    ПочтовыйПрофиль.Пароль             = ""Ro1Cte921hAb8sKf4"";
	
	//Если НастройкиСоединения.СпособPOP3Аутентификации = Перечисления.СпособыPOP3Аутентификации.APOP Тогда
    //  ПочтовыйПрофиль.АутентификацияPOP3 = СпособPOP3Аутентификации.APOP;
    //ИначеЕсли НастройкиСоединения.СпособPOP3Аутентификации = Перечисления.СпособыPOP3Аутентификации.CramMD5 Тогда
    //  ПочтовыйПрофиль.АутентификацияPOP3 = СпособPOP3Аутентификации.CramMD5;
    //Иначе
    //  ПочтовыйПрофиль.АутентификацияPOP3 = СпособPOP3Аутентификации.Обычная;
    //КонецЕсли;
    //КонецЕсли;

    Возврат ПочтовыйПрофиль;

КонецФункции"}
}
},
{2,
{"Системная информация",1,0,"",""},
{0,
{"Системная информация",0,0,"Систем[наяИнформация]","СистемнаяИнформация = Новый СистемнаяИнформация;
//СистемнаяИнформация.ВерсияОС // Операционная система
//СистемнаяИнформация.ВерсияПриложения); // Версия платформы
//СистемнаяИнформация.ОперативнаяПамять); // Объем оперативной памяти (Мб)
//СистемнаяИнформация.Процессор); // Процессор
//СистемнаяИнформация.ТипПлатформы); // Тип платформы
"}
},
{0,
{"Информация о конфигурации",0,0,"Конфиг[урация]","Конфигурация = Новый Структура;
Конфигурация.Вставить(""Синоним"", Метаданные.Синоним; // Конфигурация
Конфигурация.Вставить(""Версия"", Метаданные.Версия; // Версия конфигурации
Конфигурация.Вставить(""КраткаяИнформация"", Метаданные.КраткаяИнформация; // Краткая информация
Конфигурация.Вставить(""ПодробнаяИнформация"", Метаданные.ПодробнаяИнформация; // Подробная информация
Конфигурация.Вставить(""Поставщик"", Метаданные.Поставщик; // Поставщик
Конфигурация.Вставить(""АдресИнформацииОПоставщике"", Метаданные.АдресИнформацииОПоставщике; // Информация о поставщике
Конфигурация.Вставить(""АдресИнформацииОКонфигурации"", Метаданные.АдресИнформацииОКонфигурации; // Информация о конфигурации
Конфигурация.Вставить(""АвторскиеПрава"", Метаданные.АвторскиеПрава; // Авторские права"}
}
},
{10,
{"Файлы",1,0,"",""},
{0,
{"Сведения о файле",0,0,"Файл","ПолноеИмяФайла = ""<? ""Полное имя файла"">"";
Файл = Новый Файл(ПолноеИмяФайла);
//Файл.ПолноеИмя
//Файл.Имя
//Файл.ИмяБезРасширения
//Файл.Расширение
//Файл.Путь
//Файл.Размер()
//Файл.ЭтоФайл()
//Файл.ПолучитьВремяИзменения()
//Файл.ПолучитьТолькоЧтение()
//Файл.ПолучитьНевидимость()"}
},
{0,
{"Размер файла (Асинх)",0,0,"Файл[Размер]","Файл = Новый Файл(""<? ""Полный путь до файла"">""); 
ОбещаниеРазмерФайла = Файл.РазмерАсинх(); // процедура Асинх
РазмерФайла = Ждать ОбещаниеРазмерФайла;
"}
},
{0,
{"Файл существует (Обычный)",0,0,"Файл[Существует]","Файл = Новый Файл(ПутьФайла);
Если Файл.Существует() Тогда
КонецЕсли;"}
},
{0,
{"Файл существует (ОписаниеОповещения)",0,0,"Файл[Существует]","Файл = Новый Файл(ПутьФайла);
ОписаниеОповещенияСуществованияФайла = Новый ОписаниеОповещения(""<? ""Имя процедуры"">"", ЭтаФорма);
Файл.НачатьПроверкуСуществования(ОписаниеОповещенияСуществованияФайла);

&НаКлиенте
Процедура <? ""Имя процедуры"">(Существует, ДополнительныеПараметры) Экспорт 
	
КонецПроцедуры"}
},
{0,
{"[Процедура] - Получить на клиенте файл из макета",0,0,"","&НаКлиенте
Асинх Процедура Команда_Инструкция(Команда)
	
	АдресХранилище = ПолучениеФайлаМакет();
	ФайлИнструкции = ПолучитьИзВременногоХранилища(АдресХранилище);
	
	Если ФайлИнструкции <> Неопределено Тогда 
		ВременныйКаталог = Ждать КаталогВременныхФайловАсинх();
		ПараметрыФайла = Новый Структура(""ИмяФайла, Расширение"", ""TempFile"", ""<?""Расширение файла"">"");
		ПолныйПутьФайл = СтрШаблон(""%1%2.%3""
									, ВременныйКаталог
									, ПараметрыФайла.ИмяФайла
									, ПараметрыФайла.Расширение);
		
		Попытка
			ФайлИнструкции.Записать(ПолныйПутьФайл);
		Исключение
			ВызватьИсключение ""Файл занят дргурим процессом (файл уже открыт)"";
		КонецПопытки;
		
		ЗапуститьПриложениеАсинх(ПолныйПутьФайл);
	КонецЕсли;
	
КонецПроцедуры // -- Команда_Инструкция()

&НаСервере
Функция ПолучениеФайлаМакет()

	Обработка = РеквизитФормыВЗначение(""Объект"");
	ИмяМакета = ""<?""Имя макета"">"";
	ДвоичныеДанные = Обработка.Получитьмакет(ИмяМакета);
	ХранилищеИнструкция = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

	Возврат ХранилищеИнструкция;
	
КонецФункции // -- ПолучениеФайлаМакет()
"}
},
{6,
{"Чтение / запись",1,0,"",""},
{5,
{"Excel",1,0,"",""},
{0,
{"Чтение ФайлExcel (Построитель)",0,0,"Файл[EXCEL]","ФайлEXCEL = """";
ТабДокEXCEL = Новый ТабличныйДокумент;
ТабДокEXCEL.Прочитать(ФайлEXCEL);
ОбластиEXCEL = ТабДокEXCEL.Область(1, 1, ТабДокEXCEL.ВысотаТаблицы, ТабДокEXCEL.ШиринаТаблицы);
Построитель = Новый ПостроительЗапроса;
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластиEXCEL);  
Построитель.Выполнить();
	
ТабДанные = Построитель.Результат.Выгрузить();	
//Для Каждого Стр Из ТабДанные Цикл 
	//	Сообщить(стр); // Обрабатываем	
//КонецЦикла;	
"}
},
{0,
{"Чтение ФайлExcel (COM-Соединение)",0,0,"Файл[EXCEL]","ФайлEXCEL = ""<? ""Полное имя файла"">"";
Попытка
	Эксель = Новый COMОбъект(""Excel.Application"");
	Эксель.DisplayAlerts = 0;
	Эксель.Visible = 0;
	Excel.EnableEvents = 0; 
	Excel.ScreenUpdating = 0;
Исключение
   	Сообщить(ОписаниеОшибки()); 
   	Возврат;
КонецПопытки;
			
ЭксельКнига = Эксель.Workbooks.Open(ФайлEXCEL);	
КоличествоСтраниц = ЭксельКнига.Sheets.Count;

// Перебираем все листы
Для НомерЛиста = 1 По КоличествоСтраниц Цикл 
	Лист = ЭксельКнига.Sheets(НомерЛиста);
	КоличествоСтрок = Лист.Cells(1, 1).SpecialCells(11).Row;
	КоличествоКолонок = Лист.Cells(1, 1).SpecialCells(11).Column;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл 
		//Для НомерКолонки = 1 По КоличествоКолонок Цикл
		//	ЗначениеВЯчейке = Лист.Cells(НомерСтроки, НомерКолонки).Value;
		//КонецЦикла;
	КонецЦикла;	
КонецЦикла;
	
Эксель.Workbooks.Close();
Эксель.Application.Quit();"}
},
{0,
{"Чтение ФайлExcel (Асинх)",0,0,"Файл[EXCEL]","&НаКлиенте
АСИНХ Процедура ПоместитьФайлКоманда(Команда)
    ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
    ПараметрыДиалога.Заголовок = ""НачатьПомещениеФайлаНаСервер"";
    ПараметрыДиалога.МножественныйВыбор = Истина;
    ПараметрыДиалога.Фильтр = НСтр(""en = 'Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'; ru = 'Файл таблицы Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'"");
	ПрогрессОбратныйВызов = Новый ОписаниеОповещения(""ПрогрессОбратныйВызов"", ЭтотОбъект);
    ПередНачалоОбратныйВызов = Новый ОписаниеОповещения(""ПередНачалоОбратныйВызов"", ЭтотОбъект);
	ОписаниеПомещенногоФайла = ЖДАТЬ ПоместитьФайлНаСерверАсинх(ПрогрессОбратныйВызов, ПередНачалоОбратныйВызов, , ПараметрыДиалога);
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Сообщить(""Помещение файла "" + ?(ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено, ""отменено"", ""выполнено успешно""));
    Сообщить(""Адрес во временном хранилище: "" + ОписаниеПомещенногоФайла.Адрес);
    Сообщить(""Имя файла: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
    Сообщить(""Размер файла, байт: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Размер());

	ОбработатьЗагруженныйФайл(ОписаниеПомещенногоФайла.Адрес);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьЗагруженныйФайл(Адрес)
	
	ФайлНаДиске = ПолучитьИмяВременногоФайла(""xlsx""); 
	ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес); 
    ДанныеФайла.Записать(ФайлНаДиске) ; 
		
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ФайлНаДиске, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных (ТабДок.Область(""Лист1"")); //Здесть Лист1 - название листа экселя.
	ПостроительЗапроса.Выполнить();
	//В файле первой строчкой должны идти названия колонок. Если этого не будет, то построитель не вернет ТЗ, т.к. не будут заданы имена колонок.
	//Также нужно смотреть на типы ячеек файла. Типизация нормально отрабатывает, если заданы соответствующие типы. Иначе ""10.08.2017"" в экселе - это строка, а не дата.
	СтрокиТЗ = ПостроительЗапроса.Результат.Выгрузить(); //Выполняем запрос к источнику данных, автоматически выбирая все поля и получаем таблицу значений

	Для каждого СтрокаТЗ Из СтрокиТЗ Цикл
		//Полученные данные
	КонецЦикла; 
КонецПроцедуры 

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    Состояние(""Файл "" + ПомещаемыйФайл.Имя, Помещено, ""Файл имеет размер "" + ПомещаемыйФайл.Размер() + "" байт"", БиблиотекаКартинок.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачалоОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    Сообщить(""Помещаемый файл - "" + ПомещаемыйФайл.Имя + "", размер = "" + ПомещаемыйФайл.Размер());
КонецПроцедуры"}
},
{0,
{"[Процедура] - Чтение ФайлExcel (Прочитать)",0,0,"Файл[EXCEL]","&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Фильтр = ""Документы(*.xlsx, *.xls)|*.xlsx;*.xls"";
	ДиалогОткрытияФайла.Выбрать();
	Объект.ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;      
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
		
	ДвоичныеДанные = Новый ДвоичныеДанные(Объект.ПутьКФайлу);
	ОбработкаНаСервере(ДвоичныеДанные);
	
КонецПроцедуры   

&НаСервере
Процедура ОбработкаНаСервере(ДвоичныеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Расширение = "".xls"";
	ФайлEXCELНаСервере = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ФайлEXCELНаСервере);  
	
	ТабличныйДокумент.Прочитать(ФайлEXCELНаСервере);
	УдалитьФайлы(ФайлEXCELНаСервере);  
	
	//Параметры
	//1. НомерПервойСтроки. Первая страка будет содержать заголовки таблицы
	//2. НомерПервойКолонки 
	ОбластьТаблицы = ТабличныйДокумент.Область(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьТаблицы);
	ПостроительЗапроса.Выполнить();
	ТаблицаДанных = ПостроительЗапроса.Результат.Выгрузить();
	
КонецПроцедуры"}
},
{18,
{"Полезное",1,0,"",""},
{0,
{"Запись значения в ячейку",0,0,"","ТекущийЛист.Cells(i, j).Value = ""2"";"}
},
{0,
{"Количество листов книги",0,0,"","КоличествоЛистов = Книга.Sheets.Count;"}
},
{0,
{"Шрифт и размер шрифта",0,0,"","//Выделение области
Excel.Columns(""A:H"").Select();

//Размер шрифта
Лист.Cells.Font.Size = 12;

//Тип шрифта                        
Лист.Cells.Font.Name = ""Calibri"";

//1 — жирный шрифт, 0 — обычный.
Лист.Cells.Font.Bold = 1;

//1 — наклонный шрифт, 0 — обычный.	
Лист.Cells.Font.Italic = 1;

//2 — подчеркнутый, 1 — нет.	
Лист.Cells.Font.Underline = 1;"}
},
{0,
{"Ширина колонки",0,0,"","Лист.Columns(НомерКолонки).ColumnWidth = Ширина;"}
},
{0,
{"Получение последней ячейки в используемом диапазоне",0,0,"","ВсегоКолонок = Лист.Cells(1,1).SpecialCells(11).Column;
ВсегоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;"}
},
{0,
{"Установка фильтра",0,0,""," Лист.Cells.AutoFilter();"}
},
{0,
{"Горизонтальное выравнивание ячейки",0,0,"","ТекущийЛист.Cells(i, j).HorizontalAlignment = -4130;

По центру 				xlHAlignCenter 					-4108
По центру выделения 	xlHAlignCenterAcrossSelection 	7
Распределенное 			xlHAlignDistributed 			-4117
С заполнением 			xlHAlignFill 					5
По значению 			xlHAlignGeneral 				1 
По ширине 				xlHAlignJustify 				-4130
По левому 				краю xlHAlignLeft 				-4131
По правому краю 		xlHAlignRight 					-4152"}
},
{0,
{"Вертикальное выравнивание ячейки",0,0,"","ТекущийЛист.Cells(i, j).VerticalAlignment = -4130;

По нижнему краю 	xlVAlignBottom 			-4107
По центру 			xlVAlignCenter 			-4108
Распределенное 		xlVAlignDistributed 	-4117
По высоте 			xlVAlignJustify 		-4130
По верхнему краю 	xlVAlignTop 			-4160"}
},
{0,
{"Установка свойства ячейки ""переносить по словам""",0,0,"","ТекущийЛист.Cells(i, j).WrapText = True;"}
},
{0,
{"Отключение/включение режима показа предупреждений",0,0,"","ExcelApp.DisplayAlerts = False; // отключение
ExcelApp.DisplayAlerts = True;  // включение
"}
},
{0,
{"Формулы",0,0,"","ТекущийЛист.Cells(i, j).Formula = ""SUM(A1:A10)"";
ТекущийЛист.Cells(i, j).FormulaLocal = ""Сумм(A1:A10)"";"}
},
{0,
{"Установка индексов цветов",0,0,"","//Установка цвета текста ячейки
ТекущийЛист.Cells(i, j).Font.ColorIndex = 8;

//Установка цвета фона ячейки
ТекущийЛист.Cells(i, j).Interior.Color = 49;

//Установка цвета рамки
ТекущийЛист.Cells(i, j).Borders.Color = 8;
"}
},
{0,
{"Объединение яйчеек",0,0,"","Лист.Range(""E1:F1"").MergeCells = Истина;"}
},
{0,
{"ГиперСсылки",0,0,"","Лист.Cells(СтрокаЛиста, 2).Hyperlinks.Add(Лист.Cells(СтрокаЛиста, 2), Выборка.МДО_URLТовара,,""Ссылка на товар с сайта www.___.ru"",Выборка.Артикул );"}
},
{0,
{"Закрепление областей",0,0,"","Эксель.Application.ActiveWindow.SplitRow = 4;
Эксель.Application.ActiveWindow.FreezePanes = 1;"}
},
{0,
{"Ширина колонки",0,0,"","Лист.Columns(7).ColumnWidth = ""10"";"}
},
{0,
{"Группировка строк",0,0,"","Лист.Range(""A1:A3"").Rows.Group()"}
},
{0,
{"[Функция] - Преобразовать номер столбца в формат Excel",0,0,"","Функция ПреобразоватьНомерСтолбцаВФорматExcel(Столбец)
	
	Результат = """";
	
	А = Окр(Столбец / 27, 0);
	В = Столбец - (А * 26);
	Если А > 0 Тогда
		Результат = Символ(А + 64);
	КонецЕсли;
	Если В > 0 Тогда
		Результат = стСтолбец + Символ(В + 64);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции"}
}
}
},
{5,
{"JSON",1,0,"",""},
{0,
{"Записать ФайлJSON",0,0,"Файл[JSON]","Структура = Новый Структура; 
Структура.Вставить(""Ключ"", ""Значение""); 
Массив = Новый Массив;
Массив.Добавить(""Значение1"") ;
Структура.Вставить(""Массив"", Массив);


ЗаписьJSON = Новый ЗаписьJSON; 
ЗаписьJSON.ОткрытьФайл(<? ""ИмяФайла"">, , , Новый ПapaмeтpыЗaпиcиJS0N( , Символы.Таб)) ;
ЗаписатьJSON(ЗаписьJSON, Структура); 
ЗаписьJSON.Закрыть();"}
},
{0,
{"Чтение ФайлJSON",0,0,"Файл[JSON]","ФайлJSON = Новый ЧтениеJSON;
ФайлJSON.ОткрытьФайл(<? ""Имя файла"">);

МассивОбъектов = ПрочитатьJSON(ФайлJSON); 

Для Каждого Элемент Из МассивОбъектов Цикл
КонецЦикла;

ФайлJSON.Закрыть();"}
},
{0,
{"JSON в Структуру",0,0,"JSON","ЧтениеJSON = Новый ЧтениеJSON;
ЧтениеJSON.УстановитьСтроку(<? ""JSON строка"">);  		
СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);"}
},
{0,
{"Структуру в JSON",0,0,"JSON","СтрокаJSON = ПростаяЗаписьJSON(<? ""Имя структуры"">);"}
},
{0,
{"[Функция] Парсер JSON",0,0,"JSON","// JSON парсер.
&НаКлиенте
Функция ПрочитатьJSONИзФайла(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь) Экспорт 
    
    Попытка
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.Закрыть();
        
        Возврат jsonПрочитатьПлатформой(Значение);
    Исключение
        Возврат jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок);
    КонецПопытки;
    
КонецФункции // ПрочитатьJSON()

&НаКлиенте
Функция jsonПрочитатьПлатформой(Значение)

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Значение);
    
    Результат = Неопределено;
    СформироватьДерево(ЧтениеJSON, Результат);
    
    ЧтениеJSON.Закрыть();
    
    Возврат Результат;

КонецФункции

&НаКлиенте
Процедура СформироватьДерево(ЧтениеJSON, Дерево)
    
    ИмяСвойства = Неопределено;
    
    Пока ЧтениеJSON.Прочитать() Цикл
        TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
        
        Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
        ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
            НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
            
            Если ТипЗнч(Дерево) = Тип(""Массив"") Тогда
                Дерево.Добавить(НовыйОбъект);
            ИначеЕсли ТипЗнч(Дерево) = Тип(""Соответствие"") И ЗначениеЗаполнено(ИмяСвойства) Тогда
                Дерево.Вставить(ИмяСвойства, НовыйОбъект);
            КонецЕсли;
            
            СформироватьДерево(ЧтениеJSON, НовыйОбъект);
            
            Если Дерево = Неопределено Тогда
                Дерево = НовыйОбъект;
            КонецЕсли;
        ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
        ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
        ИЛИ TипJSON = ТипЗначенияJSON.Строка 
        ИЛИ TипJSON = ТипЗначенияJSON.Булево 
        ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
            Если ТипЗнч(Дерево) = Тип(""Массив"") Тогда
                Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
            ИначеЕсли ТипЗнч(Дерево) = Тип(""Соответствие"") Тогда
                Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
            КонецЕсли;
        Иначе
            Возврат;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры"}
}
},
{3,
{"TXT",1,0,"",""},
{0,
{"Запись ФайлTXT",0,0,"Файл[TXT]","ПутьКФайлу = ""<? ""Полный путь к файлу"">"";

Строка = """";
ФайлТекст = Новый ТекстовыйДокумент;
ФайлТекст.ДобавитьСтроку(Строка);
ФайлТекст.Записать(ПутьКФайлу, КодировкаТекста.UTF8);"}
},
{0,
{"Чтение ФайлTXT - построчно",0,0,"Файл[TXT]","ПутьКФайлу = ""<? ""Полный путь к файлу"">"";
ФайлТекст = Новый ЧтениеТекста(ПутьКФайлу);
СтрокаФайла = ФайлТекст.ПрочитатьСтроку();
Пока СтрокаФайла <> Неопределено Цикл
	// Обработка строки
	СтрокаФайла = ФайлТекст.ПрочитатьСтроку();
КонецЦикла;

ФайлТекст.Закрыть();"}
},
{0,
{"Чтение ФайлTXT - целиком",0,0,"Файл[TXT]","Файл = Новый ЧтениеТекста(<? ""Полный путь к файлу"">);
ВесьФайлОднойСтрокой = Файл.Прочитать();
Файл.Закрыть();
"}
}
},
{2,
{"HTML",1,0,"",""},
{0,
{"Чтение ФайлHTML (текстом)",0,0,"Файл[HTML]","ФайлHTML = Новый ЧтениеТекста(<? ""Полный путь к файлу"">);
ВесьФайлОднойСтрокой = ФайлHTML.Прочитать();
ФайлHTML.Закрыть();
ФорматированныйДокумент = Новый ФорматированныйДокумент;
ФорматированныйДокумент.УстановитьHTML(ВесьФайлОднойСтрокой, Новый Структура);
ОбычныйТекст = ФорматированныйДокумент.ПолучитьТекст()"}
},
{2,
{"Полезное",1,0,"",""},
{0,
{"Получить текст из HTML-строки (убирает теги)",0,0,"Текст[HTML]","ТекстИзHTML = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(<? ""Переменная"">)"}
},
{0,
{"[Функция] - <table> в ТаблицуЗначений",0,0,"HTML[tableВТаблицуЗначений]","Функция ПолучитьТаблицыЗначенийИзHTML(рИсходныйДокумент)
    
    мТаблицИтого = Новый Массив;
    рКодировка = ""UTF-8"";
    чтен = Новый ЧтениеHTML;
    Если ТипЗнч(рИсходныйДокумент)=Тип(""Строка"") Тогда
        // считаем, что передали строку HTML-кода (фрагмент)
        чтен.УстановитьСтроку(рИсходныйДокумент,рКодировка);
    ИначеЕсли ТипЗнч(рИсходныйДокумент)=Тип(""Файл"") Тогда
        // считаем, что передали файл, проверенно существующий и читающийся оттуда, где он есть
        чтен.ОткрытьФайл(рИсходныйДокумент.ПолноеИмя,рКодировка);
    Иначе
        Сообщить(""Передан неверный аргумент: ""+СокрЛП(рИсходныйДокумент)+"", недопустимый тип!"",СтатусСообщения.Важное);
        Возврат мТаблицИтого;
    КонецЕсли;
    
    пострДОМ=Новый ПостроительDOM;
    гдок=пострДОМ.Прочитать(чтен);
    ТаблицыДокумента = гдок.ПолучитьЭлементыПоИмени(""table"");
    Для каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
        ВремТаблица = Новый ТаблицаЗначений;
        ПерваяСтрока         = ТаблицаДокумента.ПервыйДочерний;
        КолонкиПервойСтроки = ПерваяСтрока.ПолучитьЭлементыПоИмени(""td"");
        КоличествоКолонок = КолонкиПервойСтроки.Количество();
        Для НомКолонки = 1 по КоличествоКолонок Цикл
            ИмяКолонки = СтрШаблон(""К%1"",Формат(НомКолонки,""ЧГ=0""));
            ВремТаблица.Колонки.Добавить(ИмяКолонки);
        КонецЦикла;
        
        СтрокиТаблицы = ТаблицаДокумента.ПолучитьЭлементыПоИмени(""tr"");
        Для каждого СтрокаТаблицы из СтрокиТаблицы Цикл                  
            НоваяСтрока = ВремТаблица.добавить();
            КолонкиСтроки = СтрокаТаблицы.ПолучитьЭлементыПоИмени(""td"");
            КоличествоКолонокВСтроке =     КолонкиСтроки.Количество(); 
            
            МинимальноеКоличествоКолонокВСтроке = Мин(КоличествоКолонокВСтроке,КоличествоКолонок);
            Для НомКолонки = 0 по  МинимальноеКоличествоКолонокВСтроке - 1 Цикл
                ИмяКолонки = СтрШаблон(""К%1"",Формат(НомКолонки+1,""ЧГ=0""));
                
                Ячейка = КолонкиСтроки[НомКолонки];
                ТекстЯчейки = Ячейка.ТекстовоеСодержимое;
                НоваяСтрока[ИмяКолонки] = ТекстЯчейки;
            КонецЦикла;  
        КонецЦикла;
        мТаблицИтого.добавить(ВремТаблица);            
    КонецЦикла;
    
    Возврат мТаблицИтого;
    
КонецФункции"}
}
}
},
{5,
{"XML",1,0,"",""},
{0,
{"Чтение XML (Последовательное)",0,0,"","ЧтениеXML = Новый ЧтениеXML;
ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла); 
Пока ЧтениеXML.Прочитать() Цикл
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		// ФайлXML.Имя;
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			// атрибут - ФайлXML.Имя 
			// значение - ФайлXML.Значение;
		КонецЦикла;   
	КонецЕсли;    
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		// ФайлXML.Значение;
	КонецЕсли;    
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		//
	КонецЕсли;    
КонецЦикла;   
ЧтениеXML.Закрыть();"}
},
{0,
{"Чтение XML (ФабрикаXDTO)",0,0,"","ЧтениеXML = Новый ЧтениеXML;
ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла); 
ДанныеФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);"}
},
{0,
{"Чтение XML (XDTO-пакет)",0,0,"","СхемаXML = Новый СхемаXML;
СхемаXML.РасположениеСхемы = ""schema.xsd"";
СхемыXML = Новый НаборСхемXML;
СхемыXML.Добавить(СхемаXML);
ЧтениеXML = Новый ЧтениеXML();
ЧтениеXML.ОткрытьФайл(""data.xml"");
Фабрика = Новый ФабрикаXDTO(СхемыXML);
Данные = Фабрика.ПрочитатьXML(ЧтениеXML);"}
},
{0,
{"Запись ФайлXML",0,0,"Файл[XML]","ФайлXML = Новый ЗаписьXML;
ФайлXML.ОткрытьФайл(""c:\temp\document.xml"");

ФайлXML.ЗаписатьОбъявлениеXML(); // Записать директиву.
ФайлXML.ЗаписатьНачалоЭлемента(""Корневой""); // Записать начало корневого элемента.
ФайлXML.ЗаписатьАтрибут(""ИмяСправочника"", ""Сотрудники""); // Записать атрибут корневого элемента.
ФайлXML.ЗаписатьКомментарий(""Выгрузка элементов справочника"");

// Получить данные сотрудников в виде одной большой строки.
СтрокаРазделителя = ""*"";
СтрокаСотрудников = ПолучитьСтрокиСотрудников(СтрокаРазделителя);
// Получить массив строк дла каждого сотрудника.
СтрокиСотрудников = СтрРазделить(СтрокаСотрудников, Символы.ПС);
Для ТекущаяСтрока = 0 По СтрокиСотрудников.Количество() - 1 Цикл
	// Получить данные каждого сотрудника.
	Данные = СтрРазделить(СтрокиСотрудников[ТекущаяСтрока], СтрокаРазделителя);
	ФайлXML.ЗаписатьНачалоЭлемента(""ЭлементСправочника"");
	ФайлXML.ЗаписатьНачалоЭлемента(""Код"");
	ФайлXML.ЗаписатьТекст(Данные[0]);
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.ЗаписатьНачалоЭлемента(""Наименование"");
	ФайлXML.ЗаписатьТекст(Данные[1]);
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.ЗаписатьНачалоЭлемента(""ДатаРождения"");
	ФайлXML.ЗаписатьТекст(Данные[2]);
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.ЗаписатьНачалоЭлемента(""КоличествоДетей"");
	ФайлXML.ЗаписатьТекст(Данные[3]);
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.ЗаписатьКонецЭлемента();
КонецЦикла;   
ФайлXML.ЗаписатьКонецЭлемента();
ФайлXML.Закрыть();    

// Результат
//<?xml version=""1.0"" encoding=""UTF-8""?>
//<Корневой ИмяСправочника=""Сотрудники"">
//	<!--Выгрузка элементов справочника-->
//	<ЭлементСправочника>
//		<Код>000000001</Код>
//		<Наименование>Алексеев Сергей Иванович</Наименование>
//		<ДатаРождения>10.12.1980</ДатаРождения>
//		<КоличествоДетей>1</КоличествоДетей>
//	</ЭлементСправочника>
//	<ЭлементСправочника>
//		<Код>REST-0003</Код>
//		<Наименование>Артемов Игорь Владимирович</Наименование>
//		<ДатаРождения>17.05.2019</ДатаРождения>
//		<КоличествоДетей>2</КоличествоДетей>
//	</ЭлементСправочника>
//	<ЭлементСправочника>
//		<Код>000000002</Код>
//		<Наименование>Смирнова Светлана Ивановна</Наименование>
//		<ДатаРождения>22.02.1990</ДатаРождения>
//		<КоличествоДетей>0</КоличествоДетей>
//	</ЭлементСправочника>
//</Корневой>"}
},
{0,
{"Чтение ФайлXML",0,0,"Файл[XML]","ФайлXML = Новый ЧтениеXML;
ФайлXML.ОткрытьФайл(""c:\temp\document.xml"");

// Прочитать фрагменты элемента.
Пока ФайлXML.Прочитать() Цикл
	Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		// ФайлXML.Имя;
		Пока ФайлXML.ПрочитатьАтрибут() Цикл
			// атрибут - ФайлXML.Имя 
			// значение - ФайлXML.Значение;
		КонецЦикла;   
	КонецЕсли;    
	Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
		// ФайлXML.Значение;
	КонецЕсли;    
	Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		//
	КонецЕсли;    
КонецЦикла;   
ФайлXML.Закрыть();"}
}
},
{2,
{"DBF",1,0,"",""},
{0,
{"Запись ФайлDBF",0,0,"Файл[DBF]","Попытка
	Файл = Новый XBase; 
	//Файл.Поля.Добавить(""CODE"", ""S"", 5); 
	Файл.СоздатьФайл(""<ПутьКБазе>"", ""<ПутьКИндексу>""); 	
	// Индекс поля
	//Файл.Индексы.Добавить(""IDXCODE"", ""CODE""); 
	//ФайлИндекса = Файл.СоздатьИндексныйФайл(""<ПутьКИндексу>""); 
	Файл.АвтоСохранение = Истина; 

	//Новая запись
	Файл.Добавить(); 
	//Файл.CODE = """"; 

	Файл.ЗакрытьФайл();
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
},
{0,
{"Чтение ФайлDBF",0,0,"Файл[DBF]","Попытка
	Файл = Новый XBase;
	Файл.ОткрытьФайл(""<ПутьКБазе>"", ""<ПутьКИндексу>"");
	// Индекс поля
	//Файл.ТекущийИндекс = Файл.Индексы.IDXCODE;

	Пока Файл.Следующая() Цикл
		//Сообщить(Файл.CODE);
	КонецЦикла;

	Файл.ЗакрытьФайл();
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
"}
}
}
},
{10,
{"Копирование / перемещение / удаление / поиск",1,0,"",""},
{0,
{"Копирование файла (Обычное)",0,0,"Файл","ФайлИсточник = """";
ФайлПриемник = """";
КопироватьФайл(ФайлИсточник, ФайлПриемник);"}
},
{0,
{"Копирование файла (ОписаниеОповещения)",0,0,"Файл","ФайлИсточник = """";
ФайлПриемник = """";
ОписаниеОповещения = Новый ОписаниеОповещения(""КопированиеФайлаОповещение"", ЭтотОбъект);
НачатьКопированиеФайла(ОписаниеОповещения, ФайлИсточник, ФайлПриемник);

//Процедура КопированиеФайлаОповещение(СкопированныйФайл, ДополнительныеПараметры) Экспорт
//	// обработка
//КонецПроцедуры"}
},
{0,
{"Копирование файла (Асинхронно)",0,0,"Файл","&НаКлиенте
Асинх Процедура СкопироватьФайл(Команда)
    ФайлИсточник = """";
	ФайлПриемник = """";
    Попытка
        Результат = Ждать КопироватьФайлАсинх(ФайлИсточник, ФайлПриемник);
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры"}
},
{0,
{"Перемещение файла (Обычное)",0,0,"Файл","ФайлИсточник = """";
ФайлПриемник = """";
ПереместитьФайл(ФайлИсточник, ФайлПриемник);"}
},
{0,
{"Перемещение файла (ОписаниеОповещения)",0,0,"Файл","ДополнительныеПараметры = Новый Структура;
ОписаниеОповещения = Новый ОписаниеОповещения(""ПерместитьПареименоватьФайл""
												, ЭтотОбъект
												, ДополнительныеПараметры);
НачатьПеремещениеФайла(ОписаниеОповещения, ИмяФайлаИсточника, ИмяФайлаПриемника)		


//// Добавить
//&НаКлиенте
//Процедура ПерместитьПареименоватьФайл(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
//КонецПроцедуры"}
},
{0,
{"Поиск фалов (ОписаниеОповещения)",0,0,"Файл","Каталог = ""c:\Temp"";
МаскаФайлов = ""*.*""; 
ИскатьВПодкаталогах = Истина; 
ДополнительныеПараметры = Новый Структура();
ОписаниеОповещения = Новый ОписаниеОповещения(""СписокНайденныхФайловОповещение"", ЭтотОбъект, ДополнительныеПараметры);
НачатьПоискФайлов(ОписаниеОповещения, Каталог, МаскаФайлов, ИскатьВПодкаталогах);
	
//&НаКлиенте 
//Процедура СписокНайденныхФайловОповещение(НайденныеФайлы, ДополнительныеПараметры) Экспорт 
//	
//	Для Каждого ЭлементФайл Из НайденныеФайлы Цикл
//		// обработка
//	КонецЦикла;
//	
//КонецПроцедуры"}
},
{0,
{"Удаление файла (Обычное)",0,0,"Файл[Удалить]","ФайлИсточник = """";
УдалитьФайлы(ФайлИсточник);"}
},
{0,
{"Удаление файлв (ОписаниеОповещения)",0,0,"Файл[Удалить]","Каталог = """";
Маска = ""*.*"";
ДополнительныеПараметры = Новый Структура;
ОписаниеОповещения = Новый ОписаниеОповещения(""УдалитьЗавершение"", ЭтотОбъект, ДополнительныеПараметры);
НачатьУдалениеФайлов(ОписаниеОповещения, Каталог, Маска);

//// Добавить процедуру
//Процедура УдалитьЗавершение(ДополнительныеПараметры) Экспорт 

//КонецПроцедуры
"}
},
{0,
{"[Функция] - Копирование всех файлов из одного каталога в другой",0,0,"Файл[СкопироватьФайлы]","Процедура СкопироватьФайлы(Знач КаталогИсточник, Знач КаталогПриемник)
	
	//Проверим и поправим окончания пути каталогов
	Если Прав(КаталогИсточник, 1) <> ""\"" Тогда
		КаталогИсточник = КаталогИсточник + ""\"";
	КонецЕсли;	
	Если Прав(КаталогПриемник, 1) <> ""\"" Тогда
		КаталогПриемник = КаталогПриемник + ""\"";
	КонецЕсли;	
	
	//Создадим каталог приемник
	СоздатьКаталог(КаталогПриемник);
	
	МассивФайлов = НайтиФайлы(КаталогИсточник, ""*.*"", Истина);
	
	Для Каждого Файл Из МассивФайлов Цикл
		ПолноеИмяИсточник = Файл.ПолноеИмя;
		ПолноеИмяПриемник = КаталогПриемник + СтрЗаменить(Файл.ПолноеИмя, КаталогИсточник, """");
		
		Если ПустаяСтрока(Файл.Расширение) Тогда
			СоздатьКаталог(ПолноеИмяПриемник);	
		Иначе
			КопироватьФайл(ПолноеИмяИсточник, ПолноеИмяПриемник);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры"}
},
{0,
{"[Процедура] - Поиск файлов в каталоге (Асинх)",0,0,"Файл","&НаКлиенте
Асинх Процедура ПрочитатьФайлыВКаталоге(Каталог)
	
	ОбещаниеНайденныеФайлы = НайтиФайлыАсинх(Каталог, ""*.*"", Ложь);
	НайденныеФайлы = Ждать ОбещаниеНайденныеФайлы;
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Если Не ПустаяСтрока(НайденныйФайл.Расширение) Тогда
			// НайденныйФайл.ИмяБезРасширения;
			// НайденныйФайл.Расширение;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры
"}
}
},
{2,
{"Каталог",1,0,"",""},
{0,
{"Каталог формата (Путь\Год\Месяц\День\)",0,0,"Каталог[ТекущаяДата]","КаталогТекущаяДата = СтрШаблон(""%1\%2\"", ""C:\Temp"", Формат(ТекущаяДата(), ""ДФ=yyyy\MMMM\dd""));"}
},
{0,
{"Каталог сущестует",0,0,"Каталог[Существует]","ПутьКаталога = Новый Файл(<? ""Полный путь каталога"">);
Если ПутьКаталога.Существует() Тогда 
	// Существует
КонецЕсли;"}
}
},
{3,
{"Архивы",1,0,"",""},
{0,
{"Чтение zip-архива",0,0,"Архив","Архив = Новый ЧтениеZipФайла();
Архив.Открыть(""c:\архив.zip"", ""Пароль"");"}
},
{0,
{"Запись zip-архива",0,0,"Архив","АрхивРезультат = ""e:\test\архив.zip"";
Архив = Новый ЗаписьZIPФайла(АрхивРезультат
							, """" // пароль
							, """" // Комментарий
							, МетодСжатияZIP.<? ""Метод сжатия"", ВыборВарианта, ""BZIP2"",""BZIP2"", ""Копирование"",""Копирование"", ""Сжатие"",""Сжатие"">
							, УровеньСжатияZIP.<? ""Уровень сжатия"", ВыборВарианта, ""Оптимальный"",""Оптимальный"", ""Минимальный"",""Минимальный"", ""Максимальный"",""Максимальный"">
							, МетодШифрованияZIP.<? ""Шифрование"", ВыборВарианта, ""Zip20"",""Zip20"", ""AES128"",""AES128"", ""AES192"",""AES192"", ""AES256"",""AES256"">
							, КодировкаИменФайловВZipФайле.<? """", ВыборВарианта, ""Авто"",""Авто"", ""UTF8"",""UTF8"", ""КодировкаОСДополнительноUTF8"",""КодировкаОСДополнительноUTF8"">);
АрхивируемыйФайл = ""c:\temp\document.xml""; // по маске = ""c:\temp\*.xml""
Архив.Добавить(АрхивируемыйФайл, РежимСохраненияПутейZIP.<? ""Сохранение пути"", ВыборВарианта, ""СохранятьОтносительныеПути"",""СохранятьОтносительныеПути"", ""НеСохранятьПути"",""НеСохранятьПути"", ""СохранятьПолныеПути"",""СохранятьПолныеПути"">);
// Архив.Добавить ... 
Архив.Записать();	
"}
},
{0,
{"Извлечь zip-архив (все)",0,0,"Архив","Архив = Новый ЧтениеZipФайла(""c:\архив.zip"", ""Пароль"");
Архив.ИзвлечьВсе(""c:\Temp"", РежимВосстановленияПутейФайловZIP.<?""Востановление путей"", ВыборВарианта, ""Восстанавливать"",""Восстанавливать"", ""НеВосстанавливать"",""НеВосстанавливать"">);
"}
}
},
{1,
{"ПотокВПамяти",1,0,"",""},
{0,
{"Чтение PDF через ПотокВПамяти",0,0,"","// Поддерживаемые форматы: txt, pdf, ods, mxl7, mxl, xlsx, docx, ansitxt
ТабДок = Новый ТабличныйДокумент;
Поток = Новый ПотокВПамяти;
ТабДок.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
ЗапросИлиОтвет.УстановитьТелоИзДвоичныхДанных(ДанныеФайла);
ЗапросИлиОтвет.Заголовки.Вставить(""Content-Type"", ""application/pdf"");"}
}
}
},
{2,
{"JSON",1,0,"",""},
{0,
{"Чтение JSON",0,0,"","Чтение = Новый ЧтениеJSON;
Чтение.УстановитьСтроку(Строка); // JSON в виде строки
Данные = ФабрикаXDTO.ПрочитатьJSON(Чтение); 
Чтение.Закрыть();"}
},
{0,
{"Чтение JSON (ФабрикаXDTO)",0,0,"","Тип = ФабрикаXDTO.Тип(""http://www.адрес"", <?""Имя пакета XDTO"">);

Чтение = Новый ЧтениеJSON;
Чтение.УстановитьСтроку(Строка);
Данные = ФабрикаXDTO.ПрочитатьJSON(Чтение, Тип); 
Чтение.Закрыть();"}
}
},
{3,
{"HTTP",1,0,"",""},
{0,
{"Пример запроса HTTP",0,0,"HTTP[Запрос]","Заголовки = Новый Соответствие;
Заголовки.Вставить(""Content-Type"", ""application/json; charset=utf-8"");

Запрос = Новый HTTPЗапрос(""/iss/engines/stock/markets/shares/boards/TQBR/securities.json?marketprice_board=1&first=10&sort_order=asc&lang=ru"", Заголовки);

ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
Соединение = Новый HTTPСоединение(""iss.moex.com"", , , , , , ЗащищенноеСоединение);
Ответ = Соединение.ВызватьHTTPМетод(""GET"", Запрос);
"}
},
{0,
{"[Функция] - Чтение параметров http-запроса в структуру",0,0,"HTTP","Функция ПолучитьПараметры(Тело)Экспорт
	
	Результат = Новый Структура;
	Тело = РаскодироватьСтроку(Тело, СпособКодированияСтроки.КодировкаURL, ""UTF-8"");
	Тело = СтрЗаменить(Тело, ""+"", "" "");
	ПарметрыЗначения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Тело, ""&"");
	Для Каждого Пар Из ПарметрыЗначения Цикл
		
		мПар = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Пар, ""="");
		Если мПар.Количество() > 1 Тогда
			СущЗначениеПараметра = """";
			
			Попытка
				Результат.Свойство(мПар[0], СущЗначениеПараметра);
			Исключение
				Продолжить;
			КонецПопытки;
			
			//Если в структуре нет такого параметра, просто его добавляем.
			Если ПустаяСтрока(СущЗначениеПараметра) Тогда 
				Результат.Вставить(мПар[0], мПар[1]);
			Иначе
				
				//Если такой параметр есть и значени его находится в массиве, то добавляем
				//текущий параметр в массив.
				Если ТипЗнч(СущЗначениеПараметра) = Тип(""Массив"") Тогда 
					СущЗначениеПараметра.Добавить(мПар[1]);
					Результат.Вставить(мПар[0], СущЗначениеПараметра);
					
					//Если это второе значение параметра, то добавляем уже существующее и текущее
					//значение в массив.	
				Иначе 
					МассивЗначЭтогоПараметра = Новый Массив();
					МассивЗначЭтогоПараметра.Добавить(СущЗначениеПараметра);
					МассивЗначЭтогоПараметра.Добавить(мПар[1]);
					Результат.Вставить(мПар[0], МассивЗначЭтогоПараметра);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли мПар.Количество() = 1 Тогда
			Если Не Результат.Свойство(мПар[0]) Тогда
				Результат.Вставить(мПар[0], """");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции"}
},
{0,
{"[Функция] - Стандартные порты",0,0,"HTTP","Функция СтандартныеПортыИнтернетПротоколов()
	
	Результат = Новый Структура();
	
	Результат.Вставить(""IMAP"",  143);
	Результат.Вставить(""POP3"",  110);
	Результат.Вставить(""SMTP"",  25);
	Результат.Вставить(""HTTP"",  80);
	Результат.Вставить(""HTTPS"", 443);
	Результат.Вставить(""FTP"",   21);
	Результат.Вставить(""FTPS"",  21);
	Результат.Вставить(""WS"",    80);
	Результат.Вставить(""WSS"",   443);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции
"}
}
}
},
{5,
{"БСП",1,0,"",""},
{5,
{"Коллекции значений",1,0,"",""},
{7,
{"Массив",1,0,"",""},
{0,
{"Дополняет Массив значениями из Массива (БСП)",0,0,"Массив[Дополнить]","ОбщегоНазначенияКлиентСервер.ДополнитьМассив(<?""Массив (приемник)"">, <?""Массив (источник)"">, <?""Только уникальные значения"", ВыборВарианта, ""Нет"", ""Ложь"", ""Да"", ""Истина"">)"}
},
{0,
{"Значение в Массив (БСП)",0,0,"Массив[ИзЗначения]","ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(<? ""Имя реквизита значения"">);"}
},
{0,
{"Массив из ТаблицыЗначений (БСП)",0,0,"Массив[ИзТаблицы]","ОбщегоНазначения.ТаблицаЗначенийВМассив(<?""Таблица значений"">)"}
},
{0,
{"Свернуть Массив (БСП)",0,0,"Массив[Свернуть]","ОбщегоНазначенияКлиентСервер.СвернутьМассив(<? ""Имя Массива"">)"}
},
{0,
{"Удалить значение массива (БСП)",0,0,"Массив[УдалитьЗначение]","ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(<?""Массив"">, <?""Значение"">)"}
},
{0,
{"Удалить все найденные значения из массива (БСП)",0,0,"Массив[УдалитьЗначение]","ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(<?""Массив"">, <?""Значение"">)"}
},
{0,
{"Удалить значения по типу (БСП) ",0,0,"Массив[УдалитьПоТипу]","ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(<?""Массив"">, Тип(<?"""", ВыборТипа>))"}
}
},
{1,
{"Соответствие",1,0,"",""},
{0,
{"Дополняет Соответствие другим Соответствием (БСП)",0,0,"Соотв[етствиеДополнить]","ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(<? ""Приемник"">, <? ""Источник"">, <?""Заменять идентичные имена"", ВыборВарианта, ""Да"",""Истина"", ""Нет"",""Ложь"">)"}
}
},
{1,
{"Строка",1,0,"",""},
{0,
{"Строка в массив (БСП)",0,0,"Строка[ВМассив]","СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(<? ""Строка"">, ""<? ""Разделитель"">"")"}
}
},
{2,
{"Структура",1,0,"",""},
{0,
{"Дополняет Структуру значениями из Структуры (БСП)",0,0,"Струк[тураДополнить]","ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(<?""Приемник"">, <?""Источник"">, <?""Заменять"", ВыборВарианта, ""Заменять значениями"", ""Истина"", ""Дополнять"", ""Неопеределено"">)"}
},
{0,
{"Ключи структуры в строку (БСП)",0,0,"Струк[тураКлючи]","ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(<?""Структура"">, ""<?""Разделитель"">"")"}
}
},
{4,
{"ТаблицаЗначений",1,0,"",""},
{0,
{"Дополняет ТаблицуЗначений данными из ТаблицыЗначений (БСП)",0,0,"Таб[лицаЗначенийДополнить]","ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(<?""ТаблицаЗначений (источник)"">, <?""ТаблицаЗначений (приемник)"">)"}
},
{0,
{"Дополняет ТаблицуЗначений значениями из Массива (БСП)",0,0,"Таб[лицаЗначенийДополнить]","ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(<? ""ТаблицаЗначений"">, <? ""Массив"">, <? ""Имя поля"">)"}
},
{0,
{"ТаблицуЗначений в Массив (БСП)",0,0,"Табл[ицаЗначенийВМассив]","ОбщегоНазначения.ТаблицаЗначенийВМассив(<? ""Имя ТаблицыЗначений"">)"}
},
{0,
{"Строка ТаблицыЗначений в Структуру (БСП)",0,0,"Табл[ицаЗначенийСтрокаВСтруктуру]","ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(<? ""Строка ТаблицыЗначений"">)"}
}
}
},
{2,
{"Объекты конфигурации",1,0,"",""},
{1,
{"Документы",1,0,"",""},
{0,
{"Проведение документов (БСП)",0,0,"Докум[ентыПровести]","ОбщегоНазначения.ПровестиДокументы(<? ""Массив документов"">)"}
}
},
{1,
{"Права и Роли",1,0,"",""},
{0,
{"РолиДоступны (БСП)",0,0,"Роли[Доступны]","РолиДоступны(...)"}
}
}
},
{5,
{"Организация",1,0,"",""},
{0,
{"Сведения о контрагенте (БСП)",0,0,"Контр[агентСведения]","СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(<? ""Ссылка на Контрагента"">, ТекущаяДата());"}
},
{0,
{"Сведения об организации (БСП)",0,0,"Орган[изацияСведения]","ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
СведенияОбОрганизацииСтруктура = ОрганизацииСервер.СведенияОбОрганизации(ОсновнаяОрганизация);"}
},
{0,
{"Описание организации (БСП)",0,0,"","// Пример:
// ООО ""Автотрейд"", ИНН 7799555720, 142770, Москва г, МКАД 40-й (п Сосенское) км,
// владение № 1, строение 2, р/с 40702810100000000004, в банке ПАО СБЕРБАНК, БИК 044525225, 
// к/с 30101810400000000225

СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент.ССылка, ТекущаяДата()); 
СтрокаКонтрагент = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте,"""",); 

"}
},
{0,
{"Структура организации (БСП)",0,0,"","ОрганизацияСтуркт = БухгалтерскийУчетПереопределяемый.СтруктураОрганизации(Организация.Ссылка);"}
},
{0,
{"Получить банковский счет по-умолчанию (БСП)",0,0,"","БанкСчетСсылка = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(Орг1.ССылка, );"}
}
},
{1,
{"SMS",1,0,"",""},
{0,
{"Отправка SMS (БСП)",0,0,"SMS[Отправить]","ОтправкаSMS.ОтправитьSMS(НомераПолучателей, Знач Текст, ИмяОтправителя = Неопределено, ПеревестиВТранслит = Ложь)

Если ОтправкаSMS.ДоступнаОтправкаSMS() Тогда
	Массив = Новый Массив;
	Массив.Добавить(""+71234567890"");
		
	РезультатОтправки = ОтправкаSMS.ОтправитьSMS(Массив, ""<? ""SMS Сообщение"">"", ""<? ""Имя отправителя"">"", <?""Перевод в транислит"", ВыборВарианта, ""Не использовать транслит"", ""Ложь"", ""Перевести в транслит"", ""Истина"">)	
КонецЕсли;"}
}
},
{9,
{"Базовая функциональность",1,0,"",""},
{16,
{"ОбщегоНазначения",1,0,"",""},
{0,
{"ЗначенияРеквизитовОбъекта",0,0,"Общего[Назначения]","ОбщегоНазначения.ЗначенияРеквизитовОбъекта(<?""Ссылка"">, ""реквизит1, Реквизит2, ..."")"}
},
{0,
{"ЗначениеРеквизитаОбъекта",0,0,"Общего[Назначения]","ОбщегоНазначения.ЗначениеРеквизитаОбъекта(<?""Ссылка"">, ""<?""Имя реквизита"">"")"}
},
{0,
{"ПредопределенныйЭлемент",0,0,"Общего[Назначения]","ОбщегоНазначения.ПредопределенныйЭлемент(""<?""Полный путь к предопределенному элементу"">"")"}
},
{0,
{"ПроверитьПроведенностьДокументов",0,0,"Общего[Назначения]","ОбщегоНазначения.ПроверитьПроведенностьДокументов(<?""Массив документов"">)"}
},
{0,
{"ПровестиДокументы",0,0,"Общего[Назначения]","ОбщегоНазначения.ПровестиДокументы(<?""Массив документов"">)"}
},
{0,
{"ЕстьСсылкиНаОбъект",0,0,"Общего[Назначения]","ОбщегоНазначения.ЕстьСсылкиНаОбъект(<?""Ссылка или массив ссылок"">)"}
},
{0,
{"МестаИспользования",0,0,"Общего[Назначения]","ОбщегоНазначения.МестаИспользования(<?""Массив ссылок"">)"}
},
{0,
{"УстановитьЗначениеРеквизита",0,0,"Общего[Назначения]","ОбщегоНазначения.УстановитьЗначениеРеквизита(<?""Объект"">, ""<?""Имя реквизита"">"", <?""Значение"">, <?""КодЯзыка"">)"}
},
{0,
{"ЭтоОсновнойЯзык",0,0,"Общего[Назначения]","ОбщегоНазначения.ЭтоОсновнойЯзык()"}
},
{0,
{"ДанныеСовпадают",0,0,"Общего[Назначения]","ОбщегоНазначения.ДанныеСовпадают(<?""Данные1"">, <?""Данные2"">)"}
},
{0,
{"ИмяЗначенияПеречисления",0,0,"Общего[Назначения]","ОбщегоНазначения.ИмяЗначенияПеречисления(<?""Значение перечисления"">)"}
},
{0,
{"ПустойУникальныйИдентификатор",0,0,"Общего[Назначения]","ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор()"}
},
{0,
{"КонтрольнаяСуммаСтрокой",0,0,"Общего[Назначения]","ОбщегоНазначения.КонтрольнаяСуммаСтрокой(<?""Данные"">, <?""Алгоритм"">)"}
},
{0,
{"ВидОбъектаПоСсылке",0,0,"Общего[Назначения]","ОбщегоНазначения.ВидОбъектаПоСсылке(<?""Ссылка"">)"}
},
{0,
{"ИмяТаблицыПоСсылке",0,0,"Общего[Назначения]","ОбщегоНазначения.ИмяТаблицыПоСсылке(<?""Ссылка"">)"}
},
{0,
{"ЗначениеСсылочногоТипа",0,0,"Общего[Назначения]","ОбщегоНазначения.ЗначениеСсылочногоТипа(<?""Значение"">)"}
}
},
{2,
{"ОбщегоНазначенияКлиентСервер",1,0,"",""},
{0,
{"ЕстьРеквизитИлиСвойствоОбъекта",0,0,"Общего[НазначенияКлиентСервер]","ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(<?""Ссылка"">, ""<?""Имя реквизита"">"")"}
},
{0,
{"ДополнитьСтруктуру",0,0,"Струк[тура]","ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(<?""Приемник"">, <?""Источник"">, <?""Заменять"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">)"}
}
},
{13,
{"СтроковыеФункцииКлиентСервер",1,0,"",""},
{0,
{"ВставитьПараметрыВСтроку",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(""Здравствуй, [Имя] [Фамилия]."", Новый Структура(""Фамилия,Имя"", ""Иванов"", ""Петр""))"}
},
{0,
{"ИзвлечьТекстИзHTML",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(<?""HTML текст"">)"}
},
{0,
{"ПодставитьПараметрыВСтроку",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(""<?""Текстовая строка"">"", Парам1, Парам2, ...)"}
},
{0,
{"ПреобразоватьЧислоВАрабскуюНотацию",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВАрабскуюНотацию(""<?""Рисмкое число"">"")"}
},
{0,
{"ПреобразоватьЧислоВРимскуюНотацию",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(<?""Число"">)"}
},
{0,
{"РазложитьСтрокуВМассивПодстрок",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(""<?""Текстовая строка"">"", , , Истина)"}
},
{0,
{"РазложитьСтрокуВМассивСлов",0,0,"","СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(""<? ""Строка"">"", ""<? ""Разделитель"">"")"}
},
{0,
{"СократитьДвойныеКавычки",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(""<?""Строка"">"")"}
},
{0,
{"СтрокаВДату",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.СтрокаВДату(""<?""Строка дата"">"")"}
},
{0,
{"СтрокаВЧисло",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.СтрокаВЧисло(""<?""Строка как число"">"")"}
},
{0,
{"СформироватьСтрокуСимволов",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(""<?""Строка"">"", <?""Количество повторений"">)"}
},
{0,
{"УдалитьПоследнийСимволВСтроке",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(""<?""Строка"">"", <?""Число символов"">)"}
},
{0,
{"УдалитьПовторяющиесяСимволы",0,0,"Строк[овыеФункцииКлиентСервер]","СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(""<?""Строка"">"", ""<?""Символ удаления"">"")"}
}
},
{1,
{"РаботаСАдресами",1,0,"",""},
{0,
{"СведенияОбАдресе",0,0,"","РаботаСАдресами.СведенияОбАдресе(<?""Строка адреса"">);"}
}
},
{1,
{"РаботаСКонтрагентами",1,0,"",""},
{0,
{"РеквизитыЮридическогоЛицаПоИНН",0,0,"","РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИНН)"}
}
},
{1,
{"РегламентированнаяОтчетностьКлиентСервер",1,0,"",""},
{0,
{"РазложитьАдрес",0,0,"","РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(<?""Строка адрес"">);"}
}
},
{1,
{"УчетНДСКлиентСервер",1,0,"",""},
{0,
{"РассчитатьСуммуНДС",0,0,"РассчитатьСуммуНДС","УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС);"}
}
},
{1,
{"ФайловаяСистемаКлиент",1,0,"",""},
{0,
{"ОткрытьНавигационнуюСсылку",0,0,"","ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(<?""Ссылка на внешний ресурс"">)"}
}
},
{1,
{"УправлениеКонтактнойИнформацией",1,0,"",""},
{0,
{"ДобавитьКонтактнуюИнформацию",0,0,"","УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(<?""Ссылка Контрагент"">, <?""Адрес"">, <?""ВидыКонтактнойИНформации"">, ТекущаяДата(), Ложь);"}
}
}
}
},
{8,
{"СКД",1,0,"",""},
{0,
{"Вывести СКД в ТабличныйДокумент",0,0,"СКД","ВнешниеНаборыДанных = Новый Структура;
СхемаКомпоновкиДанных = <? ""Объект конфигурации где хранится Макет СКД"">.ПолучитьМакет(""Макет"");
	
Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
// +++{ 11.05.2023 :: БНВ - Добавление Параметра
ПараметрКомпановки = Настройки.ПараметрыДанных.Элементы.Добавить();
ПараметрКомпановки.Параметр = Новый ПараметрКомпоновкиДанных(""Дата"");
ПараметрКомпановки.Использование = Истина;
ПараметрКомпановки.Значение = ТекущаяДата();
// }--- БНВ
	
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетСКД = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетСКД, ВнешниеНаборыДанных);

ТабличныйДокумент = Новый ТабличныйДокумент;
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
"}
},
{0,
{"Загрузка СхемыКомпоновкиДанных из XML ",0,0,"СКД","ЧтениеXML = Новый ЧтениеXML;
ЧтениеXML.УстановитьСтроку(<?""Текст схемы компоновки данных"">.ПолучитьТекст());
СКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип(""СхемаКомпоновкиДанных""));
"}
},
{0,
{"Обращение к табличной частидокумента",0,0,"СКД","ОднаЯчейка = ТабДокумент.Область(10, 2);
ДиапазонЯчеек = ТабДокумент.Область(10, 2, 12, 4);
СтрокаДокумента = ТабДокумент.Область(10, , 10, );
КолонкаДокумента = ТабДокумент.Область(, 2, , 2);"}
},
{0,
{"[Функция] - СкопироватьСхемуКомпоновкиДанных",0,0,"СКД[СкопироватьСхемуКомпоновкиДанных]","Функция СкопироватьСхемуКомпоновкиДанных(ИсходнаяСхема) Экспорт
	
	Если ТипЗнч(ИсходнаяСхема) = Тип(""СхемаКомпоновкиДанных"") Тогда
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXDTO(СериализаторXDTO.ЗаписатьXDTO(ИсходнаяСхема));
	Иначе
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции // -- СкопироватьСхемуКомпоновкиДанных()"}
},
{0,
{"[Процедура] - Вывести СКД в ТаблицуЗначений",0,0,"СКД","&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИнициализироватьКомпоновкуДанных();
КонецПроцедуры

&НаСервере
Процедура Команда_СформироватьНаСервере()
	
	ТаблицаЗначений.Очистить();

	СхемаКомпоновкиДанных = РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(""ИмяМакетаСКД"");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных
						, КомпоновщикНастроек.Настройки
						,
						,
						, Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ = Новый ТаблицаЗначений;
	ТЗ = ТаблицаЗначений.Выгрузить();
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТаблицаЗначений.Загрузить(ТЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_Сформировать(Команда)
	Команда_СформироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновкуДанных(ПоУмолчанию = Ложь)
	
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(""ИмяМакетаСКД"");
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
					
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметраНастроек(ИмяПараметра, Значение)
	
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

"}
},
{0,
{"[Процедура] - Добавить текст в сформированный СКД-отчет",0,0,"СКД[ПриКомпановкеРезультата]","Перем _СтандартнаяОбработка;

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если НЕ _СтандартнаяОбработка = Истина Тогда 
		СтандартнаяОбработка = Ложь;
		_СтандартнаяОбработка = Истина;

		Область = Новый Структура;
			Область.Вставить(""Высота"", ДокументРезультат.ВысотаТаблицы);
			Область.Вставить(""Ширина"", ДокументРезультат.ШиринаТаблицы);
			Область.Вставить(""RC_Начало"", СтрШаблон(""R%1C1"", ПерваяСтрока));
			Область.Вставить(""RC_Конец"", СтрШаблон(""R%1C%2"", Область.Высота, Область.Ширина));

		//ДокументРезультат.ВставитьОбласть(
		//			ДокументРезультат.Область(Область.Высота + 1, 1),
		//			ДокументРезультат.Область(Область.Высота + 1, 1, Область.Высота + 1, Область.Ширина), 
		//			ТипСмещенияТабличногоДокумента.БезСмещения)			
		//ОбластьДляЗаписи = ""R1C1:R1C1"";
		//ДокументРезультат.Область(ОбластьДляЗаписи).Текст = """"
	КонецЕсли;

КонецПроцедуры // -- ПриКомпоновкеРезультата()"}
},
{0,
{"[Процедура] - Добавление разделителя в отчет",0,0,"СКД","// Создается ""Вычисляемое поле"" (по этой фразе будем определять начало листа)
// Путь к данным: Заголовок
// Выражение: ""Заголовок""
// Тип значения: Строка

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИтоговыеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//Можем редактировать настройки компоновки (ИтоговыеНастройки)
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ИтоговыеНастройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);   
	
	//Можем редактировать табличный документ (ДокументРезультат)
	
	// Считываю параметры периода хотя это не обязательно	
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(""ПериодОтчета"");
	Если Параметр <> Неопределено  Тогда
		Элемент = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Параметр.ИдентификаторПользовательскойНастройки);
		Если Элемент <> Неопределено И Элемент.Использование Тогда
			Дата1 = Элемент.Значение.ДатаНачала;
			Дата2 = Элемент.Значение.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	ПОиск=ДокументРезультат.НайтиТекст(""Заголовок"",ДокументРезультат.Область(1,1),,,,Истина); 
	ПОка не ПОиск=Неопределено Цикл
		ПОиск.Текст=""Лицевой счет сотрудника по начислению зарплаты и удержаниям за период ""+ПредставлениеПериода(Дата1,Дата2,""ДЛФ=ДД""); 
		ДокументРезультат.Область(""R""+Формат(ПОиск.Низ,""ЧГ=0"")).НачалоСтраницы=Истина;   //Эта строка работает также как ВывестиГоризонтальныйРазделительСтраниц()
		ПОиск=ДокументРезультат.НайтиТекст(""Заголовок"",,,,,Истина);
	КонецЦикла;   
КонецПроцедуры"}
},
{0,
{"[Процедура] - Вывод Метаданные.Документы с полями",0,0,"СКД","// Вывод всех документов конфигурации через СКД
//
// НаборДанных
//	ВЫБРАТЬ
//		&Ссылка КАК Ссылка,
//		&ВидДокумента КАК ВидДокумента,
//		&Дата КАК Дата,
//		&Номер КАК Номер,
//		&Ответственный КАК Ответственный
//
// Параметры
//		ДатаНачала (&Период.ДатаНачала), ДатаОкончания (&Период.ДатаОкончания), Период
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	СхемаЗапроса = Новый СхемаЗапроса;
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	НаборОсновныхПолей = СтрРазделить(""Ссылка,Дата,Номер,Ответственный"", "","", Ложь);
		
	ЭлемПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ИдНастройкиПериода = ЭлемПараметрыДанных.Найти(""Период"").ИдентификаторПользовательскойНастройки;
	ЭлемПользНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	ЕстьОтборПериод = ЭлемПользНастройки.Найти(ИдНастройкиПериода).Использование;
	
	Для Каждого Эл Из Метаданные.Документы Цикл
		
		Оператор = ПакетЗапроса.Операторы.Добавить();
		ИмяОбъекта = СтрШаблон(""Объект%1"", Эл.Имя);
		СтруктураОбъекта = Оператор.Источники.Добавить(Эл.ПолноеИмя(), ИмяОбъекта);
		
		Для ИндексПоля = 0 По НаборОсновныхПолей.ВГраница() Цикл 
			ПоискПоля = СтруктураОбъекта.Источник.ДоступныеПоля.Найти(НаборОсновныхПолей[ИндексПоля]);
			Если ПоискПоля = Неопределено Тогда 
				Оператор.ВыбираемыеПоля.Добавить(""&"" + НаборОсновныхПолей[ИндексПоля], ИндексПоля);
			Иначе
				Оператор.ВыбираемыеПоля.Добавить(ПоискПоля, ИндексПоля);
			КонецЕсли;
		КонецЦикла;
			
		ПредставлениеДопПоля = СтрШаблон(""""""%1"""""", СтрЗаменить(Эл.Синоним, """""""", """"));
		ИндексПоля = ИндексПоля + 1;
		ДопПоле = Оператор.ВыбираемыеПоля.Добавить(ПредставлениеДопПоля, ИндексПоля);
		
		Если ЕстьОтборПериод Тогда
			Оператор.Отбор.Добавить(СтрШаблон(""%1.Дата"", ИмяОбъекта) 
									+ "" МЕЖДУ &ДатаНачала И &ДатаОкончания "");
		КонецЕсли;
		
	КонецЦикла;
	
	ПакетЗапроса.Колонки[ИндексПоля].Псевдоним = ""ВидДокумента"";
	ПакетЗапроса.Операторы.Удалить(0);
	
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры"}
}
},
{4,
{"API",1,0,"",""},
{4,
{"JSON",1,0,"",""},
{0,
{"Соответствие типов JSON",0,0,"JSON[СоответствиеТипов]","СоответстиеТипов = Новый Соответствие;
	СоответстиеТипов.Вставить(""string"", ""Строка"");
	СоответстиеТипов.Вставить(""int32"", ""Число"");
	СоответстиеТипов.Вставить(""int64"", ""Число"");
	СоответстиеТипов.Вставить(""double"", ""Число"");
	СоответстиеТипов.Вставить(""date"", ""Дата"");
"}
},
{0,
{"[Функция] - Получение значение из JSON",0,0,"JSON[Значение]","Функция ЗначениеИзJSON(ЗначениеJSON, ТипJSON)
	
	Результат = ЗначениеJSON;
	
	Если ЗначениеJSON = Неопределено Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если ТипJSON = ""date"" Тогда
		Если ЗначениеJSON = ""0000-00-00"" Тогда
			Результат = Дата(1, 1, 1);
		Иначе
			Результат = ПрочитатьДатуJSON(СтрЗаменить(СокрЛП(ЗначениеJSON), "" "", ""T""), ФорматДатыJSON.ISO);
		КонецЕсли; 
	ИначеЕсли ТипJSON = ""number"" Тогда 
		Результат = Число(ЗначениеJSON);
	ИначеЕсли ТипJSON = ""boolean"" Тогда 
		Результат = (Число(ЗначениеJSON) <> 0);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции
"}
},
{0,
{"[Функция] - Получение данных JSON",0,0,"JSON[ПолучениеДанных]","Функция ПолучениеДанныхJSON(Знач АдресСервера = ""имя.ru""
							, Знач АдресРесурса = ""api/get/область?парам1=1&apikey=DEMO""
							, ДанныеJSON = Неопределено)

	Соединение = Новый HTTPСоединение(АдресСервера,,,,, 30, Новый ЗащищенноеСоединениеOpenSSL); 	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
        Возврат ДанныеJSON;
	КонецПопытки;    
	
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();

	Если Ответ.КодСостояния = 200 
	И СтрНайти(Ответ.Заголовки.Получить(""Content-Type""), ""json"") > 0 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
	Иначе
        Возврат ДанныеJSON;
	КонецЕсли;

	Возврат ДанныеJSON;

КонецФункции // - ПолучениеДанныхJSON()
"}
},
{0,
{"[Процедура] - Сформировать ДеревоЗначений из СоответствияJSON",0,0,"JSON[СформироватьДеревоЗначений]","&НаСервере
Процедура ЗаполнитьДеревоJSON(СоответствиеИзJson)
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить(""Ключ"");
	ДеревоЗначений.Колонки.Добавить(""Значение"");
	ДеревоЗначений.Колонки.Добавить(""Тип"");
	
	ВерхнийУровеньДерева = ДеревоЗначений.Строки.Добавить();
	ВерхнийУровеньДерева.Ключ = ""Дерево JSON"";
	
	СформироватьПодстрокиДерева(СоответствиеИзJson, ВерхнийУровеньДерева);
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, ""ДеревоJSON"");

КонецПроцедуры

&НаСервере
Процедура СформироватьПодстрокиДерева(ИтераторИзJson, ДеревоЗначений, ИндексЭлементаМассива = 0)
	
	Для Каждого Элемент Из ИтераторИзJson Цикл
		ПодчСтрока = ДеревоЗначений.Строки.Добавить();
		Если ТипЗнч(ИтераторИзJson) = Тип(""Массив"") Тогда
			ПодчСтрока.Ключ = ""["" + ИндексЭлементаМассива + ""]"";
			ИндексЭлементаМассива = ИндексЭлементаМассива + 1;
			Значение = Элемент;
		Иначе
			ПодчСтрока.Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип(""Соответствие"") Тогда
			ПодчСтрока.Значение = ""{"" + Значение.Количество() +""}"";
			ПодчСтрока.Тип = ""Запись"";
			СформироватьПодстрокиДерева(Значение, ПодчСтрока);
		ИначеЕсли ТипЗнч(Значение) = Тип(""Массив"") Тогда
			ПодчСтрока.Значение = ""["" + Значение.Количество() + ""]"";
			ПодчСтрока.Тип = ""Массив"";
			СформироватьПодстрокиДерева(Значение, ПодчСтрока);
		Иначе
			ПодчСтрока.Значение = Значение;
			ПодчСтрока.Тип = ТипЗнч(Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
"}
}
},
{1,
{"Организации / Контрагенты",1,0,"",""},
{0,
{"[Функция] - Получение информации о контагенте (egrul.itsoft.ru)",0,0,"","Функция ПолучитьДанныеКонтрагентаПоИНН(ИНН) Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить(""ИНН"", ИНН);

	АдресСервера =  ""egrul.itsoft.ru"";
	АдресРесурса = ""/short_data/?"" + ИНН;
	
	Соединение = Новый HTTPСоединение(АдресСервера,,,,, 30, Новый ЗащищенноеСоединениеOpenSSL); 	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
	    Возврат ДанныеКонтрагента;
	КонецПопытки;    
	
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();

	ДанныеЕГРЮЛ = Неопределено;
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		ДанныеЕГРЮЛ = ПрочитатьJSON(ЧтениеJSON, Истина);  
	Иначе
		Возврат ДанныеКонтрагента;
	КонецЕсли;                    

	Если ДанныеЕГРЮЛ[""short_form""] <> Неопределено
		И ДанныеЕГРЮЛ[""short_form""] = ""ИП"" Тогда
		ВидКонтрагента = ""Индивидуальный предприниматель"";
	Иначе                                                                           
		ВидКонтрагента = ""Юридическое лицо"";
	КонецЕсли;
	
	ДанныеКонтрагента.Вставить(""ВидКонтрагента"",		ВидКонтрагента);
	ДанныеКонтрагента.Вставить(""КПП"",					ДанныеЕГРЮЛ[""kpp""]);
	ДанныеКонтрагента.Вставить(""РегистрационныйНомер"",	ДанныеЕГРЮЛ[""ogrn""]);
	ДанныеКонтрагента.Вставить(""ДатаРегистрации"",		ДанныеЕГРЮЛ[""reg_date""]);
	ДанныеКонтрагента.Вставить(""Наименование"",			ДанныеЕГРЮЛ[""short_name""]);
	ДанныеКонтрагента.Вставить(""НаименованиеПолное"",	ДанныеЕГРЮЛ[""full_name""]);
	ДанныеКонтрагента.Вставить(""Руководитель"",	 		ДанныеЕГРЮЛ[""chief_shortname""]);
	ДанныеКонтрагента.Вставить(""РуководительПолное"",	ДанныеЕГРЮЛ[""chief""]);
	ДанныеКонтрагента.Вставить(""Должность"",				ДанныеЕГРЮЛ[""chief_position""]);
	
	Если ДанныеЕГРЮЛ[""address""] <> Неопределено Тогда
		ДанныеКонтрагента.Вставить(""ЮридическийАдрес"",	ДанныеЕГРЮЛ[""address""]);
	КонецЕсли;
	
	Возврат ДанныеКонтрагента;

КонецФункции"}
}
},
{1,
{"ChatGPT",1,0,"",""},
{0,
{"Запрос к нейросети ChatGPT",0,0,"API[ChatGPT]","Функция ЗапросКChatGPT(Знач Текст = """", Знач КлючAPI = """") Экспорт
	
	Соединение = Новый HTTPСоединение(""api.openai.com"", , , , , , Новый ЗащищенноеСоединениеOpenSSL());
		
	Заголовки = Новый Соответствие();
	Заголовки.Вставить(""Content-Type"", ""application/json"");
	Заголовки.Вставить(""Authorization"", СтрШаблон(""Bearer %1"", КлючAPI));
	
	Запрос = Новый HTTPЗапрос();
	Запрос.АдресРесурса = ""v1/completions"";
	Запрос.Заголовки = Заголовки;
		
	ТелоЗапроса = ""
		|{
		|""""model"""": """"text-davinci-003"""",
		|""""prompt"""": """""" + Текст+ """""",
		|""""max_tokens"""": 100,
		|""""temperature"""": 0,
		|""""top_p"""": 1,
		|""""n"""": 1,
		|""""stream"""": false,
		|""""logprobs"""": null,
		|""""stop"""": """".""""
		|}"";
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	КодСостояния = Ответ.КодСостояния;
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Если КодСостояния = 200 Тогда
		//Ответ в виде Json
		Возврат СтрокаОтвета;
	Иначе
		Возврат """";
	КонецЕсли;		
    
КонецФункции"}
}
},
{1,
{"Telegram",1,0,"",""},
{0,
{"[Процедура] - Отправить сообщение пользователю в чате Bot'a",0,0,"Telegram[BotОтправкаСообщения]","Процедура ОтправитьСообщениеЧерезTelegramBot(Знач ПользовательID = Неопределено, Знач СообщениеПользователю = """")
	
	// ПользовательID - кому отправляется сообщение
	Если ПользовательID = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БотTokenAPI = ""1234567890:AAAAaaAAaAaAAaAaaaaaAa_AaaAaaaAaaAA"";
	СообщениеПользователю = СтрЗаменить(СообщениеПользователю, ""&"", "" "");
	
	СоединениеHTTP = Новый HTTPСоединение(""api.telegram.org"", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	АдресЗапроса = СтрШаблон(""bot%1
							|/sendMessage?chat_id=%2
							|&text=%3
							|&parse_mode=HTML&disable_web_page_preview=false""
							, БотTokenAPI, ПользовательID, СообщениеПользователю);
	ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса);
	
	Попытка
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP); 
		Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();
	Исключение
		Возврат;
	КонецПопытки;

КонецПроцедуры"}
}
}
}
}
}